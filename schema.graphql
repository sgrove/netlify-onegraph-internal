"""An internal directive used by Netlify Graph"""
directive @netlify(
  """Specify how the operation should be executed in production"""
  executionStrategy: OneGraphExecutionStrategy = PERSISTED

  """The docstring for this operation"""
  doc: String

  """The uuid of the operation (normally auto-generated)"""
  id: String!
) on QUERY | MUTATION | SUBSCRIPTION | FRAGMENT_DEFINITION

"""An internal directive used by Netlify Graph to handle caching"""
directive @netlifyCacheControl(
  """
  Whether to fallback to a previous successful response if the current request fails
  """
  fallbackOnError: Boolean

  """The cache strategy for this operation."""
  cacheStrategy: OneGraphPersistedQueryCacheStrategyArg

  """Whether caching is enabled for this operation."""
  enabled: Boolean = false
) on QUERY

type ApolloAccount implements OneGraphNode {
  id: String
  name: String
  websiteUrl: String
  blogUrl: String
  angelListUrl: String
  linkedinUrl: String
  twitterUrl: String
  facebookUrl: String
  alexaRanking: Int
  phone: String
  linkedinUid: String
  publiclyTradedSymbol: String
  publiclyTradedExchange: String
  logoUrl: String
  crunchbaseUrl: String
  primaryDomain: String
  domain: String
  teamId: String
  organizationId: String
  accountStageId: String
  source: String
  originalSource: String
  ownerId: String
  createdAt: String
  phoneStatus: String
  testPredictiveScore: String
  hubspotId: String
  salesforceId: String
  salesforceOwnerId: String
  parentAccountId: String
  existenceLevel: String
  modality: String
  salesforceRecordUrl: String
  labelIds: [String]
  accountPlaybookStatuses: [String]
  starredByUserIds: [String]
  languages: [String]
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

type ApolloAccountStage implements OneGraphNode {
  id: String
  teamId: String
  displayName: String
  name: String
  displayOrder: Float
  defaultExcludeForLeadgen: Boolean
  category: String
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

type ApolloAssistantSetting {
  dealSizeMetric: String
  latestFundingDays: Int
  latestNewsDays: Int
  maxNumActiveAccounts: Int
  maxPeopleInSequencePerAccount: Int
  numInactiveDaysToReEngage: Int
  territoryLocationOverride: Boolean
  id: String
  key: String
  territoryPersonLocations: [String]
  territoryLocations: [String]
  territoryCompanySizeRanges: [String]
  technologyUids: [String]
  successCaseAccountStageIds: [String]
  personaIds: [String]
  jobPostingTitles: [String]
  jobPostingLocations: [String]
  inactiveContactStageIds: [String]
  inactiveAccountStageIds: [String]
}

type ApolloContact implements OneGraphNode {
  id: String
  firstName: String
  lastName: String
  name: String
  linkedinUrl: String
  title: String
  contactStageId: String
  ownerId: String
  personId: String
  emailNeedsTickling: Boolean
  organizationName: String
  source: String
  originalSource: String
  organizationId: String
  headline: String
  photoUrl: String
  presentRawAddress: String
  linkedinUid: String
  extrapolatedEmailConfidence: Float
  salesforceId: String
  salesforceLeadId: String
  salesforceContactId: String
  salesforceAccountId: String
  salesforceOwnerId: String
  createdAt: String
  leadRequestId: String
  testPredictiveScore: String
  emailManuallyChanged: Boolean
  directDialStatus: String
  directDialEnrichmentFailedAt: String
  emailStatus: String
  accountId: String
  lastActivityDate: String
  hubspotVid: String
  hubspotCompanyId: String
  sanitizedPhone: String
  updatedAt: String
  queuedForCrmPush: Boolean
  suggestedFromRuleEngineConfigId: String
  hasPendingEmailArcgateRequest: Boolean
  hasEmailArcgateRequest: Boolean
  existenceLevel: String
  email: String
  salesforceRecordUrl: String
  state: String
  city: String
  country: String
  accountPhoneNote: String
  contactJobChangeEvent: ApolloContactJobChangeEvent
  phoneNumbers: [ApolloPhoneNumber!]
  organization: ApolloOrganization
  account: ApolloAccount
  contactCampaignStatuses: [ApolloContactCampaignStatus!]
  labelIds: [String]
  starredByUserIds: [String]
  mergedCrmIds: [String]
  emailerCampaignIds: [String]

  """
  All lists/tags that the user belongs to. This will match the values in label_ids
  """
  labels: [ApolloLabel!]

  """The contact stage that this contact belongs to."""
  contactStage: ApolloContactStage
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

type ApolloContactCampaignStatus {
  id: String
  emailerCampaignId: String
  sendEmailFromUserId: String
  inactiveReason: String
  status: String
  addedAt: String
  addedByUserId: String
  finishedAt: String
  pausedAt: String
  autoUnpauseAt: String
  sendEmailFromEmailAddress: String
  sendEmailFromEmailAccountId: String
  manuallySetUnpause: String
  failureReason: String
  currentStepId: String
}

type ApolloContactJobChangeEvent {
  id: String
  createdAt: String
  oldOrganizationId: String
  newOrganizationId: String
  personId: String
  contactId: String
  title: String
  oldTitle: String
  isProcessed: Boolean
  isDismissed: Boolean
  newOrganizationName: String
  oldOrganizationName: String
  contactName: String
  accountId: String
  accountName: String
  oldAccountId: String
  oldAccountName: String
  charged: Boolean
}

type ApolloContactStage implements OneGraphNode {
  id: String
  teamId: String
  displayName: String
  name: String
  displayOrder: Float
  ignoreTriggerOverride: Boolean
  category: String
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

type ApolloCurrentTechnology {
  uid: String
  name: String
  category: String
}

type ApolloEmailAccount implements OneGraphNode {
  id: String
  userId: String
  email: String
  type: String
  active: Boolean
  default: Boolean
  secondsDelayBetweenEmails: Int
  providerDisplayName: String
  nylasProvider: String
  lastSyncedAt: String
  emailSendingPolicyCd: String
  sendgridApiUser: String
  mailgunDomains: String
  signatureEditDisabled: Boolean
  emailDailyThreshold: Int
  maxOutboundEmailsPerHour: Int
  signatureHtml: String
  aliases: [String]
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

type ApolloLabel implements OneGraphNode {
  cachedCount: Int
  createdAt: String
  modality: String
  name: String
  teamId: String
  updatedAt: String
  userId: String
  id: String
  key: String
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

type ApolloOnboardingUseCase {
  bulkStatus: String
  currentUseCase: String
  firstUserCase: String
  searchedPeople: Boolean
  downloadLeads: Boolean
}

type ApolloOrganization implements OneGraphNode {
  id: String
  name: String
  websiteUrl: String
  blogUrl: String
  angelListUrl: String
  linkedinUrl: String
  twitterUrl: String
  facebookUrl: String
  alexaRanking: Int
  phone: String
  linkedinUid: String
  publiclyTradedSymbol: String
  publiclyTradedExchange: String
  logoUrl: String
  crunchbaseUrl: String
  primaryDomain: String
  marketCap: String
  industry: String
  estimatedNumEmployees: Int
  snippetsLoaded: Boolean
  industryTagId: String
  retailLocationCount: Int
  rawAddress: String
  streetAddress: String
  city: String
  state: String
  postalCode: String
  country: String
  ownedByOrganizationId: String
  numSuborganizations: Int
  seoDescription: String
  shortDescription: String
  annualRevenuePrinted: String
  annualRevenue: Float
  currentTechnologies: [ApolloCurrentTechnology!]
  technologyNames: [String]
  suborganizations: [ApolloSuborganization!]
  keywords: [String]
  starredByUserIds: [String]
  languages: [String]
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!

  """Lists of active job postings for a company."""
  jobPostings: [ApolloOrganizationJobPosting!]
}

type ApolloOrganizationJobPosting {
  id: String
  title: String
  url: String
  city: String
  state: String
  country: String
  lastSeenAt: String
  postedAt: String
}

type ApolloPerson implements OneGraphNode {
  id: String
  firstName: String
  lastName: String
  name: String
  linkedinUrl: String
  title: String
  city: String
  emailStatus: String
  photoUrl: String
  twitterUrl: String
  githubUrl: String
  facebookUrl: String
  extrapolatedEmailConfidence: Float
  headline: String
  country: String
  email: String
  state: String
  excludedForLeadgen: Boolean
  organizationId: String
  accountId: String
  account: ApolloAccount
  organization: ApolloOrganization
  starredByUserIds: [String]
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

type ApolloPhoneNumber {
  rawNumber: String
  sanitizedNumber: String
  type: String
  position: Int
  status: String
}

type ApolloPicklistValue {
  name: String
  id: String
  key: String
}

type ApolloSequence implements OneGraphNode {
  id: String
  name: String
  archived: Boolean
  createdAt: String
  emailerScheduleId: String
  maxEmailsPerDay: String
  userId: String
  sameAccountReplyPolicyCd: String
  createTaskIfEmailOpen: Boolean
  emailOpenTriggerTaskThreshold: Int
  markFinishedIfClick: Boolean
  active: Boolean
  daysToWaitBeforeMarkAsResponse: Int
  markFinishedIfReply: Boolean
  markFinishedIfInterested: Boolean
  markPausedIfOoo: Boolean
  sequenceByExactDaytime: String
  permissions: String
  lastUsedAt: String
  sequenceRulesetId: String
  folderId: String
  sameAccountReplyDelayDays: Int
  numSteps: Int
  uniqueScheduled: Int
  uniqueDelivered: Int
  uniqueBounced: Int
  uniqueOpened: Int
  uniqueReplied: Int
  uniqueDemoed: Int
  uniqueClicked: Int
  uniqueUnsubscribed: Int
  bounceRate: Float
  openRate: Float
  clickRate: Float
  replyRate: Float
  spamBlockedRate: Float
  optOutRate: Float
  demoRate: Float
  loadedStats: Boolean
  ccEmails: String
  bccEmails: String
  starredByUserIds: [String]
  labelIds: [String]
  excludedContactStageIds: [String]
  excludedAccountStageIds: [String]
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

type ApolloSuborganization {
  id: String
  name: String
  websiteUrl: String
}

type ApolloTypedCustomField implements OneGraphNode {
  id: String
  modality: String
  name: String
  type: String
  mappedCrmField: String
  additionalMappedCrmField: String
  isReadonlyMappedCrmField: Boolean
  picklistOptionsLastSyncedAt: String
  picklistValueSetId: String
  mirrored: Boolean
  systemName: String
  textFieldMaxLength: String
  picklistValues: [ApolloPicklistValue!]
  picklistOptions: [String]
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

type ApolloUser implements OneGraphNode {
  id: String
  teamId: String
  firstName: String
  lastName: String
  title: String
  email: String
  createdAt: String
  creditLimit: Int
  directDialCreditLimit: Int
  salesforceAccount: String
  deleted: Boolean
  shouldIncludeUnsubscribeLink: Boolean
  optOutHtmlTemplate: String
  name: String
  enableClickTracking: Boolean
  passwordNeedsReset: Boolean
  salesforceId: String
  defaultCockpitLayout: String
  defaultAccountOverviewLayoutId: String
  defaultOrganizationOverviewLayoutId: String
  defaultContactOverviewLayoutId: String
  bridgeCalls: Boolean
  bridgePhoneNumber: String
  bridgeIncomingCalls: Boolean
  bridgeIncomingPhoneNumber: String
  currentEmailVerified: Boolean
  recordCalls: Boolean
  salesforceInstanceUrl: String
  permissionSetId: String
  defaultUseLocalNumbers: Boolean
  disableEmailLinking: String
  syncSalesforceId: String
  syncCrmId: String
  zpContactId: String
  chromeExtensionDownloaded: Boolean
  emailOauthSigninOnly: Boolean
  notificationLastCreatedAt: String
  crmRequestedToIntegrate: String
  hasInvitedUser: Boolean
  notificationLastReadAt: String
  dailyDataRequestEmail: Boolean
  dataRequestEmails: Boolean
  dailyTaskEmail: Boolean
  freeDataCreditsEmail: Boolean
  dismissNewTeamSuggestion: Boolean
  requestEmailChangeTo: String
  selfIdentifiedPersona: String
  addedContactToSequence: Boolean
  hasApprovedEmailerCampaign: Boolean
  mainEmailerCampaignId: String
  currentOnboardingStep: String
  skipUseCaseSelection: Boolean
  linkedSalesforce: String
  linkedHubspot: Boolean
  linkedSalesloft: Boolean
  defaultChromeExtensionLogEmailSendToSalesforce: Boolean
  chromeExtensionAutoMatchSalesforceOpportunity: Boolean
  chromeExtensionGmailEnableEmailTools: Boolean
  enableDesktopNotifications: Boolean
  defaultChromeExtensionEnableReminders: Boolean
  chromeExtensionGmailEnableCrmSidebar: Boolean
  prospectTerritoryIds: [String]
  subteamIds: [String]
  onboardingUseCases: ApolloOnboardingUseCase
  userRoles: [String]
  assistantSetting: ApolloAssistantSetting
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

type AuthlifyToken {
  """The AuthlifyToken ID"""
  id: String!

  """Metadata and logged-in state for all OneGraph services"""
  serviceMetadata: OneGraphServicesMetadata!
}

type DevToArticle implements OneGraphNode {
  id: Int
  title: String
  description: String
  coverImage: String
  readablePublishDate: String
  socialImage: String
  slug: String
  path: String
  url: String
  canonicalUrl: String
  commentsCount: Int
  positiveReactionsCount: Int
  createdAt: String
  editedAt: String
  crosspostedAt: String
  publishedAt: String
  lastCommentAt: String

  """Crossposting or published date time"""
  publishedTimestamp: String
  user: DevToArticleUser
  organization: DevToArticleOrganization
  flareTag: DevToArticleFlareTag

  """The body content as the original markdown"""
  bodyMarkdown: String

  """The body content as the rendered html"""
  bodyHtml: String

  """Keywords this article has been tagged with"""
  tags: [String!]

  """Comments for this article"""
  comments: DevToCommentsConnection
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

type DevToArticleFlareTag {
  name: String

  """Background color (hexadecimal)"""
  bgColorHex: String

  """Text color (hexadecimal)"""
  textColorHex: String
}

type DevToArticleOrganization {
  name: String
  username: String
  slug: String

  """Profile image (640x640)"""
  profileImage: String

  """Profile image (90x90)"""
  profileImage90: String
}

type DevToArticleUser {
  name: String
  username: String
  twitterUsername: String
  githubUsername: String
  websiteUrl: String

  """Profile image (640x640)"""
  profileImage: String

  """Profile image (90x90)"""
  profileImage90: String
}

type DevToComment implements OneGraphNode {
  idCode: String

  """HTML formatted comment"""
  bodyHtml: String
  user: DevToArticleUser
  children: [DevToComment!]
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Comments on DevTo"""
type DevToCommentsConnection {
  """Comments"""
  nodes: [DevToComment!]!

  """A list of edges"""
  edges: [DevToCommentsEdge!]!
}

"""An edge in a connection."""
type DevToCommentsEdge {
  """The item at the end of the edge"""
  node: DevToComment!
}

type DevToListing implements OneGraphNode {
  id: Int
  title: String
  slug: String
  bodyMarkdown: String
  category: DevToListingCategoryEnum
  processedHtml: String
  published: Boolean
  user: DevToArticleUser
  organization: DevToArticleOrganization
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

enum DevToListingCategoryEnum {
  CFP
  FORHIRE
  COLLABS
  EDUCATION
  JOBS
  MENTORS
  PRODUCTS
  MENTEES
  FORSALE
  EVENTS
  MISC
}

"""Articles created by the currently authenticated user"""
type DevToMeArticle implements OneGraphNode {
  id: Int
  title: String
  description: String
  coverImage: String
  published: Boolean
  publishedAt: String
  slug: String
  path: String
  url: String
  canonicalUrl: String
  commentsCount: Int
  positiveReactionsCount: Int
  pageViewsCount: Int

  """Crossposting or published date time"""
  publishedTimestamp: String
  user: DevToArticleUser
  organization: DevToArticleOrganization
  flareTag: DevToArticleFlareTag

  """The body content as the original markdown"""
  bodyMarkdown: String

  """The body content as the rendered html"""
  bodyHtml: String

  """Keywords this article has been tagged with"""
  tags: [String!]
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

type DevToUser implements OneGraphNode {
  id: Int
  username: String
  name: String
  summary: String
  twitterUsername: String
  githubUsername: String
  websiteUrl: String
  location: String

  """Date of joining (formatted with strftime `"%b %e, %Y"`)"""
  joinedAt: String

  """Profile image (320x320)"""
  profileImage: String
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

type DevToWebhook implements OneGraphNode {
  id: Int

  """
  The name of the requester, eg. "DEV"
  """
  source: String
  targetUrl: String

  """An array of events identifiers"""
  events: [String]
  createdAt: String

  """The user who created this webhook"""
  user: DevToArticleUser
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

scalar JSON

"""Represents a JSON object"""
scalar JSONObject

type Mutation {
  oneGraph(
    """
    Instruct OneGraph to use the auth associated with a particular user.
    
    Note that the user must have gone through the OneGraph oauth flow and logged
    in with an account with the userId provided in the auth. If there is no user
    with the account, you may get an auth/auth-missing error.
    
    The userIds for logged-in services can be found under `me.serviceMetadata.loggedInServices.foreignUserId`.
    """
    userIds: OneGraphServiceUserIds

    """Optional OAuth tokens used to execute the query"""
    auths: OneGraphServiceAuths
  ): OneGraphMutation!
  testMutate(query: String!): Boolean!
  signoutServiceUser(input: OneGraphSignoutServiceUserInput!): SignoutServicesResponsePayload!
  signoutServices(data: SignoutServicesData!): SignoutServicesResponsePayload!
}

type MuxVideoAsset implements OneGraphNode {
  id: String
  createdAt: String
  deletedAt: String
  status: String
  duration: Float
  maxStoredResolution: String
  maxStoredFrameRate: Float
  aspectRatio: String
  playbackIds: [MuxVideoPlaybackID!]
  tracks: [MuxVideoTrack!]
  demo: Boolean
  errors: MuxVideoAssetErrors
  perTitleEncode: Boolean
  isLive: Boolean

  """Arbitrary metadata set by you when creating the asset."""
  passthrough: String
  liveStreamId: String
  master: MuxVideoAssetMaster
  masterAccess: MuxVideoAssetMasterAccessEnum
  mp4Support: MuxVideoAssetMp4SupportEnum
  normalizeAudio: Boolean
  staticRenditions: MuxVideoAssetStaticRenditions

  """
  Marks the asset as a test asset when the value is set to true.
  
  A Test asset can help evaluate the Mux Video APIs without incurring any cost.
  There is no limit on number of test assets created. Test asset are:
  - watermarked with the Mux logo
  - limited to 10 seconds
  - deleted after 24 hrs
  
  For more information, see this [blog post](https://mux.com/blog/new-test-mux-video-features-for-free/).
  """
  isTest: Boolean

  """
  A list of the input objects that were used to create the asset along with any settings that were applied to each input.
  """
  inputInfo: [MuxVideoInputInfo!]
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

type MuxVideoAssetErrors {
  type: String
  messages: [String]
}

type MuxVideoAssetMaster {
  status: String
  url: String
}

enum MuxVideoAssetMasterAccessEnum {
  TEMPORARY
  NONE
}

enum MuxVideoAssetMp4SupportEnum {
  STANDARD
  NONE
}

type MuxVideoAssetStaticRenditions {
  """
  * `ready`: All MP4s are downloadable
  * `preparing`: We are preparing the MP4s
  * `disabled`: MP4 support was not requested or has been removed
  * `errored`: There was a Mux internal error that prevented the MP4s from being created
  
  """
  status: MuxVideoAssetStaticRenditionsStatusEnum
  files: [MuxVideoAssetStaticRenditionsFiles!]
}

type MuxVideoAssetStaticRenditionsFiles {
  name: MuxVideoAssetStaticRenditionsFilesNameEnum

  """Extension of the static rendition file"""
  ext: MuxVideoAssetStaticRenditionsFilesExtEnum

  """The height of the static rendition's file in pixels"""
  height: Int

  """The width of the static rendition's file in pixels"""
  width: Int

  """The bitrate in bits per second"""
  bitrate: Int
  filesize: String
}

enum MuxVideoAssetStaticRenditionsFilesExtEnum {
  MP4
}

enum MuxVideoAssetStaticRenditionsFilesNameEnum {
  LOW_MP4
  MEDIUM_MP4
  HIGH_MP4
}

enum MuxVideoAssetStaticRenditionsStatusEnum {
  READY
  PREPARING
  DISABLED
  ERRORED
}

type MuxVideoInputFile {
  containerFormat: String
  tracks: [MuxVideoInputTrack!]
}

type MuxVideoInputInfo implements OneGraphNode {
  settings: MuxVideoInputSettings
  file: MuxVideoInputFile
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

type MuxVideoInputSettings {
  url: String
  overlaySettings: MuxVideoInputSettingsOverlaySettings
  type: MuxVideoInputSettingsTypeEnum
  textType: MuxVideoInputSettingsTextTypeEnum
  languageCode: String
  name: String
  closedCaptions: Boolean

  """Arbitrary metadata set by you when creating the asset."""
  passthrough: String
}

type MuxVideoInputSettingsOverlaySettings {
  verticalAlign: MuxVideoInputSettingsOverlaySettingsVerticalAlignEnum
  verticalMargin: String
  horizontalAlign: MuxVideoInputSettingsOverlaySettingsHorizontalAlignEnum
  horizontalMargin: String
  width: String
  height: String
  opacity: String
}

enum MuxVideoInputSettingsOverlaySettingsHorizontalAlignEnum {
  LEFT
  CENTER
  RIGHT
}

enum MuxVideoInputSettingsOverlaySettingsVerticalAlignEnum {
  TOP
  MIDDLE
  BOTTOM
}

enum MuxVideoInputSettingsTextTypeEnum {
  SUBTITLES
}

enum MuxVideoInputSettingsTypeEnum {
  VIDEO
  AUDIO
  TEXT
}

type MuxVideoInputTrack {
  type: String
  duration: Float
  encoding: String
  width: Int
  height: Int
  frameRate: Float
  sampleRate: Int
  sampleSize: Int
  channels: Int
}

type MuxVideoLiveStream implements OneGraphNode {
  id: String
  createdAt: String
  streamKey: String
  activeAssetId: String
  recentAssetIds: [String]
  status: String
  playbackIds: [MuxVideoPlaybackID!]

  """The settings to be used for Assets created during a broadcast"""
  newAssetSettings: MuxVideoAsset

  """Arbitrary metadata set by you when creating the asset."""
  passthrough: String
  reconnectWindow: Float
  reducedLatency: Boolean
  simulcastTargets: [MuxVideoSimulcastTarget!]
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

type MuxVideoPlaybackID {
  id: String
  policy: MuxVideoPlaybackPolicyEnum

  """
  The Image URL API allows you to pull images from a Mux Video asset in real
  time. Any frame of an asset is available as a PNG or JPG image, to use as a
  thumbnail or poster image.
  """
  thumbnail(
    """
    How to fit a thumbnail within width + height. Valid values are preserve,
    stretch, crop, smartcrop, and pad. See below for details.
    
                                         preserve: By default, Mux will preserve
    the aspect ratio of the video, while fitting the image within the requested
    width and height. For example if the thumbnail width is 100, the height is
    100, and the video's aspect ratio is 16:9, the delivered image will be 100x56 (16:9).
    
                                         stretch: The thumbnail will exactly fill
    the requested width and height, even if it distorts the image. Requires both
    width and height to be set.
                                         (Not very popular.)
    
                                         crop: The video image will be scaled up
    or down until it fills the requested width and height box. Pixels then
    outside of the box will be cropped off. The crop is always centered on the
    image. Requires both width and height to be set.
    
                                         smartcrop: An algorithm will attempt to
    find an area of interest in the image and center it within the crop, while
    fitting the requested width and height. Requires both width and height to be set.
    
                                         pad: Similar to preserve but Mux will
    "letterbox" or "pillarbox" (add black padding to) the image to make it fit
    the requested width and height exactly. This is less efficient than preserve
    but allows for maintaining the aspect ratio while always getting thumbnails
    of the same size. Requires both width and height to be set.
    """
    fitMode: MuxVideoThumbnailImageFitModeEnumArg

    """Flip the image left-right after performing all other transformations."""
    flipH: Boolean

    """Flip the image top-bottom after performing all other transformations."""
    flipV: Boolean

    """
    Rotate the image clockwise by the given number of degrees. Valid values are 90, 180, and 270.
    """
    rotate: Int

    """
    The height in pixels of the thumbnail (in pixels). Defaults to the height of the original video.
    """
    height: Int

    """
    The width in pixels of the thumbnail (in pixels). Defaults to the width of the original video.
    """
    width: Int

    """
    The time (in seconds) of the video timeline where the image should be
    pulled. Defaults to a frame selected from the middle of the video (this
    default may change at any time).
    """
    time: Float
    extension: MuxVideoThumbnailImageExtensionEnumArg!
  ): String

  """
  The Image URL API allows you to generate short animated GIFs from a video.
  """
  animatedGif(
    """The frame rate of the generated gif. Defaults to 15 fps. Max 30 fps."""
    fps: Int

    """
    The height in pixels of the animated gif. The default height is determined
    by preserving aspect ratio with the width provided. Maximum height is 640px.
    """
    height: Int

    """
    The width in pixels of the animated gif. Default is 320px, or if height is
    provided, the width is determined by preserving aspect ratio with the
    height. Max width is 640px.
    """
    width: Int

    """
    The time (in seconds) of the video timeline where the gif ends. Defaults to
    5 seconds after the `start`. Maximum total duration of gif is limited to 10
    seconds; minimum total duration of gif is 250ms.
    """
    end: Float = 5

    """
    The time (in seconds) of the video timeline where the animated gif should begin. Defaults to 0.
    """
    start: Float = 0
  ): String

  """
  To play a video, create a playback URL including a [Playback
  ID](https://docs.mux.com/reference-link/playback-ids) for the
  [asset](https://docs.mux.com/reference-link/assets) you want to play.
  """
  playbackUrl(
    """
    A streaming format. Currently, Mux Video only supports HTTP Live Streaming
    video (m3u8), but support for other formats (like MPEG-DASH) are in development.
    """
    ext: MuxVideoPlaybackUrlExtensionEnumArg = M_3U_8
  ): String
}

enum MuxVideoPlaybackPolicyEnum {
  PUBLIC
  SIGNED
}

enum MuxVideoPlaybackUrlExtensionEnumArg {
  M_3U_8
}

type MuxVideoSigningKey implements OneGraphNode {
  id: String
  createdAt: String
  privateKey: String
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

type MuxVideoSimulcastTarget {
  """ID of the Simulcast Target"""
  id: String

  """Arbitrary metadata set by you when creating the asset."""
  passthrough: String

  """
  The current status of the simulcast target. See Statuses below for detailed description.
    * `idle`: Default status. When the parent live stream is in disconnected status, simulcast targets will be idle state.
    * `starting`: The simulcast target transitions into this state when the
  parent live stream transition into connected state.
    * `broadcasting`: The simulcast target has successfully connected to the
  third party live streaming service and is pushing video to that service.
    * `errored`: The simulcast target encountered an error either while
  attempting to connect to the third party live streaming service, or
  mid-broadcasting. Compared to other errored statuses in the Mux Video API, a
  simulcast may transition back into the broadcasting state if a connection with
  the service can be re-established.
  
  """
  status: MuxVideoSimulcastTargetStatusEnum

  """
  Stream Key represents an stream identifier for the third party live streaming
  service to simulcast the parent live stream too.
  """
  streamKey: String

  """
  RTMP hostname including the application name for the third party live streaming service.
  """
  url: String
}

enum MuxVideoSimulcastTargetStatusEnum {
  IDLE
  STARTING
  BROADCASTING
  ERRORED
}

enum MuxVideoThumbnailImageExtensionEnumArg {
  JPG
  PNG
}

enum MuxVideoThumbnailImageFitModeEnumArg {
  PRESERVE
  STRETCH
  CROP
  SMARTCROP
  PAD
}

type MuxVideoTrack {
  id: String
  type: MuxVideoTrackTypeEnum
  duration: Float
  maxWidth: Int
  maxHeight: Int
  maxFrameRate: Float
  maxChannels: Int
  maxChannelLayout: String
  textType: MuxVideoTrackTextTypeEnum
  languageCode: String
  name: String
  closedCaptions: Boolean

  """Arbitrary metadata set by you when creating the asset."""
  passthrough: String
}

enum MuxVideoTrackTextTypeEnum {
  SUBTITLES
}

enum MuxVideoTrackTypeEnum {
  VIDEO
  AUDIO
  TEXT
}

type MuxVideoUpload implements OneGraphNode {
  id: String

  """
  Max time in seconds for the signed upload URL to be valid. If a successful
  upload has not occurred before the timeout limit, the direct upload is marked `timed_out`
  """
  timeout: Int
  status: MuxVideoUploadStatusEnum

  """The settings to be used for Assets created during a broadcast"""
  newAssetSettings: MuxVideoAsset

  """Only set once the upload is in the `asset_created` state."""
  assetId: String

  """Only set if an error occurred during asset creation."""
  error: MuxVideoUploadError

  """
  If the upload URL will be used in a browser, you must specify the origin in
  order for the signed URL to have the correct CORS headers.
  """
  corsOrigin: String

  """The URL to upload the associated source media to."""
  url: String
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

type MuxVideoUploadError {
  type: String
  message: String
}

enum MuxVideoUploadStatusEnum {
  WAITING
  ASSET_CREATED
  ERRORED
  CANCELLED
  TIMED_OUT
}

type MuxVideoVideoView implements OneGraphNode {
  viewTotalUpscaling: String
  prerollAdAssetHostname: String
  playerSourceDomain: String
  region: String
  viewerUserAgent: String
  prerollRequested: Boolean
  pageType: String
  startupScore: String
  viewSeekDuration: String
  countryName: String
  playerSourceHeight: Int
  longitude: String
  bufferingCount: String
  videoDuration: String
  playerSourceType: String
  city: String
  viewId: String
  platformDescription: String
  videoStartupPrerollRequestTime: String
  viewerDeviceName: String
  videoSeries: String
  viewerApplicationName: String
  updatedAt: String
  viewTotalContentPlaybackTime: String
  cdn: String
  playerInstanceId: String
  videoLanguage: String
  playerSourceWidth: Int
  playerErrorMessage: String
  playerMuxPluginVersion: String
  watched: Boolean
  playbackScore: String
  pageUrl: String
  metro: String
  viewMaxRequestLatency: String
  requestsForFirstPreroll: String
  viewTotalDownscaling: String
  latitude: String
  playerSourceHostName: String
  insertedAt: String
  viewEnd: String
  muxEmbedVersion: String
  playerLanguage: String
  pageLoadTime: Int
  viewerDeviceCategory: String
  videoStartupPrerollLoadTime: String
  playerVersion: String
  watchTime: Int
  playerSourceStreamType: String
  prerollAdTagHostname: String
  viewerDeviceManufacturer: String
  rebufferingScore: String
  experimentName: String
  viewerOsVersion: String
  playerPreload: Boolean
  bufferingDuration: String
  playerViewCount: Int
  playerSoftware: String
  playerLoadTime: String
  platformSummary: String
  videoEncodingVariant: String
  playerWidth: Int
  viewSeekCount: String
  viewerExperienceScore: String
  viewErrorId: Int
  videoVariantName: String
  prerollPlayed: Boolean
  viewerApplicationEngine: String
  viewerOsArchitecture: String
  playerErrorCode: String
  bufferingRate: String
  events: [MuxVideoVideoViewEvent!]
  playerName: String
  viewStart: String
  viewAverageRequestThroughput: String
  videoProducer: String
  errorTypeId: Int
  muxViewerId: String
  videoId: String
  continentCode: String
  sessionId: String
  exitBeforeVideoStart: Boolean
  videoContentType: String
  viewerOsFamily: String
  playerPoster: String
  viewAverageRequestLatency: String
  videoVariantId: String
  playerSourceDuration: Int
  playerSourceUrl: String
  muxApiVersion: String
  videoTitle: String
  id: String
  shortTime: String
  rebufferPercentage: String
  timeToFirstFrame: String
  viewerUserId: String
  videoStreamType: String
  playerStartupTime: Int
  viewerApplicationVersion: String
  viewMaxDownscalePercentage: String
  viewMaxUpscalePercentage: String
  countryCode: String
  usedFullscreen: Boolean
  isp: String
  propertyId: Int
  playerAutoplay: Boolean
  playerHeight: Int
  asn: Int
  qualityScore: String
  playerSoftwareVersion: String
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

type MuxVideoVideoViewEvent {
  viewerTime: Int
  playbackTime: Int
  name: String
  eventTime: Int
}

"""A OneGraph Access Token"""
type OneGraphAccessToken {
  """Bearer token"""
  token: String!

  """
  Time that the the token expires, measured in seconds since the Unix epoch
  """
  expireDate: Int!

  """Token name, if it is a personal access token"""
  name: String

  """AppId that the token belongs to"""
  appId: String!

  """User auths for the access token"""
  userAuths: [OneGraphUserAuth!]!

  """
  The anchor is like two-factor auth for the token. It ensures that the person
  who adds auth to the token is the same as the person who created the token.
  """
  anchor: OneGraphAccessTokenAnchorEnum

  """Netlify-specific ID for the token"""
  netlifyId: String
}

"""
The anchor is like two-factor auth for the token. It ensures that the person who
adds auth to the token is the same as the person who created the token.
"""
enum OneGraphAccessTokenAnchorEnum {
  """
  Use the logged in OneGraph user. The user must be logged in to the OneGraph dashboard to use this option.
  """
  ONEGRAPH_USER

  """
  Use the logged in Netlify user. The token must have an active Netlify auth to use this option.
  """
  NETLIFY_USER

  """Use the provided Netlify site."""
  NETLIFY_SITE
}

input OneGraphAckNetlifyCliEventsInput {
  eventIds: [String!]!
  sessionId: String!
}

type OneGraphAckNetlifyCliEventsResponsePayload {
  """The list of events that were acknowledged"""
  events: [OneGraphNetlifyCliSessionEvent!]!
}

input OneGraphAddAuthsToPersonalTokenInput {
  authlifyTokenId: String

  """
  Auths to establish the anchor. Note that these auths won't be added to the personal token.
  """
  anchorAuth: OneGraphServiceAuths
  appId: String!

  """
  Token that will be destroyed and have its auths moved to the personal token.
  """
  sacrificialToken: String!
  personalToken: String
}

type OneGraphAddAuthsToPersonalTokenResponsePayload {
  """Personal access token that was updated by this mutation"""
  accessToken: OneGraphAccessToken!

  """Authlify token that was updated by this mutation"""
  authlifyToken: AuthlifyToken

  """OneGraph user"""
  oneUser: OneGraphUser
}

input OneGraphAddCORSOriginToAppInput {
  corsOrigin: String!
  appId: String!
}

type OneGraphAddCORSOriginToAppResponsePayload {
  app: OneGraphApp!
}

input OneGraphAddExternalGraphQLSchemaInput {
  """
  GraphQL field identifying the service to associate with the schema. Mutually exclusive with `service`
  """
  graphqlField: String

  """
  Service to associate with the schema. Mutually exclusive with `graphqlField`
  """
  service: OneGraphSupportedExternalGraphQLService

  """Endpoint to make GraphQL queries against."""
  endpoint: String!

  """App to add the external schema to."""
  appId: String!
}

type OneGraphAddExternalGraphQLSchemaPayload {
  """App that the external schema was added to."""
  app: OneGraphApp

  """The external schema that was added."""
  externalGraphQLSchema: OneGraphExternalGraphQLSchema!
}

input OneGraphAddExternalHoneycombConfigDatasetInput {
  """
  The name of the dataset that the events will be pushed to in Honeycomb.
  """
  datasetName: String!
  metricType: OneGraphExternalHoneycombConfigDatasetMetricTypeEnum!
}

input OneGraphAddExternalHoneycombConfigInput {
  """Metrics to subscribe to, with preferred dataset name."""
  datasets: [OneGraphAddExternalHoneycombConfigDatasetInput!]!

  """Honeycomb token with the ability to create datasets and send events."""
  token: String!

  """App to add the honeycomb config to."""
  appId: String!
}

type OneGraphAddExternalHoneycombConfigPayload {
  """App that the Honeycomb config was added to."""
  app: OneGraphApp

  """The Honeycomb config that was added."""
  externalHoneycombConfig: OneGraphExternalHoneycombConfig!
}

input OneGraphAddGoogleSiteVerificationInput {
  """The body that Google will expect at the endpoint"""
  body: String!

  """The path that Google will crawl to check the site verification"""
  path: String!

  """App to add the external schema to."""
  appId: String!
}

type OneGraphAddGoogleSiteVerificationPayload {
  """App that the external schema was added to."""
  app: OneGraphApp

  """The google site verification that was added."""
  googleSiteVerification: OneGraphGoogleSiteVerification!
}

input OneGraphAddNetlifySiteToAppCORSOriginsInput {
  netlifySite: String!
  appId: String!
}

type OneGraphAddNetlifySiteToAppCORSOriginsResponsePayload {
  app: OneGraphApp!
}

type OneGraphAddPreviewSalesforceSchemaForSalesforceViewerPayload {
  """The salesforce schema that was created."""
  salesforceSchema: OneGraphSalesforceSchema!
}

input OneGraphAddPreviewSalesforceSchemaInput {
  """App to add the preview salesforce schema to."""
  appId: String!
}

type OneGraphAddPreviewSalesforceSchemaPayload {
  """App that the salesforce schema was added to."""
  app: OneGraphApp

  """The preview salesforce schema that was added."""
  salesforceSchema: OneGraphSalesforceSchema!

  """The GraphQL schema for the app after the preview schema is applied."""
  previewSchema: JSON! @deprecated(reason: "Use `createGraphQLSchema`, then fetch the new schema with a http call to `/schema?schema_id={schemaId}`")

  """The current GraphQL schema for the app."""
  currentSchema: JSON! @deprecated(reason: "Use a http call to `/schema`")
}

type OneGraphAddSalesforceSchemaForSalesforceViewerPayload {
  """The salesforce schema that was created."""
  salesforceSchema: OneGraphSalesforceSchema!
}

input OneGraphAddSalesforceSchemaInput {
  """App to add the salesforce schema to."""
  appId: String!
}

type OneGraphAddSalesforceSchemaPayload {
  """App that the salesforce schema was added to."""
  app: OneGraphApp

  """The salesforce schema that was added."""
  salesforceSchema: OneGraphSalesforceSchema!
}

input OneGraphAddSlackEventWebhookInput {
  """Slack app-level token with the authorizations:read scope."""
  appToken: String!

  """Slack event subscription webhook signing secret."""
  signingSecret: String!

  """Unique id for the app's Slack custom OAuth credentials."""
  serviceAuthId: String!

  """App to add the slack event webhook to."""
  appId: String!
}

type OneGraphAddSlackEventWebhookPayload {
  """App that the slack event webhook was added to."""
  app: OneGraphApp

  """The slack event webhook that was added."""
  slackEventWebhook: OneGraphSlackEventWebhook!

  """Custom OAuth client that the slack event webhook was added to."""
  serviceAuth: OneGraphServiceAuth!
}

"""Custom OAuth client for Adroll"""
type OneGraphAdrollServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String! @deprecated(reason: "Use `serviceInfo` instead.")

  """
  The service information for the service that the clientId and clientSecret belong to
  """
  serviceInfo: OneGraphServiceInfo!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""Scope"""
enum OneGraphApiTokenScopeEnum {
  MODIFY_SCHEMA
  PERSIST_QUERY
}

input OneGraphApolloAuthArg {
  """
  For use with a API key. To generate an api key, see the [Account
  Settings](https://app.apollo.love/user/edit) in your Apollo dashboard.
  """
  apiKey: String!
}

"""A OneGraph App"""
type OneGraphApp {
  """The id of the OneGraph App"""
  id: String!

  """The description of the OneGraph App"""
  description: String!

  """The subdomain of the OneGraph App"""
  subdomain: String!

  """The name of the OneGraph App"""
  name: String!

  """The origins allowed for this OneGraph App from CORS requests"""
  corsOrigins: [String!]!

  """The id of the OneGraph organization that this app belongs to"""
  orgId: String!

  """The OneGraph organization that this app belongs to"""
  org: OneGraphOrg

  """The queries belonging to this OneGraph app"""
  queries: [OneGraphQuery!]!

  """
  The custom clientId/clientSecret that have been set for services (e.g. Gmail and Slack) that belong to this OneGraph app
  """
  serviceAuths: [OneGraphServiceAuth!]!

  """Subscriptions created with this app"""
  subscriptions(
    """
    Fiter by the Subscription's Salesforce organization Id, if the subscription is to a change in Salesforce..
    """
    salesforceOrganizationId: String

    """
    Fiter by the Subscription's webhook url, if the destination is a webhook.
    """
    webhookUrl: String

    """Fiter by status of the subscription"""
    status: OneGraphAppSubscriptionsStatusEnumArg

    """Fetch items in the list after the specified cursor"""
    after: String

    """How many subsriptions to fetch"""
    first: Int = 25
  ): OneGraphAppSubscriptionsConnection!

  """The JWT settings for this app"""
  jwtSettings: OneGraphAppJwtSettings!

  """Activity related to this app"""
  auditLogs(
    """
    How many log items to pull from the front of the collection, maximum of `250`
    """
    first: Int = 10
  ): OneGraphAppLogConnection!

  """
  Sites on Netlify associated with this app. OneGraph will allow CORS and
  authentication redirects to all previews, branch, and production deploys of these sites.
  """
  netlifySiteNames: [String!]!

  """Custom cors origins"""
  customCorsOrigins: [OneGraphCustomCorsOrigin!]!

  """List of persisted queries for this app"""
  persistedQueries(
    """Only return persisted queries that have all of the provided tags."""
    tags: [String!]

    """Returns results after the provided cursor."""
    after: String

    """How many persisted queries to return. Defaults to 10, max 100."""
    first: Int = 10
  ): OneGraphPersistedQueryConnection!

  """List of services for this app"""
  services(filter: OneGraphServiceInfoFilter): [OneGraphServiceInfo!]!

  """GitHub repos for the app that can have subscriptions on OneGraph."""
  gitHubRepositorySubscriptionDelegates: OneGraphGithubRepositorySubscriptionDelegateConnection!

  """The Slack channel for AuthGuardian to post into upon user sign-in"""
  authGuardianSlackChannel: String

  """Whether the AuthGuardian Slack integration is enabled"""
  authGuardianSlackIntegrationEnabled: Boolean!

  """External GraphQL schemas for the app."""
  externalGraphQLSchemas: OneGraphExternalGraphQLSchemaConnection! @deprecated(reason: "use graphQLSchema.externalGraphQLSchemas")

  """Custom Salesforce schema on the app's default graphQLSchema."""
  salesforceSchema: OneGraphSalesforceSchema @deprecated(reason: "use graphQLSchema.salesforceSchema")

  """
  The domain that must be authorized to receive push notifications from Google for Google Calendar subscriptions.
  """
  googleAuthorizedDomain: String!

  """Google Site Verification for the app"""
  googleSiteVerification: OneGraphGoogleSiteVerification

  """External Honeycomb config for the app"""
  externalHoneycombConfig: OneGraphExternalHoneycombConfig

  """Customizations to the default GraphQL schema"""
  graphQLSchema: OneGraphGraphQLSchema
}

type OneGraphAppAuthCompletedLog implements OneGraphAppLog {
  """
  Noted whenever an end-user has completed a login for a service when using this app
  """
  service: String!
  friendlyName: String!

  """The user id according to the service they logged into"""
  serviceUserId: String

  """The id of the log"""
  id: String!

  """The time of the log, encoded as rfc3339"""
  createdAt: String!

  """JSON data encoded as a string for this specific event"""
  jsonData(pretty: Boolean = false): String!
}

"""The method of generating JWTs"""
enum OneGraphAppJwtGenerationMethodEnum {
  MANUAL
  AUTH_BUILDER
}

"""An RSA public key used for signing JWTs"""
type OneGraphAppJwtRsaPublicKey {
  """The algorithm associated with this public key"""
  algorithm: String!

  """The n of the rsa key"""
  n: String!

  """The exponent of the rsa key"""
  e: String!
}

"""JWT settings for the app, useful for SSO."""
type OneGraphAppJwtSettings {
  """A query to run on every user log in to use in generating the JWT token"""
  jwtPreflightQuery: String

  """
  An optional webhook to use for generating the full JWT. Use this and
  `jwtPreflightQuery` to customize claims. Very useful when used alongside e.g.
  Hasura or PostGraphile
  """
  jwtWebhookUrl: String

  """
  Whether this app is generating JWTs on login via a manual query/webhook combination, or using OneGraph's AuthGuardian
  """
  jwtGenerationMethod: OneGraphAppJwtGenerationMethodEnum!

  """
  The rules this app is configured to use when generating JWTs on user login
  """
  jwtAuthGuardianRules: JSON

  """The current key used to sign JWTs generated for this app"""
  activeKey: OneGraphJwtSigningKey

  """List of the public keys for an app"""
  publicKeys: [OneGraphAppJwtRsaPublicKey!]

  """The full JWT configuration for Hasura"""
  hasuraConfig: String

  """
  The public well-known JWK url of where to look for public keys when verifying JWT for this app
  """
  jwksUrl: String!
}

interface OneGraphAppLog {
  id: String!
  createdAt: String!
  friendlyName: String!
  jsonData(pretty: Boolean = false): String
}

type OneGraphAppLogConnection {
  """Applogs"""
  nodes: [OneGraphAppLog!]!
}

type OneGraphAppLogJwtWebhookFailed implements OneGraphAppLog {
  """
  The destination webhook where we tried to deliver the JWT for preprocessing when it failed
  """
  destination: String!

  """The numeric HTTP status code we received from the webhook (if any)"""
  responseStatusCode: Int

  """The textual responseBody we received from the webhook (if any)"""
  responseBody: String
  friendlyName: String!

  """The id of the log"""
  id: String!

  """The time of the log, encoded as rfc3339"""
  createdAt: String!

  """JSON data encoded as a string for this specific event"""
  jsonData(pretty: Boolean = false): String!
}

"""The style for the logo svg."""
enum OneGraphAppLogoStyleEnum {
  DEFAULT
  ROUNDED_RECTANGLE
}

type OneGraphAppLogSubscriptionDeliveryFailed implements OneGraphAppLog {
  """The subscription for the failed delivery attempt"""
  subscription: OneGraphAppSubscription

  """The attempt number for delivering this subscription payload"""
  attempt: Int!
  friendlyName: String!

  """The id of the log"""
  id: String!

  """The time of the log, encoded as rfc3339"""
  createdAt: String!

  """JSON data encoded as a string for this specific event"""
  jsonData(pretty: Boolean = false): String!
}

"""Mutations related to apps"""
type OneGraphAppMutations {
  setCORSOrigins(corsOrigins: [String!]!): OneGraphApp!
  setJwtPreflightQueryAndWebhookUrl(input: OneGraphSetJwtPreflightQueryAndWebhookUrlInput!): OneGraphSetAppJwtPreflightQueryResponsePayload
  setJwtSigningAlgorithmAndSecret(input: OneGraphSetJwtSigningAlgorithmAndSecretInput!): OneGraphSetJwtSigningAlgorithmAndSecretPayload
  setAuthGuardianActive(input: OneGraphSetAuthGuardianActiveInput!): OneGraphSetAuthGuardianActiveResponsePayload
  setAuthGuardian(input: OneGraphSetAuthGuardianInput!): OneGraphSetAuthGuardianResponsePayload
  setNetlifySiteNames(input: OneGraphSetAppNetlifySiteNamesInput!): OneGraphSetAppNetlifySiteNamesResponsePayload!

  """
  Use this when you need to generate a JWT (JSON web token) with a valid
  signature based on the JWT algorithm settings for your app. For example, you
  might want to test out a token within the Hasura console, on your Netlify
  site, or against your own GraphQL server without going through a full auth flow manually.
  
  By default these tokens will only be valid for 5 minutes (300 seconds).
  
  Note that these tokens will be signed and valid, and will be accepted
  *anywhere* you have configured. **Treat them as secure tokens and guard them!**
  """
  dangerouslySignJwtPayload(input: OneGraphDangerouslySignJwtPayloadInput!): OneGraphDangerouslySignJwtPayloadResponsePayload
}

"""Subscription created by the app"""
type OneGraphAppSubscription {
  """Unique id for the subscription."""
  id: String!

  """Status of the subscription."""
  status: String!

  """Query that the subscription run."""
  query: String!

  """
  If this is a subscription to Gmail, contains extra information about the Gmail subscription
  """
  gmailWatch: OneGraphGmailWatch

  """
  If this is a subscription to Salesforce, contains extra information about the Salesforce subscription
  """
  salesforceInfo: OneGraphSalesforceSubscriptionInfo

  """Destination for the subscription payloads"""
  destination: OneGraphAppSubscriptionDestination!

  """Reason why this subscription can't be updated if it can't be updated."""
  updatesUnsupportedReason: String

  """The variables that this query was saved with."""
  requestVariables: JSON

  """
  The time that this subscription was created, in rfc3339 format e.g. `2021-03-24T23:35:03-00:00`
  """
  createdAt: String!

  """
  Whether this subscription retains payloads. Payloads are available through the `payload` field on the subscription.
  """
  retainPayloads: Boolean!

  """
  Latest payloads for a subscription, if the subscription was created with `retainPayloads` set to true.
  """
  payloads(
    """Number of payloads to fetch. Defaults to 20, maximum is 100."""
    first: Int = 20
  ): OneGraphAppSubscriptionPayloadsConnection
}

union OneGraphAppSubscriptionDestination = OneGraphAppSubscriptionRetainedOnlyDestination | OneGraphAppSubscriptionWebsocketDestination | OneGraphAppSubscriptionWebhookDestination

"""Payload for a subscription created by the app"""
type OneGraphAppSubscriptionPayload {
  """Unique id for the payload."""
  id: String!

  """
  Body of the payload or null if the payload is expired. This is the full body
  of the GraphQL payload, including the `data`, `errors`, and `extensions`
  fields as JSON.
  """
  body: JSON!

  """
  `true` if the payload body has been deleted. Payload bodies will expire after 1 year.
  """
  isExpired: Boolean!

  """
  The time that this payload was created, in rfc3339 format e.g. `2021-03-24T23:35:03-00:00`
  """
  createdAt: String!

  """
  The delivery status of a subscription, if the subscription has a destination.
  """
  deliveryStatus: OneGraphAppSubscriptionPayloadDeliveryStatus!

  """The number of times we attempted to deliver the payload."""
  deliveryAttempts: Int!

  """
  The last time we attempted to deliver the payload, in rfc3339 format e.g. `2021-03-24T23:35:03-00:00`
  """
  lastDeliveryAttempt: String

  """
  The status code we received from the webhook destination the last time we
  attempted to deliver the payload. This field will be null for Websocket and
  Retain-only subscriptions.
  """
  lastStatusCode: Int

  """
  If there was an error delivering the payload to a webhook destination, this
  field will contain the first 512 bytes of the response we receieved from the server.
  """
  lastError: String

  """
  The id of the event associated with this payload. The eventId can be used to
  retry the subscription with the `oneGraph.retrySubscriptionEvent` mutation.
  """
  eventId: String
}

enum OneGraphAppSubscriptionPayloadDeliveryStatus {
  WAITING
  DELIVERING
  DELIVERED
  FAILED
}

"""Payloads for a subscription"""
type OneGraphAppSubscriptionPayloadsConnection {
  """List of subscription payloads"""
  nodes: [OneGraphAppSubscriptionPayload!]!
}

"""
Destination for a OneGraph subscription that is only retained and not delivered.
"""
type OneGraphAppSubscriptionRetainedOnlyDestination {
  retainedOnly: Boolean!
}

"""
Subscriptions created by the app, with extra information about pagination.
"""
type OneGraphAppSubscriptionsConnection {
  """Pagination information."""
  pageInfo: PageInfo!

  """List of subscriptions created by the app."""
  nodes: [OneGraphAppSubscription!]!
}

"""Status of the subscription"""
enum OneGraphAppSubscriptionsStatusEnumArg {
  ACTIVE
  INACTIVE
}

"""Webhook destination for a OneGraph subscription"""
type OneGraphAppSubscriptionWebhookDestination {
  """Url that the webhook will deliver payloads to."""
  url: String!
}

"""Websocket destination for a OneGraph subscription"""
type OneGraphAppSubscriptionWebsocketDestination {
  """The client-side id for the subscription."""
  clientId: String!
}

"""Custom OAuth client for Asana"""
type OneGraphAsanaServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String! @deprecated(reason: "Use `serviceInfo` instead.")

  """
  The service information for the service that the clientId and clientSecret belong to
  """
  serviceInfo: OneGraphServiceInfo!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""
Commonly used values for use in JWT generation, like GitHub email address or the current time.
"""
enum OneGraphAuthGuardianBuiltInValue {
  CONTENTFUL_AVATAR_URL
  CONTENTFUL_USER_ID
  CONTENTFUL_EMAIL
  EGGHEADIO_AVATAR_URL
  EGGHEADIO_USER_ID
  EGGHEADIO_EMAIL
  EGGHEADIO_IS_PRO
  EGGHEADIO_IS_INSTRUCTOR
  EGGHEADIO_IS_COMMUNITY_MEMBER
  GITHUB_AVATAR_URL
  GITHUB_EMAIL
  GITHUB_LOGIN
  GITHUB_NAME
  GITHUB_USER_ID
  GITHUB_FULL_EMAILS
  GMAIL_EMAIL
  GMAIL_EMAIL_VERIFIED
  GMAIL_USER_ID
  LOGGED_IN_SERVICES
  NETLIFY_AVATAR_URL
  NETLIFY_EMAIL
  NETLIFY_FULL_NAME
  NETLIFY_USER_ID
  NOW_SECONDS
  NOW_MILLISECONDS
  NOW_TIMESTAMP
  SALESFORCE_EMAIL
  SALESFORCE_USER_ID
  SPOTIFY_EMAIL
  SPOTIFY_USER_ID
  STRIPE_ACCOUNT_ID
  STRIPE_ACCOUNT_PRIMARY_EMAIL
  TWITCH_TV_EMAIL
  TWITCH_TV_DISPLAY_NAME
  TWITCH_TV_LOGO_URL
  TWITCH_TV_USER_ID
  TWITTER_IS_VERIFIED
  TWITTER_EMAIL
  TWITTER_NAME
  TWITTER_PROFILE_IMAGE_URL
  TWITTER_SCREEN_NAME
  TWITTER_USER_ID
  VERCEL_AVATAR_URL
  VERCEL_EMAIL
  VERCEL_NAME
  VERCEL_USER_ID
}

"""Custom OAuth client for Box"""
type OneGraphBoxServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String! @deprecated(reason: "Use `serviceInfo` instead.")

  """
  The service information for the service that the clientId and clientSecret belong to
  """
  serviceInfo: OneGraphServiceInfo!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

input OneGraphChagebeeAuthArg {
  """
  A [Chargebee API key](https://www.chargebee.com/docs/2.0/api_keys.html). To
  create a key go to **Settings** > **Configure Chargebee** > **API Keys and
  Webhooks** and then click on the **API Keys** tab.
  """
  apiKey: String!

  """
  The [chargebee site](https://www.chargebee.com/docs/2.0/sites-intro.html). 
  """
  site: String!
}

input OneGraphCliSessionGraphQLSchemaInput {
  """
  Whether to set this schema as the default for the app. Defaults to false.
  """
  setAsDefaultForApp: Boolean = false

  """External GraphQL schemas to add"""
  externalGraphQLSchemas: [OneGraphGraphQLSchemaExternalGraphQLSchemaInput!]

  """Optional id of a Salesforce schema to attach to the GraphQL schema."""
  salesforceSchemaId: String

  """The optional id of the GraphQL schema that this was derived from."""
  parentId: String

  """
  The list of services that this schema should use. Leave blank if you want to add support for all supported services.
  """
  enabledServices: [OneGraphServiceEnumArg!]

  """
  The list of GraphQL fields identifying services that this schema should use.
  Leave blank if you want to add support for all supported services. Note that
  this field won't be merged with `enabledServices`, which takes an enum and is deprecated.
  """
  graphQLFieldForEnabledServices: [String!]
}

input OneGraphCliSessionPersistedDocumentInput {
  """
  The parent persisted query. It can be used to track lineage of the query.
  """
  parent: OneGraphCreatePersistedQueryParentInput

  """
  A description for the persisted query. Maximum length is 2096 characters.
  """
  description: String

  """
  List of tags to add to the persisted query. Tags are free-form text that can
  be used to categorize persisted queries. Each tag must be under 256 characters
  and there can be a maximum of 10 tags on a single persisted query.
  """
  tags: [String!]
  accessToken: String

  """
  If set to true, and there was a successful execution of the query in the last
  30 days, then the last successful result will be returned if we encounter any
  error when executing the query. If we do not have a previous successful
  result, then the response with the error will be returned.
  
                           Note that the fallback result will be returned even in the case of partial success.
  
                           This parameter is useful when you expect that your
  queries might be rate-limited by the underlying service.
  
                           The query must provide a cache strategy in order to use `fallbackOnError`.
  """
  fallbackOnError: Boolean
  cacheStrategy: OneGraphPersistedQueryCacheStrategyArg

  """
  Operation names to allow. If not provided, then all operations in the document are allowed.
  """
  allowedOperationNames: [String!]
  fixedVariables: JSON
  freeVariables: [String!]
  query: String!
}

input OneGraphCloudflareUserAuthArg {
  key: String!
  email: String!
}

"""Custom OAuth client for Cloudinary"""
type OneGraphCloudinaryServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String! @deprecated(reason: "Use `serviceInfo` instead.")

  """
  The service information for the service that the clientId and clientSecret belong to
  """
  serviceInfo: OneGraphServiceInfo!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

input OneGraphCompleteTourData {
  tour: OneGraphTourEnum!
}

type OneGraphCompleteTourResponsePayload {
  me: Viewer!
}

"""Custom OAuth client for Contentful"""
type OneGraphContentfulServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String! @deprecated(reason: "Use `serviceInfo` instead.")

  """
  The service information for the service that the clientId and clientSecret belong to
  """
  serviceInfo: OneGraphServiceInfo!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

type OneGraphCreateApiTokenResponsePayload {
  """The access token that was created"""
  accessToken: OneGraphAccessToken!
}

input OneGraphCreateApiTokenTokenInput {
  scopes: [OneGraphApiTokenScopeEnum!]!

  """Id for the app that you will be accessible through the token."""
  appId: String!
}

input OneGraphCreateEmptyAccessTokenInput {
  """
  Number of seconds until the token should expire. Providing a value that is
  over two weeks of seconds will cause the request to be rejected
  """
  expiresIn: Int = 1209600
}

type OneGraphCreateEmptyAccessTokenPayload {
  """Access token that was created by this mutation"""
  accessToken: OneGraphAccessToken!
}

input OneGraphCreateGraphQLSchemaInput {
  """
  Whether to set this schema as the default for the app. Defaults to false.
  """
  setAsDefaultForApp: Boolean = false

  """External GraphQL schemas to add"""
  externalGraphQLSchemas: [OneGraphGraphQLSchemaExternalGraphQLSchemaInput!]

  """Optional id of a Salesforce schema to attach to the GraphQL schema."""
  salesforceSchemaId: String

  """The optional id of the GraphQL schema that this was derived from."""
  parentId: String

  """
  The list of services that this schema should use. Leave blank if you want to add support for all supported services.
  """
  enabledServices: [OneGraphServiceEnumArg!]

  """
  The list of GraphQL fields identifying services that this schema should use.
  Leave blank if you want to add support for all supported services. Note that
  this field won't be merged with `enabledServices`, which takes an enum and is deprecated.
  """
  graphQLFieldForEnabledServices: [String!]

  """The id of the app that the schema should belong to."""
  appId: String!
}

type OneGraphCreateGraphQLSchemaResponsePayload {
  graphqlSchema: OneGraphGraphQLSchema! @deprecated(reason: "use graphQLSchema")
  graphQLSchema: OneGraphGraphQLSchema!
  app: OneGraphApp!
}

type OneGraphCreateModifySchemaTokenResponsePayload {
  """The access token that can be used to modify the app's schema."""
  accessToken: OneGraphAccessToken!
}

input OneGraphCreateNetlifyCliSessionInput {
  """A new GraphQL schema to create and associate with the session."""
  graphQLSchema: OneGraphCliSessionGraphQLSchemaInput

  """A new persisted document to create and associate with the session."""
  persistedDocument: OneGraphCliSessionPersistedDocumentInput

  """Status for the session. Defaults to ACTIVE."""
  status: OneGraphNetlifyCliSessionStatus = ACTIVE

  """Optional metadata for the session"""
  metadata: JSONObject

  """An optional name for the session"""
  name: String
  appId: String!
}

type OneGraphCreateNetlifyCliSessionResponsePayload {
  """The session that was created."""
  session: OneGraphNetlifyCliSession!
}

input OneGraphCreateNetlifyLogEvent {
  data: OneGraphCreateNetlifyLogEventDataInput!
  sessionId: String!
}

input OneGraphCreateNetlifyLogEventDataInput {
  message: String!
}

type OneGraphCreateNetlifyLogResponsePayload {
  event: OneGraphNetlifyCliSessionEvent!
}

input OneGraphCreateNetlifyTestEvent {
  data: OneGraphCreateNetlifyTestEventDataInput!
  sessionId: String!
}

input OneGraphCreateNetlifyTestEventDataInput {
  payload: JSON!
}

type OneGraphCreateNetlifyTestResponsePayload {
  event: OneGraphNetlifyCliSessionEvent!
}

input OneGraphCreateOrgInput {
  """Name for the organization"""
  name: String!
}

type OneGraphCreateOrgResponsePayload {
  """Organization that was created by this mutation"""
  org: OneGraphOrg!
}

input OneGraphCreatePersistedQueryInput {
  """
  The parent persisted query. It can be used to track lineage of the query.
  """
  parent: OneGraphCreatePersistedQueryParentInput

  """
  A description for the persisted query. Maximum length is 2096 characters.
  """
  description: String

  """
  List of tags to add to the persisted query. Tags are free-form text that can
  be used to categorize persisted queries. Each tag must be under 256 characters
  and there can be a maximum of 10 tags on a single persisted query.
  """
  tags: [String!]
  accessToken: String

  """
  If set to true, and there was a successful execution of the query in the last
  30 days, then the last successful result will be returned if we encounter any
  error when executing the query. If we do not have a previous successful
  result, then the response with the error will be returned.
  
                           Note that the fallback result will be returned even in the case of partial success.
  
                           This parameter is useful when you expect that your
  queries might be rate-limited by the underlying service.
  
                           The query must provide a cache strategy in order to use `fallbackOnError`.
  """
  fallbackOnError: Boolean
  cacheStrategy: OneGraphPersistedQueryCacheStrategyArg

  """
  Operation names to allow. If not provided, then all operations in the document are allowed.
  """
  allowedOperationNames: [String!]
  fixedVariables: JSON
  freeVariables: [String!]
  query: String!
  appId: String!
}

input OneGraphCreatePersistedQueryParentInput {
  """
  An optional list of tags to remove from the parent query. If any of the
  provided tags aren't present on the parent, the mutation will fail. No
  persisted queries will be created and no tags will be removed from the parent.
  """
  removeTags: [String!]

  """The id of the parent"""
  id: String!
}

type OneGraphCreatePersitQueryTokenResponsePayload {
  """The access token that can be used to persist queries"""
  accessToken: OneGraphAccessToken!
}

input OneGraphCreatePersonalTokenInput {
  anchor: OneGraphAccessTokenAnchorEnum = ONEGRAPH_USER
  appId: String!
  accessToken: String!
  name: String!
}

type OneGraphCreatePersonalTokenResponsePayload {
  """Personal access token that was created by this mutation"""
  accessToken: OneGraphAccessToken!

  """OneGraph user"""
  oneUser: OneGraphUser
}

input OneGraphCreatePersonalTokenWithNetlifySiteAnchorInput {
  name: String!
  netlifySiteId: String!
}

type OneGraphCreatePersonalTokenWithNetlifySiteAnchorResponsePayload {
  """Personal access token that was created by this mutation"""
  accessToken: OneGraphAccessToken!
}

input OneGraphCreateServiceAuthInput {
  """
  Whether to use a fixed redirect url, i.e. `/oauth/receive` instead of `/oauth/github/receive`. Defaults to `false`.
  """
  useFixedRedirectUri: Boolean = false

  """Custom cname for the custom OAuth client."""
  cname: String

  """Custom redirect URI."""
  customRedirectUri: String

  """
  Whether the user who created the token should be able to fetch it from OneGraph. Defaults to false.
  """
  revealTokens: Boolean = false

  """Optional list of scopes to use for your app."""
  scopes: [String!]

  """App name for trello. Required to use custom Trello credentials."""
  trelloAppName: String

  """
  Developer token for the Google Ads api. This param is required for using custom OAuth credentials for Google Ads.
  
  A developer token from Google allows your app to connect to the Google Ads
  API. To retrieve your developer token, sign in to your Manager Account. You
  must be signed-in to a Google Ads Manager Account before continuing.
  
  Navigate to TOOLS & SETTINGS > SETUP > API Center. The API Center option will appear only for Google Ads Manager Accounts.
  
  If your developer token is pending approval, you can start developing
  immediately with the pending token you received during sign up, using a test
  manager account.
  
  Your pending developer token must be approved before using it with production Google Ads accounts.
  """
  googleDeveloperToken: String

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String
  clientSecret: String!
  clientId: String!
  serviceGraphQLField: String
  service: OneGraphCustomServiceAuthServiceEnum
  appId: String!
}

type OneGraphCreateServiceAuthResponsePayload {
  """Service auth that was created by this mutation"""
  serviceAuth: OneGraphServiceAuth!
  app: OneGraphApp!
}

input OneGraphCreateServiceConfigurationMutationInput {
  """The OAuth 2.0 configuration for the service."""
  oAuth2Config: OneGraphCreateServiceConfigurationMutationInputOAuthConfig

  """The service enum for the service. Must be SCREAMING_SNAKE_CASE."""
  graphQLEnum: String

  """
  The toplevel GraphQL field that allows accessing this service in the Graph. Must be camelCase.
  """
  graphQLField: String!

  """The service friendly name, to be displayed to users."""
  friendlyServiceName: String!
  appId: String!
}

input OneGraphCreateServiceConfigurationMutationInputOAuthConfig {
  """
  OAuth scopes supported by the service, according to RFC6749 Section 1.4
  """
  scopes: [OneGraphServiceScopeInput!]

  """
  The registered client secret, issued by the service upon registration, according to RFC6749 Section 2.3 
  """
  clientSecret: String!

  """
  The registered client identifier for the service, issued by the service upon
  registration, according to RFC6749 Section 2.2
  """
  clientId: String!

  """
  The Token URI for obtaining an access token by presenting its authorization
  grant or refresh token, according to RFC6749 Section 3.2
  """
  tokenUri: String!

  """
  The Authorization URI for obtaining an authorization grant, according to RFC6749 Section 3.1
  """
  authorizationUri: String!
}

input OneGraphCreateServiceLinkArg {
  endNode: OneGraphServiceLinkNodeArg!
  startNode: OneGraphServiceLinkNodeArg!
}

type OneGraphCreateServiceLinkResponsePayload {
  startNode: OneGraphServiceLinkNode!
  endNode: OneGraphServiceLinkNode!
}

input OneGraphCreateSharedDocumentInput {
  """Optional example variables to include with the document."""
  exampleVariables: JSON

  """A short title for the operation. Maximum length is 256 characters."""
  title: String

  """A description for the operation. Maximum length is 2096 characters."""
  description: String

  """
  The Netlify siteId that this operation should be associated with. The
  currently-authenticated user must have access to this site in Netlify.
  """
  siteId: String

  """The shared operation text. Maximum length is 1mb."""
  body: String!
}

type OneGraphCreateSharedDocumentResponsePayload {
  """The shared document that was created."""
  sharedDocument: OneGraphSharedDocument!
}

input OneGraphCreateShortenedUrlInput {
  operation: String
  description: String
  name: String
  variables: String
  query: String!
}

"""A custom cors origin"""
type OneGraphCustomCorsOrigin {
  """The friendly service name for the cors origin"""
  friendlyServiceName: String!

  """
  The name of the origin that should be displayed, e.g. oneblog for oneblog.netlify.app.
  """
  displayName: String!

  """The encoded value as a string, used to remove the custom cors origin."""
  encodedValue: String!
}

"""
Services OneGraph supports providing a custom clientId/clientSecret for.
"""
enum OneGraphCustomServiceAuthServiceEnum {
  ADROLL
  ASANA
  BOX
  CLOUDINARY
  CONTENTFUL
  DEV_TO
  DOCUSIGN
  DRIBBBLE
  DROPBOX
  EGGHEADIO
  EVENTIL
  FACEBOOK
  FIREBASE
  GITHUB
  GMAIL
  GONG
  GOOGLE
  GOOGLE_ADS
  GOOGLE_ANALYTICS
  GOOGLE_CALENDAR
  GOOGLE_COMPUTE
  GOOGLE_DOCS
  GOOGLE_SEARCH_CONSOLE
  GOOGLE_TRANSLATE
  HUBSPOT
  INTERCOM
  MAILCHIMP
  MEETUP
  NETLIFY
  NOTION
  OUTREACH
  PRODUCT_HUNT
  QUICKBOOKS
  SALESFORCE
  SANITY
  SHOPIFY_ADMIN
  SHOPIFY_STOREFRONT
  SLACK
  SPOTIFY
  STRIPE
  TWITCH_TV
  TWILIO
  YNAB
  YOUTUBE
  ZEIT
  ZENDESK
  TRELLO
  TWITTER
}

input OneGraphDangerouslySignJwtPayloadInput {
  expiresInSeconds: Int = 300
  includeBaseFields: Boolean = true
  payload: JSON!
}

type OneGraphDangerouslySignJwtPayloadResponsePayload {
  encoded: String!
}

input OneGraphDeleteNetlifyCliSessionInput {
  """The id of the session."""
  sessionId: String!
}

type OneGraphDeleteNetlifyCliSessionResponsePayload {
  """The session that was deleted."""
  session: OneGraphNetlifyCliSession!
}

input OneGraphDeletePersistedQueryInput {
  id: String!
  appId: String!
}

type OneGraphDeletePersistedQueryResponsePayload {
  app: OneGraphApp!
}

input OneGraphDeletePersonalTokenInput {
  appId: String!
  accessToken: String!
}

type OneGraphDeletePersonalTokenResponsePayload {
  """OneGraph user"""
  oneUser: OneGraphUser!
}

input OneGraphDestroyServiceAuthInput {
  serviceAuthId: String!
  appId: String!
}

type OneGraphDestroyServiceAuthResponsePayload {
  """Service auth that was destroyed by this mutation"""
  serviceAuth: OneGraphServiceAuth!
  app: OneGraphApp!
}

input OneGraphDevToAuthArg {
  """
  For advanced usage: if you have separately implemented the Dev.to OAuth flow
  and have an OAuth token to make calls on behalf of your user, use it with this
  `oauthToken` argument
  """
  oauthToken: String

  """
  For use with a personal API token, see the [Dev.to
  authentication](https://docs.dev.to/api/#section/Authentication/api_key) docs
  on generating a token. Will take priority over the `oauthToken` argument if
  both are provided.
  """
  apiKey: String
}

"""Custom OAuth client for Dev.to"""
type OneGraphDevToServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String! @deprecated(reason: "Use `serviceInfo` instead.")

  """
  The service information for the service that the clientId and clientSecret belong to
  """
  serviceInfo: OneGraphServiceInfo!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

input OneGraphDisableAuthGuardianSlackIntegrationInput {
  appId: String!
}

type OneGraphDisableAuthGuardianSlackIntegrationResponsePayload {
  app: OneGraphApp
}

input OneGraphDisableGithubRepositorySubscriptionDelegationByIdInput {
  """The id of the delegation."""
  id: String!
}

type OneGraphDisableGithubRepositorySubscriptionDelegationByIdResult {
  """The App that delegation was disabled for."""
  app: OneGraphApp!
}

input OneGraphDisableGithubRepositorySubscriptionDelegationInput {
  """
  The name of the repo, e.g. `graphiql-explorer` in `onegraph/graphiql-explorer`.
  """
  repoName: String!

  """
  The owner of the repo, e.g. `onegraph` in `onegraph/graphiql-explorer`.
  """
  repoOwner: String!
}

type OneGraphDisableGithubRepositorySubscriptionDelegationResult {
  """The GitHub repository name of app that delegation was enabled for."""
  repoName: String!

  """The GitHub repository owner of app that delegation was enabled for."""
  repoOwner: String!
}

"""Custom OAuth client for Docusign"""
type OneGraphDocusignServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String! @deprecated(reason: "Use `serviceInfo` instead.")

  """
  The service information for the service that the clientId and clientSecret belong to
  """
  serviceInfo: OneGraphServiceInfo!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""Custom OAuth client for Dribbble"""
type OneGraphDribbbleServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String! @deprecated(reason: "Use `serviceInfo` instead.")

  """
  The service information for the service that the clientId and clientSecret belong to
  """
  serviceInfo: OneGraphServiceInfo!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""Custom OAuth client for Dropbox"""
type OneGraphDropboxServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String! @deprecated(reason: "Use `serviceInfo` instead.")

  """
  The service information for the service that the clientId and clientSecret belong to
  """
  serviceInfo: OneGraphServiceInfo!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""Custom OAuth client for Egghead.io"""
type OneGraphEggheadioServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String! @deprecated(reason: "Use `serviceInfo` instead.")

  """
  The service information for the service that the clientId and clientSecret belong to
  """
  serviceInfo: OneGraphServiceInfo!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

input OneGraphEnableAuthGuardianSlackIntegrationInput {
  authToken: String!
  channel: String!
  appId: String!
}

type OneGraphEnableAuthGuardianSlackIntegrationResponsePayload {
  app: OneGraphApp
}

input OneGraphEnableGitHubAppWebhookInput {
  serviceAuthId: String!
}

type OneGraphEnableGitHubAppWebhookResponsePayload {
  """Custom OAuth Client that was updated"""
  serviceAuth: OneGraphServiceAuth!

  """GitHub app webhook that was created"""
  gitHubAppWebhook: OneGraphGitHubAppWebhook!
}

input OneGraphEnableGithubRepositorySubscriptionDelegationInput {
  """
  The name of the repo, e.g. `graphiql-explorer` in `onegraph/graphiql-explorer`.
  """
  repoName: String!

  """
  The owner of the repo, e.g. `onegraph` in `onegraph/graphiql-explorer`.
  """
  repoOwner: String!
}

type OneGraphEnableGithubRepositorySubscriptionDelegationResult {
  """The GitHub repository name of app that delegation was disabled for."""
  repoName: String!

  """The GitHub repository owner of app that delegation was disabled for."""
  repoOwner: String!
}

"""Custom OAuth client for Eventil"""
type OneGraphEventilServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String! @deprecated(reason: "Use `serviceInfo` instead.")

  """
  The service information for the service that the clientId and clientSecret belong to
  """
  serviceInfo: OneGraphServiceInfo!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

input OneGraphEvictCachedPersistedQueryResultsInput {
  """The operationName of the cached result."""
  operationName: String

  """
  Variables values that must match. Note that this specifies the *minimum* of
  the match: even if there are *additional* variables in the cached query that
  weren't provided here, if the cached query successfully matches *at least* the
  variables provided here, the result will be removed from the cache.
  """
  variables: JSON

  """The id of the persisted query."""
  docId: String!

  """Id for the app that the query was persisted on."""
  appId: String!
}

type OneGraphEvictCachedResultsResponsePayload {
  docId: String!
}

enum OneGraphExecutionStrategy {
  DYNAMIC
  PERSISTED
}

type OneGraphExternalGraphQLSchema {
  """Id of the external graphql schema"""
  id: String!

  """The datetime that the schema was added, in rfc3339 format."""
  createdAt: String!

  """The datetime that the schema was last updated, in rfc3339 format."""
  updatedAt: String!

  """Service of the external graphql schema"""
  service: OneGraphSupportedExternalGraphQLService! @deprecated(reason: "Use `serviceInfo` instead")

  """Service information for the external graphql schema"""
  serviceInfo: OneGraphServiceInfo!

  """GraphQL endpoint of the external graphql schema"""
  endpoint: String!
}

type OneGraphExternalGraphQLSchemaConnection {
  nodes: [OneGraphExternalGraphQLSchema!]!
}

type OneGraphExternalHoneycombConfig {
  """Id of the app that the external Honeycomb config belongs to."""
  appId: String!

  """The datetime that the Honecomb config was added, in rfc3339 format."""
  createdAt: String!

  """
  The datetime that the Honeycomb config was last updated, in rfc3339 format.
  """
  updatedAt: String!

  """The Honeycomb API token that OneGraph will use to send events."""
  obfuscatedToken: String!

  """If `true`, OneGraph will send events to Honeycomb."""
  active: Boolean!

  """The last error we received while sending events to the Honeycomb API."""
  lastError: String

  """User-provided dataset names"""
  datasets: [OneGraphExternalHoneycombConfigDataset!]!
}

type OneGraphExternalHoneycombConfigDataset {
  """The metric type."""
  metricType: OneGraphExternalHoneycombConfigDatasetMetricTypeEnum!

  """The name of the dataset in Honeycomb."""
  datasetName: String!
}

enum OneGraphExternalHoneycombConfigDatasetMetricTypeEnum {
  API_CALL
  SUBSCRIPTION_DELIVERY
}

"""Custom OAuth client for Facebook"""
type OneGraphFacebookServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String! @deprecated(reason: "Use `serviceInfo` instead.")

  """
  The service information for the service that the clientId and clientSecret belong to
  """
  serviceInfo: OneGraphServiceInfo!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

input OneGraphFedexAPIAuth {
  meterNumber: String!
  accountNumber: String!
  password: String!
  key: String!
}

"""Custom OAuth client for Firebase"""
type OneGraphFirebaseServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String! @deprecated(reason: "Use `serviceInfo` instead.")

  """
  The service information for the service that the clientId and clientSecret belong to
  """
  serviceInfo: OneGraphServiceInfo!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

input OneGraphForkGraphQLSchemaChangesInput {
  graphQLFieldForEnabledServices: OneGraphForkGraphQLSchemaEnabledServiceGraphQLFieldsChangesInput
  enabledServices: OneGraphForkGraphQLSchemaEnabledServicesChangesInput
  externalGraphQLSchemas: OneGraphForkGraphQLSchemaExternalGraphQLSchemaChangesInput
  salesforceSchema: OneGraphForkGraphQLSchemaSalesforceChangesInput
}

input OneGraphForkGraphQLSchemaEnabledServiceGraphQLFieldsChangesInput {
  """
  List of GraphQL fields identifying services to replace current services in the
  schema with the given list of services. Can not be combined with add or remove.
  """
  serviceGraphQLFieldsToReplace: [String!]

  """List of GraphQL fields identifying services to remove to the schema."""
  serviceGraphQLFieldsToRemove: [String!]

  """List of GraphQL fields identifying services to add to the schema."""
  serviceGraphQLFieldsToAdd: [String!]
}

input OneGraphForkGraphQLSchemaEnabledServicesChangesInput {
  """
  Replace services with the given list of services. Can not be combined with add or remove.
  """
  replace: [OneGraphServiceEnumArg!]

  """Services to remove from the schema."""
  remove: [OneGraphServiceEnumArg!]

  """Services to add to the schema."""
  add: [OneGraphServiceEnumArg!]
}

input OneGraphForkGraphQLSchemaExternalGraphQLSchemaChangesInput {
  """The external GraphQL schemas to remove from the GraphQL schema."""
  remove: [OneGraphGraphQLSchemaExternalGraphQLSchemaInput!]

  """The external GraphQL schemas to add to the GraphQL schema."""
  add: [OneGraphGraphQLSchemaExternalGraphQLSchemaInput!]
}

input OneGraphForkGraphQLSchemaInput {
  """The changes to apply to the schema."""
  changes: OneGraphForkGraphQLSchemaChangesInput!

  """
  Whether to set this schema as the default for the app. Defaults to false.
  """
  setAsDefaultForApp: Boolean = false

  """
  Whether to fork the default schema for the app. If `parentId is provided, this arg will be ignored.
  """
  forkAppDefaultSchema: Boolean = true

  """
  The optional id of the GraphQL schema to fork. If not provided, and
  `forkAppDefaultSchema` is set to true, the current default graphQLSchema for
  the app will be used. If there is no current default, then a global default
  graphQLSchema will be created and this schema will have no parent.
  """
  parentId: String

  """The id of the app that the schema should belong to."""
  appId: String!
}

type OneGraphForkGraphQLSchemaResponsePayload {
  graphQLSchema: OneGraphGraphQLSchema!
  app: OneGraphApp!
}

input OneGraphForkGraphQLSchemaSalesforceChangesInput {
  """
  Whether to create a GraphQL schema with the custom salesforce schema removed.
  Can not be true if `setSalesforceSchemaId` is non-null.
  """
  removeCustomSalesforceSchema: Boolean

  """The id of a Salesforce schema to attach to the GraphQL schema."""
  setSalesforceSchemaId: String
}

type OneGraphGitHubAppWebhook {
  signingSecret: String!
  webhookUrl: String!
}

type OneGraphGithubRepositorySubscriptionDelegate {
  id: String!

  """Name with owner (e.g. onegraph/graphiql-exporer) of the GitHub repo."""
  nameWithOwner: String!

  """
  Datetime that the repo was set up to allow non-admin subscriptions (rfc3339 encoded)
  """
  createdAt: String!
}

type OneGraphGithubRepositorySubscriptionDelegateConnection {
  nodes: [OneGraphGithubRepositorySubscriptionDelegate!]!
}

"""Custom OAuth client for GitHub"""
type OneGraphGitHubServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String! @deprecated(reason: "Use `serviceInfo` instead.")

  """
  The service information for the service that the clientId and clientSecret belong to
  """
  serviceInfo: OneGraphServiceInfo!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
  gitHubAppWebhook: OneGraphGitHubAppWebhook
}

"""Custom OAuth client for Gmail"""
type OneGraphGmailServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String! @deprecated(reason: "Use `serviceInfo` instead.")

  """
  The service information for the service that the clientId and clientSecret belong to
  """
  serviceInfo: OneGraphServiceInfo!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""Information about a subscription to gmail."""
type OneGraphGmailWatch {
  """Email address that is being watched."""
  emailAddress: String!
}

input OneGraphGongAuthArg {
  """
  For advanced usage: if you have separately implemented the Gong OAuth flow and
  have an OAuth token to make calls on behalf of your user, use it with this
  `oauthToken` argument
  """
  oauthToken: String

  """
  In the [Gong API Page](https://app.gong.io/company/api) (you must be a
  technical administrator in Gong), click `Create` to receive an Access Key and
  an Access Key Secret.
  """
  basic: OneGraphGongBasicAuthArg
}

input OneGraphGongBasicAuthArg {
  accessKeySecret: String!
  accessKey: String!
}

"""Custom OAuth client for Gong"""
type OneGraphGongServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String! @deprecated(reason: "Use `serviceInfo` instead.")

  """
  The service information for the service that the clientId and clientSecret belong to
  """
  serviceInfo: OneGraphServiceInfo!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

input OneGraphGoogleAdsAuthArg {
  oauthToken: String!

  """
  A developer token from Google allows your app to connect to the Google Ads API.
  
  To retrieve your developer token, sign in to your Manager Account. You must be
  signed-in to a Google Ads Manager Account before continuing. Navigate to TOOLS
  & SETTINGS > SETUP > API Center."
  """
  developerToken: String!
}

"""Custom OAuth client for Google Ads"""
type OneGraphGoogleAdsServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String! @deprecated(reason: "Use `serviceInfo` instead.")

  """
  The service information for the service that the clientId and clientSecret belong to
  """
  serviceInfo: OneGraphServiceInfo!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""Custom OAuth client for Google Analytics"""
type OneGraphGoogleAnalyticsServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String! @deprecated(reason: "Use `serviceInfo` instead.")

  """
  The service information for the service that the clientId and clientSecret belong to
  """
  serviceInfo: OneGraphServiceInfo!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""Custom OAuth client for Google Calendar"""
type OneGraphGoogleCalendarServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String! @deprecated(reason: "Use `serviceInfo` instead.")

  """
  The service information for the service that the clientId and clientSecret belong to
  """
  serviceInfo: OneGraphServiceInfo!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""Custom OAuth client for Google Compute"""
type OneGraphGoogleComputeServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String! @deprecated(reason: "Use `serviceInfo` instead.")

  """
  The service information for the service that the clientId and clientSecret belong to
  """
  serviceInfo: OneGraphServiceInfo!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""Custom OAuth client for Google Docs"""
type OneGraphGoogleDocsServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String! @deprecated(reason: "Use `serviceInfo` instead.")

  """
  The service information for the service that the clientId and clientSecret belong to
  """
  serviceInfo: OneGraphServiceInfo!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""Custom OAuth client for Google Search Console"""
type OneGraphGoogleSearchConsoleServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String! @deprecated(reason: "Use `serviceInfo` instead.")

  """
  The service information for the service that the clientId and clientSecret belong to
  """
  serviceInfo: OneGraphServiceInfo!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""Custom OAuth client for Google"""
type OneGraphGoogleServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String! @deprecated(reason: "Use `serviceInfo` instead.")

  """
  The service information for the service that the clientId and clientSecret belong to
  """
  serviceInfo: OneGraphServiceInfo!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

type OneGraphGoogleSiteVerification {
  """The root path that this will be served at."""
  path: String!

  """The content that will be served at the path."""
  body: String!
}

"""Custom OAuth client for Google Translate"""
type OneGraphGoogleTranslateServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String! @deprecated(reason: "Use `serviceInfo` instead.")

  """
  The service information for the service that the clientId and clientSecret belong to
  """
  serviceInfo: OneGraphServiceInfo!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""Customizations to a OneGraph schema."""
type OneGraphGraphQLSchema {
  id: String!
  appId: String!
  parentGraphQLSchemaId: String
  parentGraphQLSchema: OneGraphGraphQLSchema
  services: [OneGraphServiceInfo!]!
  salesforceSchema: OneGraphSalesforceSchema

  """External GraphQL schemas for the schema."""
  externalGraphQLSchemas: OneGraphExternalGraphQLSchemaConnection!
  createdAt: String!
  updatedAt: String!
}

input OneGraphGraphQLSchemaExternalGraphQLSchemaInput {
  """The id of the external GraphQL schema."""
  externalGraphQLSchemaId: String!
}

input OneGraphGraphQLSubscriptionRetryInput {
  """The signing secret that the subscription was created with."""
  secret: OneGraphSubscriptionSecretInput

  """
  Whether to deliver the payload according to the subscription's delivery mechanism (e.g. via webhook or websocket).
  """
  deliverPayload: Boolean!
  eventId: String!
  subscriptionId: String!
}

type OneGraphGraphQLSubscriptionRetryResponsePayload {
  """The id of the event that was retried."""
  eventId: String!

  """
  The subscription payload that was created from retrying the event if `deliverPayload` is true.
  
  Note that there may be no payload if the event was from a `poll` subscription
  where `onlyTriggerPayloadWhenChanged` is true.
  """
  payload: OneGraphAppSubscriptionPayload

  """
  The subscription payload body that was created from retrying the event.
  
  Note that there may be no payload body if the event was from a `poll`
  subscription where `onlyTriggerPayloadWhenChanged` is true.
  """
  payloadBody: JSON
}

input OneGraphGraphQLSubscriptionUnsubscribeInput {
  subscriptionId: String!
}

type OneGraphGraphQLSubscriptionUnsubscribeResponsePayload {
  """GraphQL Subscription that was modified by this mutation"""
  subscription: OneGraphAppSubscription!
}

input OneGraphGraphQLSubscriptionUpdateInput {
  """The fields of the subscription to update."""
  patch: OneGraphGraphQLSubscriptionUpdateInputPatch!

  """
  The signing secret that the subscription was created with. Note that this will not update the existing secret.
  """
  secret: OneGraphSubscriptionSecretInput
  subscriptionId: String!
}

"""Fields to change on a subscription."""
input OneGraphGraphQLSubscriptionUpdateInputPatch {
  """The new variables to replace the existing query variables."""
  variables: JSON

  """The new query to replace the existing subscription query."""
  query: String!
}

type OneGraphGraphQLSubscriptionUpdateResponsePayload {
  """GraphQL Subscription that was modified by this mutation"""
  subscription: OneGraphAppSubscription!
}

"""Custom OAuth client for Hubspot"""
type OneGraphHubspotServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String! @deprecated(reason: "Use `serviceInfo` instead.")

  """
  The service information for the service that the clientId and clientSecret belong to
  """
  serviceInfo: OneGraphServiceInfo!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""Custom OAuth client for Intercom"""
type OneGraphIntercomServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String! @deprecated(reason: "Use `serviceInfo` instead.")

  """
  The service information for the service that the clientId and clientSecret belong to
  """
  serviceInfo: OneGraphServiceInfo!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""Signing algorithm for JWTs generated by Onegraph"""
enum OneGraphJwtSigningAlgorithmEnum {
  HMAC_256
  RSA_256
}

"""Signing algorithm for JWTs generated by Onegraph"""
enum OneGraphJwtSigningAlgorithmEnumArg {
  HMAC_256
  RSA_256
}

interface OneGraphJwtSigningKey {
  """The family of algorithms used for this key"""
  family: OneGraphSigningAlgorithmFamilyEnum!

  """The algorithm associated with this key"""
  algorithm: OneGraphJwtSigningAlgorithmEnum!
}

"""An HMAC key used for signing JWTs"""
type OneGraphJwtSigningKeyHmac256 implements OneGraphJwtSigningKey {
  """The algorithm associated with this public key"""
  algorithm: OneGraphJwtSigningAlgorithmEnum!

  """The algorithm associated with this public key"""
  family: OneGraphSigningAlgorithmFamilyEnum!

  """The shared secret for this key (if any)"""
  sharedSecret: String
}

"""An RSA public key used for signing JWTs"""
type OneGraphJwtSigningKeyRsa256 implements OneGraphJwtSigningKey {
  """The algorithm associated with this public key"""
  family: OneGraphSigningAlgorithmFamilyEnum!

  """The algorithm associated with this public key"""
  algorithm: OneGraphJwtSigningAlgorithmEnum!
}

"""List of OneGraphNodes that are linked from this node."""
type OneGraphLinkedNodesConnection {
  """List of OneGraphNodes that are linked from this node."""
  nodes: [OneGraphNode!]!
}

input OneGraphLinkedNodesConnectionFilter {
  """Filter connections by their GraphQL __typename"""
  typename: OneGraphLinkedNodesTypenameFilter

  """Filter connections by service"""
  service: OneGraphLinkedNodesServiceFilter
}

"""Filter linked nodes by service."""
input OneGraphLinkedNodesServiceFilter {
  """
  Checks for linked nodes where the service is in the list of the provided values.
  """
  in: [OneGraphServiceEnumArg!]

  """
  Checks for linked nodes where the service is equal to the provided value.
  """
  equalTo: OneGraphServiceEnumArg
}

"""Filter linked nodes by __typename."""
input OneGraphLinkedNodesTypenameFilter {
  """
  Checks for linked nodes where the __typename is in the list of the provided values.
  """
  in: [String!]

  """
  Checks for linked nodes where the __typename is equal to the provided value.
  """
  equalTo: String
}

input OneGraphLinkOneGraphNodesInput {
  """The `oneGraphId` for the end node"""
  endNodeOneGraphId: String!

  """The `oneGraphId` for the start node"""
  startNodeOneGraphId: String!
}

type OneGraphLinkOneGraphNodesResponsePayload {
  startNode: OneGraphNode
  endNode: OneGraphNode
}

input OneGraphLogdnaServiceAuthArg {
  """
  Service Key from LogDNA. Retrive a service key from [your
  profile](https://app.logdna.com/manage/profile) under API Keys > Service Keys.
  """
  serviceKey: String!
}

"""Custom OAuth client for Mailchimp"""
type OneGraphMailchimpServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String! @deprecated(reason: "Use `serviceInfo` instead.")

  """
  The service information for the service that the clientId and clientSecret belong to
  """
  serviceInfo: OneGraphServiceInfo!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""Custom OAuth client for Meetup"""
type OneGraphMeetupServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String! @deprecated(reason: "Use `serviceInfo` instead.")

  """
  The service information for the service that the clientId and clientSecret belong to
  """
  serviceInfo: OneGraphServiceInfo!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

input OneGraphModifySchemaTokenInput {
  """Id for the app that you want to modify the schema for."""
  appId: String!
}

"""Mutations for the currently authed user"""
type OneGraphMutation {
  app(id: String!): OneGraphAppMutations @deprecated(reason: "Use setAppCORSOrigins")
  createServiceLink(data: OneGraphCreateServiceLinkArg!): OneGraphCreateServiceLinkResponsePayload!
  linkOneGraphNodes(input: OneGraphLinkOneGraphNodesInput!): OneGraphLinkOneGraphNodesResponsePayload!
  unLinkOneGraphNodes(input: OneGraphUnLinkOneGraphNodesInput!): OneGraphUnLinkOneGraphNodesResponsePayload!
  completeTour(data: OneGraphCompleteTourData!): OneGraphCompleteTourResponsePayload!
  createApp(
    """`id` of the organization that this app should belong to"""
    orgId: String!
    corsOrigins: [String!]!
    description: String
    name: String!
  ): OneGraphApp!
  executeChain(input: OneGraphQueryChainInput!): OneGraphQueryChainMutationPayload!
  setAppCORSOrigins(data: SetAppCORSOriginsData!): SetAppCORSOriginsResponsePayload!
  addCORSOriginToApp(input: OneGraphAddCORSOriginToAppInput!): OneGraphAddCORSOriginToAppResponsePayload!
  removeCORSOriginFromApp(input: OneGraphRemoveCORSOriginFromAppInput!): OneGraphRemoveCORSOriginFromAppResponsePayload!
  removeCustomCorsOriginFromApp(input: OneGraphRemoveCustomCorsOriginFromAppInput!): OneGraphRemoveCustomCorsOriginFromAppResponsePayload!
  addNetlifySiteToAppCORSOrigins(input: OneGraphAddNetlifySiteToAppCORSOriginsInput!): OneGraphAddNetlifySiteToAppCORSOriginsResponsePayload!
  removeNetlifySiteFromAppCORSOrigins(input: OneGraphRemoveNetlifySiteFromAppCORSOriginsInput!): OneGraphRemoveNetlifySiteFromAppCORSOriginsResponsePayload!
  createServiceAuth(data: OneGraphCreateServiceAuthInput!): OneGraphCreateServiceAuthResponsePayload!
  destroyServiceAuth(data: OneGraphDestroyServiceAuthInput!): OneGraphDestroyServiceAuthResponsePayload!
  subscriptionUnsubscribe(data: OneGraphGraphQLSubscriptionUnsubscribeInput!): OneGraphGraphQLSubscriptionUnsubscribeResponsePayload!
  retrySubscriptionEvent(input: OneGraphGraphQLSubscriptionRetryInput!): OneGraphGraphQLSubscriptionRetryResponsePayload!
  updateSubscription(input: OneGraphGraphQLSubscriptionUpdateInput!): OneGraphGraphQLSubscriptionUpdateResponsePayload!
  createPersonalToken(input: OneGraphCreatePersonalTokenInput!): OneGraphCreatePersonalTokenResponsePayload!
  deletePersonalToken(input: OneGraphDeletePersonalTokenInput!): OneGraphDeletePersonalTokenResponsePayload!
  addAuthsToPersonalToken(input: OneGraphAddAuthsToPersonalTokenInput!): OneGraphAddAuthsToPersonalTokenResponsePayload!
  persistAuths(input: OneGraphPersistAuthsInput!): OneGraphPersistAuthsResponsePayload!
  createShortenedUrl(input: OneGraphCreateShortenedUrlInput!): OneGraphShortenUrlResponsePayload!
  createOrg(input: OneGraphCreateOrgInput!): OneGraphCreateOrgResponsePayload!
  updateOrgById(input: OneGraphUpdateOrgByIdInput!): OneGraphUpdateOrgByIdResponsePayload!
  updateAppById(input: OneGraphUpdateAppByIdInput!): OneGraphUpdateAppByIdResponsePayload!
  createPersistedQuery(input: OneGraphCreatePersistedQueryInput!): OneGraphPersistedQueryResponsePayload!
  updatePersistedQuery(input: OneGraphUpdatePersistedQueryInput!): OneGraphUpdatedPersistedQueryResponsePayload!
  createPersitQueryToken(input: OneGraphPersistedQueryTokenInput!): OneGraphCreatePersitQueryTokenResponsePayload!
  deletePersistedQuery(input: OneGraphDeletePersistedQueryInput!): OneGraphDeletePersistedQueryResponsePayload!
  evictCachedPersistedQueryResults(input: OneGraphEvictCachedPersistedQueryResultsInput!): OneGraphEvictCachedResultsResponsePayload!
  createApiToken(input: OneGraphCreateApiTokenTokenInput!): OneGraphCreateApiTokenResponsePayload!

  """
  Allows non-admin users to subscribe to GitHub events on OneGraph for the given repo and app.
  """
  enableGitHubRepositorySubscriptionDelegation(input: OneGraphEnableGithubRepositorySubscriptionDelegationInput!): OneGraphEnableGithubRepositorySubscriptionDelegationResult!

  """
  Remove ability for non-admin users to subscribe to GitHub events on OneGraph for the given repo and app.
  """
  disableGitHubRepositorySubscriptionDelegation(input: OneGraphDisableGithubRepositorySubscriptionDelegationInput!): OneGraphDisableGithubRepositorySubscriptionDelegationResult!

  """
  Remove ability for non-admin users to subscribe to GitHub events on OneGraph.
  Allows the owner of the app on OneGraph to remove delegation for a repo.
  """
  disableGitHubRepositorySubscriptionDelegationById(input: OneGraphDisableGithubRepositorySubscriptionDelegationByIdInput!): OneGraphDisableGithubRepositorySubscriptionDelegationByIdResult!
  enableAuthGuardianSlackIntegration(input: OneGraphEnableAuthGuardianSlackIntegrationInput!): OneGraphEnableAuthGuardianSlackIntegrationResponsePayload
  disableAuthGuardianSlackIntegration(input: OneGraphDisableAuthGuardianSlackIntegrationInput!): OneGraphDisableAuthGuardianSlackIntegrationResponsePayload
  destroyApp(id: String!): OneGraphApp
  saveQuery(public: Boolean, enabled: Boolean, tags: [String!]!, description: String, name: String!, body: String!): OneGraphQuery!
  updateQuery(public: Boolean, enabled: Boolean, tags: [String!], name: String, id: String!): OneGraphQuery
  destroyQuery(version: String!, name: String!): OneGraphQuery!
  signUp(agreeToTOS: Boolean!, passwordConfirm: String!, password: String!, email: String!, fullName: String!): OneGraphSignInResult!
  signIn(rememberMe: Boolean!, password: String!, email: String!): OneGraphSignInResult!
  agreeToTos(userAgreesToTheOneGraphTermsOfService: Boolean!): OneGraphUser!
  signOut: OneGraphSignoutResponsePayload!

  """
  Revokes a OneGraph access token, refresh token, or JWT. After a token is
  destroyed, it can no longer be used to authenticate with OneGraph.
  
  If you destroy a JWT, external services that rely on the claims embedded in
  the JWT may still accept the JWT and you will also have to revoke the JWT
  though the external service's revocation process.
  """
  destroyToken(
    """An Authlify Token identifier"""
    authlifyTokenId: String

    """Any OneGraph access token, refresh token, or JWT"""
    token: String
  ): Boolean!
  exchangeGitHubContextForOneGraphAccessToken: OneGraphSignInResult!
  exchangeNetlifyContextForOneGraphAccessToken: OneGraphSignInResult!
  exchangeZeitContextForOneGraphAccessToken: OneGraphSignInResult!
  associateOneGraphUserWithGitHubAccount: OneGraphUser!
  associateOneGraphUserWithNetlifyAccount: OneGraphUser!
  requestPasswordReset(email: String!): String!
  resetPassword(passwordConfirm: String!, password: String!, token: String!): Boolean!
  enableGitHubAppWebhook(input: OneGraphEnableGitHubAppWebhookInput!): OneGraphEnableGitHubAppWebhookResponsePayload!
  addExternalGraphQLSchema(input: OneGraphAddExternalGraphQLSchemaInput!): OneGraphAddExternalGraphQLSchemaPayload!
  updateExternalGraphQLSchema(input: OneGraphUpdateExternalGraphQLSchemaInput!): OneGraphUpdateExternalGraphQLSchemaPayload! @deprecated(reason: "use `createExternalGraphQLSchema` first, then `createGraphQLSchema` with the result")
  removeExternalGraphQLSchema(input: OneGraphRemoveExternalGraphQLSchemaInput!): OneGraphRemoveExternalGraphQLSchemaPayload! @deprecated(reason: "Use createGraphQLSchema")
  addPreviewSalesforceSchema(input: OneGraphAddPreviewSalesforceSchemaInput!): OneGraphAddPreviewSalesforceSchemaPayload! @deprecated(reason: "Use `addSalesforceSchema`, then `createGraphQLSchema`.")
  promotePreviewSalesforceSchema(input: OneGraphPromotePreviewSalesforceSchemaInput!): OneGraphPromotePreviewSalesforceSchemaPayload!
  addSalesforceSchema(input: OneGraphAddSalesforceSchemaInput!): OneGraphAddSalesforceSchemaPayload!
  updateSalesforceSchema(input: OneGraphUpdateSalesforceSchemaInput!): OneGraphUpdateSalesforceSchemaPayload!
  removeSalesforceSchema(input: OneGraphRemoveSalesforceSchemaInput!): OneGraphRemoveSalesforceSchemaPayload!
  addPreviewSalesforceSchemaForSalesforceViewer: OneGraphAddPreviewSalesforceSchemaForSalesforceViewerPayload! @deprecated(reason: "use `addSalesforceSchemaForSalesforceViewer`, then `createGraphQLSchema`.")
  addSalesforceSchemaForSalesforceViewer: OneGraphAddSalesforceSchemaForSalesforceViewerPayload!
  addGoogleSiteVerification(input: OneGraphAddGoogleSiteVerificationInput!): OneGraphAddGoogleSiteVerificationPayload!
  removeGoogleSiteVerification(input: OneGraphRemoveGoogleSiteVerificationInput!): OneGraphRemoveGoogleSiteVerificationPayload!
  addSlackEventWebhook(input: OneGraphAddSlackEventWebhookInput!): OneGraphAddSlackEventWebhookPayload!
  setSlackEventWebhookAppToken(input: OneGraphSetSlackEventWebhookAppTokenInput!): OneGraphSetSlackEventWebhookAppTokenPayload!
  setSlackEventWebhookSigningSecret(input: OneGraphSetSlackEventWebhookSigningSecretInput!): OneGraphSetSlackEventWebhookSigningSecretPayload!
  removeSlackEventWebhook(input: OneGraphRemoveSlackEventWebhookInput!): OneGraphRemoveSlackEventWebhookPayload!
  addExternalHoneycombConfig(input: OneGraphAddExternalHoneycombConfigInput!): OneGraphAddExternalHoneycombConfigPayload!
  updateExternalHoneycombConfig(input: OneGraphUpdateExternalHoneycombConfigInput!): OneGraphUpdateExternalHoneycombConfigPayload!
  removeExternalHoneycombConfig(input: OneGraphRemoveExternalHoneycombConfigInput!): OneGraphRemoveExternalHoneycombConfigPayload!
  createEmptyAccessToken(input: OneGraphCreateEmptyAccessTokenInput!): OneGraphCreateEmptyAccessTokenPayload!
  upsertAppForNetlifySite(input: OneGraphUpsertAppForNetlifySiteInput!): OneGraphUpsertAppForNetlifySiteResponsePayload!

  """Creates an empty personal token with a Netlify site anchor"""
  createPersonalTokenWithNetlifySiteAnchor(input: OneGraphCreatePersonalTokenWithNetlifySiteAnchorInput!): OneGraphCreatePersonalTokenWithNetlifySiteAnchorResponsePayload!
  createGraphQLSchema(input: OneGraphCreateGraphQLSchemaInput!): OneGraphCreateGraphQLSchemaResponsePayload!
  forkGraphQLSchema(input: OneGraphForkGraphQLSchemaInput!): OneGraphForkGraphQLSchemaResponsePayload!
  createModifySchemaToken(input: OneGraphModifySchemaTokenInput!): OneGraphCreateModifySchemaTokenResponsePayload!

  """
  Acknowledge a set of netlify CLI events for a session. All events must be for the same session.
  """
  ackNetlifyCliEvents(input: OneGraphAckNetlifyCliEventsInput!): OneGraphAckNetlifyCliEventsResponsePayload!

  """Create a new CLI session."""
  createNetlifyCliSession(input: OneGraphCreateNetlifyCliSessionInput!): OneGraphCreateNetlifyCliSessionResponsePayload!

  """Update a CLI session."""
  updateNetlifyCliSession(input: OneGraphUpdateNetlifyCliSessionInput!): OneGraphUpdateNetlifyCliSessionResponsePayload!

  """Delete a CLI session."""
  deleteNetlifyCliSession(input: OneGraphDeleteNetlifyCliSessionInput!): OneGraphDeleteNetlifyCliSessionResponsePayload!
  createNetlifyCliLogEvent(input: OneGraphCreateNetlifyLogEvent!): OneGraphCreateNetlifyLogResponsePayload!
  createNetlifyCliTestEvent(input: OneGraphCreateNetlifyTestEvent!): OneGraphCreateNetlifyTestResponsePayload!

  """Create a shared document"""
  createSharedDocument(input: OneGraphCreateSharedDocumentInput!): OneGraphCreateSharedDocumentResponsePayload!
  createService(input: OneGraphCreateServiceConfigurationMutationInput!): OneGraphServiceMutationResponsePayload!
  updateService(input: OneGraphUpdateServiceInput!): OneGraphServiceMutationResponsePayload!
  deleteService(
    """
    The toplevel GraphQL field that allows accessing this service in the Graph. Must be camelCase
    """
    graphQLField: String!
    appId: String!
  ): OneGraphServiceMutationResponsePayload!
}

input OneGraphMuxAPITokenAuthArg {
  secret: String!
  tokenId: String!
}

input OneGraphMuxAuthArg {
  """
  For advanced usage: if you have separately implemented the Mux OAuth flow and
  have an OAuth token to make calls on behalf of your user, use it with this
  `oauthToken` argument
  """
  oauthToken: String

  """
  For use with a API access token. To generate an access token ID and secret,
  see the [settings page](https://dashboard.mux.com/settings/access-tokens) in
  your Mux dashboard. Will take priority over the `oauthToken` argument if both are provided.
  """
  accessToken: OneGraphMuxAPITokenAuthArg
}

input OneGraphNetlifyAuthArg {
  oauthToken: String!
}

type OneGraphNetlifyCliSession {
  id: String!
  appId: String!
  netlifyUserId: String!
  name: String
  events(
    """The number of events to fetch, maximum of 1000."""
    first: Int = 1000
  ): [OneGraphNetlifyCliSessionEvent!]!
  createdAt: String!
  updatedAt: String!
  lastEventAt: String
  metadata: JSONObject
  status: OneGraphNetlifyCliSessionStatus!

  """Number of milliseconds to wait between heartbeats"""
  cliHeartbeatIntervalMs: Int!
  persistedDocument: OneGraphPersistedQuery
  graphQLSchema: OneGraphGraphQLSchema
}

interface OneGraphNetlifyCliSessionEvent {
  id: String!
  sessionId: String!
  createdAt: String!
}

type OneGraphNetlifyCliSessionLogEvent implements OneGraphNetlifyCliSessionEvent {
  id: String!
  sessionId: String!
  createdAt: String!
  message: String!
}

"""The status of a cli session"""
enum OneGraphNetlifyCliSessionStatus {
  ACTIVE
  INACTIVE
  UNCLAIMED
  TERMINATED
}

type OneGraphNetlifyCliSessionTestEvent implements OneGraphNetlifyCliSessionEvent {
  id: String!
  sessionId: String!
  createdAt: String!
  payload: JSON!
}

type OneGraphNetlifyDirective {
  """The uuid of the operation (normally auto-generated)"""
  id: String!

  """The docstring for this operation"""
  doc: String
}

"""Custom OAuth client for Netlify"""
type OneGraphNetlifyServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String! @deprecated(reason: "Use `serviceInfo` instead.")

  """
  The service information for the service that the clientId and clientSecret belong to
  """
  serviceInfo: OneGraphServiceInfo!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""An object with a globally unique id across all of OneGraph"""
interface OneGraphNode {
  """The id of the object."""
  oneGraphId: ID!

  """List of OneGraphNodes that are linked from this node."""
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!
}

"""Custom OAuth client for Notion"""
type OneGraphNotionServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String! @deprecated(reason: "Use `serviceInfo` instead.")

  """
  The service information for the service that the clientId and clientSecret belong to
  """
  serviceInfo: OneGraphServiceInfo!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

input OneGraphNpmAuthArg {
  """
  An API or OAuth token with sufficient permissions to publish npm packages
  """
  apiToken: String

  """Basic username/password authentication"""
  basic: OneGraphNpmBasicAuth
}

input OneGraphNpmBasicAuth {
  password: String!
  username: String!
}

input OneGraphOpenCollectiveAuthArg {
  """
  For use with a API key. To generate an api key, see the [applications
  page](https://opencollective.com/applications) in your OpenCollective dashboard.
  """
  apiKey: String!
}

input OneGraphOrbitAuthArg {
  """
  For use with a API key. To generate an api key, see the [Account
  Settings](https://app.orbit.love/user/edit) in your Orbit dashboard.
  """
  apiKey: String!
}

"""A OneGraph Org"""
type OneGraphOrg {
  """The id of the OneGraph Org"""
  id: String!

  """The name of the OneGraph Org"""
  name: String!

  """All OneGraph apps belonging to this organization"""
  apps: [OneGraphApp!]!
}

"""Custom OAuth client for Outreach"""
type OneGraphOutreachServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String! @deprecated(reason: "Use `serviceInfo` instead.")

  """
  The service information for the service that the clientId and clientSecret belong to
  """
  serviceInfo: OneGraphServiceInfo!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

input OneGraphPersistAuthsInput {
  """
  Optional OneGraph accessToken to add the auths to. If not provided, OneGraph
  will look for a Bearer token in the Authorization header.
  """
  accessToken: String
  auths: OneGraphServiceAuths!
}

type OneGraphPersistAuthsResponsePayload {
  me: Viewer!
}

"""Persisted query"""
type OneGraphPersistedQuery {
  """The persisted query's id."""
  id: String!

  """The persisted query's query string."""
  query: String!

  """The default variables provided to the query."""
  fixedVariables: JSON

  """
  The list of variables that the caller of the query is allowed to provide.
  """
  freeVariables: [String!]

  """
  The list of operation names that the caller of the query is allowed to
  execute. If the field is null, then all operationNames are allowed.
  """
  allowedOperationNames: [String!]

  """The list of user-defined tags that were added to the query"""
  tags: [String!]

  """The user-defined description that was added to the query"""
  description: String

  """The parent of this query, if it has one."""
  parent: OneGraphPersistedQuery
  documentFacts: OneGraphPersistedQueryFacts!
}

input OneGraphPersistedQueryCacheStrategyArg {
  """Number of seconds to cache the query result for."""
  timeToLiveSeconds: Float!
}

"""List of persisted queries."""
type OneGraphPersistedQueryConnection {
  """List of persisted queries."""
  nodes: [OneGraphPersistedQuery!]!

  """Pagination information"""
  pageInfo: PageInfo!
}

interface OneGraphPersistedQueryDefinition {
  body(
    """
    A list of directives to strip from the body. Only filters directives at
    query, mutation, subscription, and fragment definition locations.
    """
    stripDirectives: [String!]
  ): String!
  netlifyDirective: OneGraphNetlifyDirective
}

type OneGraphPersistedQueryFacts {
  """
  The list of definitions (operations and fragments) that appear in the persisted document.
  """
  definitions(
    """List of filters, applied with logical AND."""
    filter: OneGraphPersistedQueryFactsDefinitionFilter
  ): [OneGraphPersistedQueryDefinition!]!

  """
  The list of operations of type Query that appear in the persisted document.
  """
  queryOperations(
    """List of filters, applied with logical AND."""
    filter: OneGraphPersistedQueryFactsDefinitionFilter
  ): [OneGraphPersistedQueryOperation!]!

  """
  The list of operations of type Mutation that appear in the persisted document.
  """
  mutationOperations(
    """List of filters, applied with logical AND."""
    filter: OneGraphPersistedQueryFactsDefinitionFilter
  ): [OneGraphPersistedQueryOperation!]!

  """
  The list of operations of type Subscription that appear in the persisted document.
  """
  subscriptionOperations(
    """List of filters, applied with logical AND."""
    filter: OneGraphPersistedQueryFactsDefinitionFilter
  ): [OneGraphPersistedQueryOperation!]!

  """The list of operations that appear in the persisted document."""
  fragments(
    """List of filters, applied with logical AND."""
    filter: OneGraphPersistedQueryFactsDefinitionFilter
  ): [OneGraphPersistedQueryFragment!]!

  """The list of operations that appear in the persisted document."""
  operations(
    """List of filters, applied with logical AND."""
    filter: OneGraphPersistedQueryFactsDefinitionFilter
  ): [OneGraphPersistedQueryOperation!]!
}

input OneGraphPersistedQueryFactsDefinitionFilter {
  name: OneGraphPersistedQueryFactsDefinitionStringFilter
}

input OneGraphPersistedQueryFactsDefinitionStringFilter {
  notIn: [String!]
  in: [String!]
  notEqualTo: String
  equalTo: String
}

type OneGraphPersistedQueryFragment implements OneGraphPersistedQueryDefinition {
  body(
    """
    A list of directives to strip from the body. Only filters directives at
    query, mutation, subscription, and fragment definition locations.
    """
    stripDirectives: [String!]
  ): String!
  name: String!
  netlifyDirective: OneGraphNetlifyDirective
  typeCondition: String!
}

type OneGraphPersistedQueryOperation implements OneGraphPersistedQueryDefinition {
  body(
    """
    A list of directives to strip from the body. Only filters directives at
    query, mutation, subscription, and fragment definition locations.
    """
    stripDirectives: [String!]
  ): String!
  name: String
  netlifyDirective: OneGraphNetlifyDirective
  opType: OneGraphPersistedQueryOperationType!
  variables: [OneGraphPersistedQueryVariableDefinition!]!
}

enum OneGraphPersistedQueryOperationType {
  QUERY
  MUTATION
  SUBSCRIPTION
}

type OneGraphPersistedQueryResponsePayload {
  persistedQuery: OneGraphPersistedQuery!
}

input OneGraphPersistedQueryTokenInput {
  """Id for the app that you want to persist queries on."""
  appId: String!
}

type OneGraphPersistedQueryVariableDefinition {
  name: String!
  typeString: String!
  defaultValue: String
}

"""Custom OAuth client for Product Hunt"""
type OneGraphProductHuntServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String! @deprecated(reason: "Use `serviceInfo` instead.")

  """
  The service information for the service that the clientId and clientSecret belong to
  """
  serviceInfo: OneGraphServiceInfo!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

input OneGraphPromotePreviewSalesforceSchemaInput {
  """The id of the salesforce schema to promote."""
  salesforceSchemaId: String!

  """App to add the preview salesforce schema to."""
  appId: String!
}

type OneGraphPromotePreviewSalesforceSchemaPayload {
  """App that the salesforce schema was added to."""
  app: OneGraphApp

  """The salesforce schema that was promoted."""
  salesforceSchema: OneGraphSalesforceSchema!
}

"""A query stored in Onegraph"""
type OneGraphQuery {
  """The id of the GraphQL query"""
  id: String!

  """The id of the app that this GraphQL query belongs to"""
  appId: String!

  """
  Whether a GraphQL query is globally enabled/disabled. Note that even if the
  query is enabled, a corresponding auth_token must share a tag with this query to use it.
  """
  enabled: Boolean!

  """
  Whether a GraphQL query is shared and publicly viewable, including all of its meta-information.
  """
  public: Boolean!

  """The version (currently a hash of the body) of the GraphQL query"""
  version: String!

  """The body of the GraphQL query"""
  body: String!

  """The name of the GraphQL query"""
  name: String!

  """An optional description of the GraphQL query"""
  description: String

  """The tags (for permissions and organization) of the GraphQL query"""
  tags: [String!]!

  """What time this query was created"""
  createdAtTs: String!

  """What time this query was created in milliseconds from the epoch"""
  createdAtMs: Int!
}

input OneGraphQueryChainArgumentDependencyInput {
  functionFromScript: String!
  maxRecur: Int = 1
  ifMissing: OneGraphQueryChainIfMissingEnum
  ifList: OneGraphQueryChainIfListEnum
  fromRequestIds: [String!]!
  name: String!
}

enum OneGraphQueryChainIfListEnum {
  FIRST
  LAST
  ALL
  EACH
}

enum OneGraphQueryChainIfMissingEnum {
  ERROR
  ALLOW
  SKIP
}

input OneGraphQueryChainInput {
  """
  If true, will copy errors from the `OneGraphQueryChainMutationResult.result`
  field to the top-level `errors` field. Defaults to true.
  """
  liftErrors: Boolean = true
  requests: [OneGraphQueryChainRequestInput!]!
  scriptDependencies: [OneGraphQueryChainScriptDependencyInput!]
  script: String
}

type OneGraphQueryChainMutationArgumentDependencyConsoleLog {
  """The log level, `debug`, `info`, `warn`, or `error`"""
  level: String!

  """The log body."""
  body: [JSON!]!
}

type OneGraphQueryChainMutationArgumentDependencyError {
  """The name of the error"""
  name: String

  """The error message"""
  message: String

  """The error stack, as a string"""
  stackString: String
}

type OneGraphQueryChainMutationArgumentDependencyResult {
  """The name of the argument dependency"""
  name: String!

  """The return values of the argument dependency script."""
  returnValues: [JSON!]

  """Logs captured by calling `console.log` in the script."""
  logs: [OneGraphQueryChainMutationArgumentDependencyConsoleLog!]!

  """Error, if there was an error evaluating the script."""
  error: OneGraphQueryChainMutationArgumentDependencyError
}

type OneGraphQueryChainMutationPayload {
  results: [OneGraphQueryChainMutationResult!]!
}

type OneGraphQueryChainMutationResult {
  """The request."""
  request: OneGraphQueryChainRequest!

  """Debug information for the argument dependencies"""
  argumentDependencies: [OneGraphQueryChainMutationArgumentDependencyResult!]!

  """The result of the query"""
  result: [JSON]!
}

type OneGraphQueryChainRequest {
  """The id of the request"""
  id: String!
}

input OneGraphQueryChainRequestInput {
  argumentDependencies: [OneGraphQueryChainArgumentDependencyInput!] = []
  variables: [OneGraphQueryChainVariableInput!] = []

  """The query to run. Must provide one of `query` or `operationName`."""
  query: String

  """
  The operationName of the query in the document to run. Must provide one of `query` or `operationName`.
  """
  operationName: String

  """
  The id of the query. If you provide a script in the argument dependencies for
  a request that depends on this query, the data from this query will be
  provided as `{"$ID": query-result}`.  This will typically be the same as the
  operation name, but could be different if your chain needs to use the same
  query in multiple requests.
  """
  id: String!
}

"""
Dependencies from npm. Only allows packages that don't have any dependencies of
their own. Packages that rely on filesystem APIs may not work. Must provide the
exact version string.
"""
input OneGraphQueryChainScriptDependencyInput {
  """
  The package's version string, e.g. `4.17.21`. Only accepts exact version strings.
  """
  version: String!

  """The name of the package, e.g. `lodash`."""
  name: String!
}

input OneGraphQueryChainVariableInput {
  value: JSON
  name: String!
}

"""Custom OAuth client for QuickBooks"""
type OneGraphQuickbooksServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String! @deprecated(reason: "Use `serviceInfo` instead.")

  """
  The service information for the service that the clientId and clientSecret belong to
  """
  serviceInfo: OneGraphServiceInfo!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

input OneGraphRemoveCORSOriginFromAppInput {
  corsOrigin: String!
  appId: String!
}

type OneGraphRemoveCORSOriginFromAppResponsePayload {
  app: OneGraphApp!
}

input OneGraphRemoveCustomCorsOriginFromAppInput {
  customCorsOrigin: String!
  appId: String!
}

type OneGraphRemoveCustomCorsOriginFromAppResponsePayload {
  app: OneGraphApp!
}

input OneGraphRemoveExternalGraphQLSchemaInput {
  """Id of the external schema to update."""
  id: String!
}

type OneGraphRemoveExternalGraphQLSchemaPayload {
  """App that the external schema was removed from."""
  app: OneGraphApp

  """The external schema that was removed."""
  externalGraphQLSchema: OneGraphExternalGraphQLSchema!
}

input OneGraphRemoveExternalHoneycombConfigInput {
  """Id of the app that the external Honeycomb config belongs to."""
  appId: String!
}

type OneGraphRemoveExternalHoneycombConfigPayload {
  """App that the external schema was removed from."""
  app: OneGraphApp
}

input OneGraphRemoveGoogleSiteVerificationInput {
  """Id of the app to remove the Google Site Verification from."""
  appId: String!
}

type OneGraphRemoveGoogleSiteVerificationPayload {
  """App that the google site verification is being removed from."""
  app: OneGraphApp
}

input OneGraphRemoveNetlifySiteFromAppCORSOriginsInput {
  netlifySite: String!
  appId: String!
}

type OneGraphRemoveNetlifySiteFromAppCORSOriginsResponsePayload {
  app: OneGraphApp!
}

input OneGraphRemoveSalesforceSchemaInput {
  """Id of the Salesforce schema to update."""
  id: String!
}

type OneGraphRemoveSalesforceSchemaPayload {
  """App that the Salesforce schema was removed from."""
  app: OneGraphApp

  """The Salesforce schema that was removed."""
  salesforceSchema: OneGraphSalesforceSchema!
}

input OneGraphRemoveSlackEventWebhookInput {
  """Unique onegraph id of the slack event webhook."""
  id: String!
}

type OneGraphRemoveSlackEventWebhookPayload {
  """App that the slack event webhook belongs to."""
  app: OneGraphApp

  """The slack event webhook that was removed."""
  slackEventWebhook: OneGraphSlackEventWebhook!

  """Custom OAuth client that the slack event webhook belonged to."""
  serviceAuth: OneGraphServiceAuth!
}

input OneGraphSalesforceOAuthArg {
  instanceUrl: String!
  token: String!
}

type OneGraphSalesforceSchema {
  """Id of the salesforce schema"""
  id: String!

  """The id of the OneGraph app that the salesforce schema belongs to."""
  appId: String!

  """The datetime that the schema was added, in rfc3339 format."""
  createdAt: String!

  """The datetime that the schema was last updated, in rfc3339 format."""
  updatedAt: String!

  """Salesforce instanceUrl"""
  instanceUrl: String!

  """Salesforce Organization ID"""
  salesforceOrgId: String

  """Whether this is a preview of a change to a Salesforce schema."""
  isPreview: Boolean! @deprecated(reason: "There is no longer a distinction between preview and non-preview salesforce schemas. Use `createGraphQLSchema` with `salesforceSchemaId` to get a schema you can test with.")

  """The previous salesforce schema, if there was one."""
  previousSalesforceSchema: OneGraphSalesforceSchema
}

"""Custom OAuth client for Salesforce"""
type OneGraphSalesforceServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String! @deprecated(reason: "Use `serviceInfo` instead.")

  """
  The service information for the service that the clientId and clientSecret belong to
  """
  serviceInfo: OneGraphServiceInfo!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""Information about a subscription to Salesforce."""
type OneGraphSalesforceSubscriptionInfo {
  """
  The Id of the Salesforce Organization that this subscription is subscription to
  """
  organizationId: String!
}

"""Custom OAuth client for Sanity"""
type OneGraphSanityServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String! @deprecated(reason: "Use `serviceInfo` instead.")

  """
  The service information for the service that the clientId and clientSecret belong to
  """
  serviceInfo: OneGraphServiceInfo!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""A OneGraph Server Info"""
type OneGraphServerInfo {
  sha: String!
  buildNumber: Int!
  migrationVersion: Int!
}

"""Custom OAuth client for a service"""
interface OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String! @deprecated(reason: "Use `serviceInfo instead`")

  """
  The service information for the service that the clientId and clientSecret belong to
  """
  serviceInfo: OneGraphServiceInfo!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

input OneGraphServiceAuths {
  zendeskAPITokenAuth: OneGraphZendeskAPITokenAuth
  zeitOAuthToken: String
  youtubeOAuthToken: String

  """
  A Wordpress bearer token. This arg is compatible with the `authToken` that is
  passed as an `Authorization` header in [wp-graphql-jwt-authentication
  plugin](https://github.com/wp-graphql/wp-graphql-jwt-authentication), or any
  other plugin that uses a bearer token in the `Authorization` header. 
  """
  wordpressBearerToken: String
  uspsAPIAuth: OneGraphUSPSAPIAuth
  upsAPIAuth: OneGraphUPSAPIAuth
  twilioAuth: OneGraphTwilioAuth
  trelloTokenAuth: OneGraphTrelloTokenAuth
  stripeOAuthToken: String
  stripeConnectAuth: OneGraphStripeConnectAuthArg
  spotifyOAuthToken: String
  slackOAuthToken: String
  shopify: OneGraphShopifyAuthArg
  salesforceOAuth: OneGraphSalesforceOAuthArg
  productHuntOAuthToken: String
  orbit: OneGraphOrbitAuthArg
  openCollective: OneGraphOpenCollectiveAuthArg
  onegraphToken: String
  npmAuth: OneGraphNpmAuthArg
  netlifyAuth: OneGraphNetlifyAuthArg
  muxAuth: OneGraphMuxAuthArg
  mixpanelApiSecret: String
  logdnaServiceAuth: OneGraphLogdnaServiceAuthArg
  intercomOAuthToken: String
  hubspotOAuthToken: String
  graphCmsToken: String
  googleTranslateOAuthToken: String
  googleSearchConsoleOAuthToken: String
  googleMapsKey: String
  googleDocsOAuthToken: String
  googleComputeOAuthToken: String
  googleCalendarOAuthToken: String
  googleAdsAuth: OneGraphGoogleAdsAuthArg
  googleOAuthToken: String
  gongAuth: OneGraphGongAuthArg
  gmailOAuthToken: String
  gitHubOAuthToken: String
  firebaseOAuthToken: String
  fedexAPIAuth: OneGraphFedexAPIAuth
  facebookOAuthToken: String
  dropboxOAuthToken: String
  dribbbleOAuthToken: String
  devToAuth: OneGraphDevToAuthArg
  crunchbaseUserKey: String
  cloudflareUserAuth: OneGraphCloudflareUserAuthArg
  clearbitAuth: String
  chargebee: OneGraphChagebeeAuthArg
  brexAuth: String
  apollo: OneGraphApolloAuthArg
  airtableApiKey: String
}

"""Services supported by OneGraph."""
enum OneGraphServiceEnum {
  CUSTOM
  ADROLL
  ASANA
  BOX
  CLOUDINARY
  CONTENTFUL
  DEV_TO
  DOCUSIGN
  DRIBBBLE
  DROPBOX
  EGGHEADIO
  EVENTIL
  FACEBOOK
  FIREBASE
  GITHUB
  GMAIL
  GONG
  GOOGLE
  GOOGLE_ADS
  GOOGLE_ANALYTICS
  GOOGLE_CALENDAR
  GOOGLE_COMPUTE
  GOOGLE_DOCS
  GOOGLE_SEARCH_CONSOLE
  GOOGLE_TRANSLATE
  HUBSPOT
  INTERCOM
  MAILCHIMP
  MEETUP
  NETLIFY
  NOTION
  OUTREACH
  PRODUCT_HUNT
  QUICKBOOKS
  SALESFORCE
  SANITY
  SHOPIFY_ADMIN
  SHOPIFY_STOREFRONT
  SLACK
  SPOTIFY
  STRIPE
  TWITCH_TV
  TWILIO
  YNAB
  YOUTUBE
  ZEIT
  ZENDESK
  TRELLO
  TWITTER
  AIRTABLE
  APOLLO
  BREX
  BUNDLEPHOBIA
  CHARGEBEE
  CLEARBIT
  CLOUDFLARE
  CRUNCHBASE
  DESCURI
  FEDEX
  GOOGLE_MAPS
  GRAPHCMS
  IMMIGRATION_GRAPH
  LOGDNA
  MIXPANEL
  MUX
  NPM
  ONEGRAPH
  ORBIT
  OPEN_COLLECTIVE
  RSS
  UPS
  USPS
  WORDPRESS
}

"""Services supported by OneGraph."""
enum OneGraphServiceEnumArg {
  ADROLL
  ASANA
  BOX
  CLOUDINARY
  CONTENTFUL
  DEV_TO
  DOCUSIGN
  DRIBBBLE
  DROPBOX
  EGGHEADIO
  EVENTIL
  FACEBOOK
  FIREBASE
  GITHUB
  GMAIL
  GONG
  GOOGLE
  GOOGLE_ADS
  GOOGLE_ANALYTICS
  GOOGLE_CALENDAR
  GOOGLE_COMPUTE
  GOOGLE_DOCS
  GOOGLE_SEARCH_CONSOLE
  GOOGLE_TRANSLATE
  HUBSPOT
  INTERCOM
  MAILCHIMP
  MEETUP
  NETLIFY
  NOTION
  OUTREACH
  PRODUCT_HUNT
  QUICKBOOKS
  SALESFORCE
  SANITY
  SHOPIFY_ADMIN
  SHOPIFY_STOREFRONT
  SLACK
  SPOTIFY
  STRIPE
  TWITCH_TV
  TWILIO
  YNAB
  YOUTUBE
  ZEIT
  ZENDESK
  TRELLO
  TWITTER
  AIRTABLE
  APOLLO
  BREX
  BUNDLEPHOBIA
  CHARGEBEE
  CLEARBIT
  CLOUDFLARE
  CRUNCHBASE
  DESCURI
  FEDEX
  GOOGLE_MAPS
  GRAPHCMS
  IMMIGRATION_GRAPH
  LOGDNA
  MIXPANEL
  MUX
  NPM
  ONEGRAPH
  ORBIT
  OPEN_COLLECTIVE
  RSS
  UPS
  USPS
  WORDPRESS
}

"""Information about a service that OneGraph supports."""
type OneGraphServiceInfo implements OneGraphNode {
  id: String!
  service: OneGraphServiceEnum!
  friendlyServiceName: String!

  """GraphQL field identifying the service in the schema"""
  graphQLField: String!

  """
  Service string that can be provided in the URL when going through the oauth flow.
  """
  slug: String!
  supportsOauthLogin: Boolean!
  supportsCustomServiceAuth: Boolean!
  supportsCustomRedirectUri: Boolean!
  supportsTestFlow: Boolean!
  availableScopes: [OneGraphServiceScope!]

  """A short-lived svg image url of the logo for the service. May be null."""
  logoUrl(style: OneGraphAppLogoStyleEnum = DEFAULT): String

  """Whether Netlify API Authentication is enabled for this service"""
  netlifyApiAuthenticationEnabled: Boolean!

  """Whether Netlify Graph is enabled for this service"""
  netlifyGraphEnabled: Boolean!

  """
  The prefix that all GraphQL types addded by this service will have, e.g. `GitHub`.
  """
  typePrefix: String!

  """The GraphQL field in the schema's root query for this service."""
  field: String!

  """
  The name of the root field for this service in the GraphQL schema, e.g. `gitHub`.
  """
  fieldName: String!

  """The OAuth2 configuration for the service"""
  oauthConfig: OneGraphServiceOAuthConfiguration

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  oauthCallbackURL: String
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

input OneGraphServiceInfoFilter {
  """Check for any expression in this list"""
  or: [OneGraphServiceInfoFilter!]

  """Filter by the service."""
  service: OneGraphServiceInfoServiceFilter

  """Filter for services that support Netlify Graph"""
  supportsNetlifyGraph: Boolean

  """Filter for services that support Netlify Api Authentication"""
  supportsNetlifyApiAuthentication: Boolean

  """Filter for services that support custom service auth"""
  supportsCustomServiceAuth: Boolean

  """Filter for services that support OAuth login"""
  supportsOauthLogin: Boolean
}

input OneGraphServiceInfoServiceFilter {
  """
  The GraphQL fields identifying services to include in the list of services
  """
  graphQLFieldsIn: [String!]

  """Filter for services that are in the list of services"""
  in: [OneGraphServiceEnumArg!]
}

"""GraphQL types that support linking"""
enum OneGraphServiceLinkGraphQLTypeEnum {
  GitHubIssue
  GitHubIssueComment
  GitHubUser
  HubspotContact
  IntercomUser
  SalesforceAccount
  SalesforceCase
  SalesforceCaseComment
  SalesforceContact
  SalesforceFeedComment
  SalesforceFeedItem
  SalesforceLead
  SalesforceUser
  StripeCustomer
  StripeRefund
  ZendeskUser
}

type OneGraphServiceLinkNode {
  type: String!
  id: String!
}

input OneGraphServiceLinkNodeArg {
  id: String!
  type: OneGraphServiceLinkGraphQLTypeEnum!
}

"""Information about a service."""
type OneGraphServiceMetadata {
  id: String!
  service: OneGraphServiceEnum!
  friendlyServiceName: String!
  graphQLField: String!
  isLoggedIn: Boolean!
  usedTestFlow: Boolean!
  foreignUserId: String

  """
  Bearer token that can be used to query the underlying API directly. This field
  will always be null unless the OneGraph App has enabled sharing tokens for its
  custom OAuth client.
  """
  bearerToken: String
  serviceInfo: OneGraphServiceInfo!

  """
  The scopes that the user granted for this service. This is a best estimate of
  the scopes that were granted. Most services do not have a way to query the
  scopes on an auth, and some services do not return information about the
  scopes that were granted in the auth flow.
  """
  grantedScopes: [OneGraphServiceMetadataGrantedScope!]
}

"""A scope that has been granted to the user"""
type OneGraphServiceMetadataGrantedScope {
  """The name of the scope that the underlying service uses."""
  scope: String!

  """
  Details about the scope. This may be null if OneGraph has not mapped out the scope.
  """
  scopeInfo: OneGraphServiceScope
}

type OneGraphServiceMutationResponsePayload {
  """The app that is associated with the Netlify site."""
  app: OneGraphApp!

  """The service that this mutation refers to."""
  service: OneGraphServiceInfo
}

type OneGraphServiceOAuthConfiguration {
  """
  The Authorization URI for obtaining an authorization grant,
                  according to RFC6749 Section 3.1
  """
  authorizationUri: String!

  """
  The Token URI for obtaining an access token by presenting its authorization
  grant or refresh token, according to RFC6749 Section 3.2
  """
  tokenUri: String!

  """
  The registered client identifier for the service, issued by the service upon
  registration, according to RFC6749 Section 2.2
  """
  clientId: String!

  """
  The registered client secret, issued by the service upon registration, according to RFC6749 Section 2.3 
  """
  clientSecret: String!

  """
  OAuth scopes supported by the service, according to RFC6749 Section 1.4
  """
  scopes: [OneGraphServiceScope!]!
}

"""
Root fields for the OneGraph service. Used by OneGraph to build OneGraph.
"""
type OneGraphServiceQuery {
  services(filter: OneGraphServiceInfoFilter, appId: String): [OneGraphServiceInfo!]!
  shortenedUrl(id: String!): OneGraphShortenedQuery
  queries: [OneGraphQuery!]!
  searchQueries(query: String!): [OneGraphQuery!]!
  apps: [OneGraphApp!]!
  app(
    """App id"""
    id: String!
  ): OneGraphApp!
  orgs: [OneGraphOrg!]!
  org(
    """Org id"""
    id: String!
  ): OneGraphOrg!
  serverInfo: OneGraphServerInfo!
  authGuardianPreview(input: OneGraphSetAuthGuardianInput!): OneGraphSetAuthGuardianResponsePayload

  """
  An identity function. The field will return whatever is provided as the input.
  """
  identity(
    """The input that should be returned."""
    input: JSON
  ): JSON

  """A graphql subscription."""
  graphQLSubscription(
    """The unique id for the app."""
    appId: String!

    """The unique id for the subscription."""
    id: String!
  ): OneGraphAppSubscription

  """Fetch a single persisted query by its id."""
  persistedQuery(
    """The id of the app that the persisted query belongs to."""
    appId: String!

    """The id of the persisted query."""
    id: String!
  ): OneGraphPersistedQuery!

  """Find a GraphQL schema by its id."""
  graphQLSchema(
    """The id of the app that the GraphQL schema belongs to."""
    appId: String!

    """The id of the GraphQL schema."""
    id: String!
  ): OneGraphGraphQLSchema!
  authlifyToken(
    """
    The appId that the token belongs to. If not provided, it will be looked up from the token.
    """
    appId: String
    authlifyTokenId: String!
  ): AuthlifyToken!

  """Personal access token lookup"""
  personalToken(accessToken: String!): OneGraphAccessToken
  netlifyCliEvents(
    """The number of events to fetch. The maximum is 1000."""
    first: Int = 1000
    sessionId: String!
  ): [OneGraphNetlifyCliSessionEvent!]!

  """Netlify CLI sessions, orderd by createdAt descending."""
  netlifyCliSessionsByAppId(
    """The number of sessions to fetch. The maximum is 50."""
    first: Int = 10
    appId: String!
  ): [OneGraphNetlifyCliSession!]!

  """Get a Netlify CLI session by its id."""
  netlifyCliSession(id: String!): OneGraphNetlifyCliSession!

  """Get a sharedDocument by its id"""
  sharedDocument(id: String!): OneGraphSharedDocument!

  """Get sharedDocument"""
  sharedDocuments(
    """
    The number of shared documents to fetch. Defaults to 10, maximum of 100.
    """
    first: Int = 10
    filter: OneGraphSharedDocumentsFilter
    appId: String
  ): OneGraphSharedDocumentConnection!
}

"""An OAuth scope that the service supports."""
type OneGraphServiceScope {
  category: String
  scope: String!
  display: String!
  isDefault: Boolean!
  isRequired: Boolean!
  description: String!
  title: String
}

"""An OAuth scope that the service supports."""
input OneGraphServiceScopeInput {
  title: String
  description: String!
  isRequired: Boolean!
  isDefault: Boolean!
  display: String!
  scope: String!
  category: String
}

"""Information about OneGraph services"""
type OneGraphServicesMetadata {
  loggedInServices: [OneGraphServiceMetadata!]!
  adroll: OneGraphServiceMetadata!
  asana: OneGraphServiceMetadata!
  box: OneGraphServiceMetadata!
  cloudinary: OneGraphServiceMetadata!
  contentful: OneGraphServiceMetadata!
  devTo: OneGraphServiceMetadata!
  docusign: OneGraphServiceMetadata!
  dribbble: OneGraphServiceMetadata!
  dropbox: OneGraphServiceMetadata!
  eggheadio: OneGraphServiceMetadata!
  eventil: OneGraphServiceMetadata!
  facebookBusiness: OneGraphServiceMetadata!
  firebase: OneGraphServiceMetadata!
  gitHub: OneGraphServiceMetadata!
  gmail: OneGraphServiceMetadata!
  gong: OneGraphServiceMetadata!
  google: OneGraphServiceMetadata!
  googleAds: OneGraphServiceMetadata!
  googleAnalytics: OneGraphServiceMetadata!
  googleCalendar: OneGraphServiceMetadata!
  googleCompute: OneGraphServiceMetadata!
  googleDocs: OneGraphServiceMetadata!
  googleSearchConsole: OneGraphServiceMetadata!
  googleTranslate: OneGraphServiceMetadata!
  hubspot: OneGraphServiceMetadata!
  intercom: OneGraphServiceMetadata!
  mailchimp: OneGraphServiceMetadata!
  meetup: OneGraphServiceMetadata!
  netlify: OneGraphServiceMetadata!
  notion: OneGraphServiceMetadata!
  outreach: OneGraphServiceMetadata!
  productHunt: OneGraphServiceMetadata!
  quickbooks: OneGraphServiceMetadata!
  salesforce: OneGraphServiceMetadata!
  sanity: OneGraphServiceMetadata!
  shopifyAdmin: OneGraphServiceMetadata!
  shopifyStorefront: OneGraphServiceMetadata!
  slack: OneGraphServiceMetadata!
  spotify: OneGraphServiceMetadata!
  stripe: OneGraphServiceMetadata!
  twitchTv: OneGraphServiceMetadata!
  twilio: OneGraphServiceMetadata!
  ynab: OneGraphServiceMetadata!
  youTube: OneGraphServiceMetadata!
  zeit: OneGraphServiceMetadata!
  zendesk: OneGraphServiceMetadata!
  trello: OneGraphServiceMetadata!
  twitter: OneGraphServiceMetadata!
  airtable: OneGraphServiceMetadata!
  apollo: OneGraphServiceMetadata!
  brex: OneGraphServiceMetadata!
  bundlephobia: OneGraphServiceMetadata!
  chargebee: OneGraphServiceMetadata!
  clearbit: OneGraphServiceMetadata!
  cloudflare: OneGraphServiceMetadata!
  crunchbase: OneGraphServiceMetadata!
  descuri: OneGraphServiceMetadata!
  fedex: OneGraphServiceMetadata!
  googleMaps: OneGraphServiceMetadata!
  graphcms: OneGraphServiceMetadata!
  immigrationGraph: OneGraphServiceMetadata!
  logdna: OneGraphServiceMetadata!
  mixpanel: OneGraphServiceMetadata!
  mux: OneGraphServiceMetadata!
  npm: OneGraphServiceMetadata!
  onegraph: OneGraphServiceMetadata!
  orbit: OneGraphServiceMetadata!
  openCollective: OneGraphServiceMetadata!
  rss: OneGraphServiceMetadata!
  ups: OneGraphServiceMetadata!
  usps: OneGraphServiceMetadata!
  wordpress: OneGraphServiceMetadata!
  toolshop: OneGraphServiceMetadata!
  facebook: OneGraphServiceMetadata! @deprecated(reason: "Use facebookBusiness.")
}

input OneGraphServiceUserIds {
  """User id for Adroll"""
  adroll: String

  """User id for Asana"""
  asana: String

  """User id for Box"""
  box: String

  """User id for Cloudinary"""
  cloudinary: String

  """User id for Contentful"""
  contentful: String

  """User id for Dev.to"""
  devTo: String

  """User id for Docusign"""
  docusign: String

  """User id for Dribbble"""
  dribbble: String

  """User id for Dropbox"""
  dropbox: String

  """User id for Egghead.io"""
  eggheadio: String

  """User id for Eventil"""
  eventil: String

  """User id for Facebook"""
  facebookBusiness: String

  """User id for Firebase"""
  firebase: String

  """User id for GitHub"""
  gitHub: String

  """User id for Gmail"""
  gmail: String

  """User id for Gong"""
  gong: String

  """User id for Google"""
  google: String

  """User id for Google Ads"""
  googleAds: String

  """User id for Google Analytics"""
  googleAnalytics: String

  """User id for Google Calendar"""
  googleCalendar: String

  """User id for Google Compute"""
  googleCompute: String

  """User id for Google Docs"""
  googleDocs: String

  """User id for Google Search Console"""
  googleSearchConsole: String

  """User id for Google Translate"""
  googleTranslate: String

  """User id for Hubspot"""
  hubspot: String

  """User id for Intercom"""
  intercom: String

  """User id for Mailchimp"""
  mailchimp: String

  """User id for Meetup"""
  meetup: String

  """User id for Netlify"""
  netlify: String

  """User id for Notion"""
  notion: String

  """User id for Outreach"""
  outreach: String

  """User id for Product Hunt"""
  productHunt: String

  """User id for QuickBooks"""
  quickbooks: String

  """User id for Salesforce"""
  salesforce: String

  """User id for Sanity"""
  sanity: String

  """User id for Shopify Admin"""
  shopifyAdmin: String

  """User id for Shopify Storefront"""
  shopifyStorefront: String

  """User id for Slack"""
  slack: String

  """User id for Spotify"""
  spotify: String

  """User id for Stripe"""
  stripe: String

  """User id for Twitch"""
  twitchTv: String

  """User id for Twilio"""
  twilio: String

  """User id for You Need a Budget"""
  ynab: String

  """User id for YouTube"""
  youTube: String

  """User id for Vercel"""
  zeit: String

  """User id for Zendesk"""
  zendesk: String

  """User id for Trello"""
  trello: String

  """User id for Twitter"""
  twitter: String

  """User id for Toolshop"""
  toolshop: String
}

type OneGraphSetAppJwtPreflightQueryResponsePayload {
  app: OneGraphApp!
}

input OneGraphSetAppNetlifySiteNamesInput {
  netlifySiteNames: [String!]!
}

type OneGraphSetAppNetlifySiteNamesResponsePayload {
  app: OneGraphApp!
}

input OneGraphSetAuthGuardianActiveInput {
  active: Boolean!
}

type OneGraphSetAuthGuardianActiveResponsePayload {
  app: OneGraphApp
}

input OneGraphSetAuthGuardianInput {
  rules: [OneGraphSetAuthGuardianRuleInput!]!
}

type OneGraphSetAuthGuardianResponsePayload {
  javascript: String
  graphQL: String
  jwt: String
  rules: JSON
}

input OneGraphSetAuthGuardianRuleConditionContentfulInput {
  confirmed: Boolean
  activated: Boolean
  loggedIn: Boolean
  email: OneGraphSetAuthGuardianRuleEmailConditionInput
}

input OneGraphSetAuthGuardianRuleConditionEggheadioInput {
  isCommunityMember: Boolean
  isInstructor: Boolean
  isPro: Boolean
  loggedIn: Boolean
  email: OneGraphSetAuthGuardianRuleEmailConditionInput
}

input OneGraphSetAuthGuardianRuleConditionGitHubInput {
  isCollaboratorOnRepositoryWhereFullName: String
  isMemberOfOrganizationNamed: String
  hasStarredARepositoryWithAFullNameOf: String
  hasCommittedToRepositoryWithAFullNameOf: String
  login: OneGraphSetAuthGuardianRuleStringConditionInput
  loginStatus: Boolean
  hasAnEmailThat: OneGraphSetAuthGuardianRuleEmailConditionInput
}

input OneGraphSetAuthGuardianRuleConditionGmailInput {
  loginStatus: Boolean
  hasAnEmailThat: OneGraphSetAuthGuardianRuleEmailConditionInput
}

input OneGraphSetAuthGuardianRuleConditionInput {
  vercel: OneGraphSetAuthGuardianRuleConditionZeitInput
  twitter: OneGraphSetAuthGuardianRuleConditionTwitterInput
  twitch: OneGraphSetAuthGuardianRuleConditionTwitchTvInput
  stripe: OneGraphSetAuthGuardianRuleConditionStripeInput
  spotify: OneGraphSetAuthGuardianRuleConditionSpotifyInput
  salesforce: OneGraphSetAuthGuardianRuleConditionSalesforceInput
  netlify: OneGraphSetAuthGuardianRuleConditionNetlifyInput
  gmail: OneGraphSetAuthGuardianRuleConditionGmailInput
  gitHub: OneGraphSetAuthGuardianRuleConditionGitHubInput
  eggheadio: OneGraphSetAuthGuardianRuleConditionEggheadioInput
  contentful: OneGraphSetAuthGuardianRuleConditionContentfulInput
  always: Boolean
}

input OneGraphSetAuthGuardianRuleConditionNetlifyInput {
  loginStatus: Boolean
  hasAnEmailThat: OneGraphSetAuthGuardianRuleEmailConditionInput
}

input OneGraphSetAuthGuardianRuleConditionSalesforceInput {
  loginStatus: Boolean
  hasAnEmailThat: OneGraphSetAuthGuardianRuleEmailConditionInput
}

input OneGraphSetAuthGuardianRuleConditionSpotifyInput {
  loginStatus: Boolean
  hasAnEmailThat: OneGraphSetAuthGuardianRuleEmailConditionInput
}

input OneGraphSetAuthGuardianRuleConditionStripeInput {
  loginStatus: Boolean
  hasAPrimaryAccountEmailThat: OneGraphSetAuthGuardianRuleEmailConditionInput
  hasAnAccountIdThat: OneGraphSetAuthGuardianRuleStringConditionInput
}

input OneGraphSetAuthGuardianRuleConditionTwitchTvInput {
  loginStatus: Boolean
  hasVerifiedEmail: Boolean
  hasAnEmailThat: OneGraphSetAuthGuardianRuleEmailConditionInput
}

input OneGraphSetAuthGuardianRuleConditionTwitterInput {
  hasTwitterVerifiedStatus: Boolean
  screenName: OneGraphSetAuthGuardianRuleStringConditionInput
  loginStatus: Boolean
}

input OneGraphSetAuthGuardianRuleConditionZeitInput {
  loginStatus: Boolean
  hasAnEmailThat: OneGraphSetAuthGuardianRuleEmailConditionInput
}

input OneGraphSetAuthGuardianRuleEffectHasuraSetSessionVariableInput {
  value: OneGraphSetAuthGuardianRuleEffectJsonValueInput!
  name: String!
}

input OneGraphSetAuthGuardianRuleEffectInput {
  onExpressJsAddPermissions: [String!]
  onApolloServerAddRoles: [String!]
  onNetlifyAddUserRoles: [String!]
  onHasuraSetUserId: OneGraphSetAuthGuardianRuleEffectJsonValueInput
  onHasuraSetDefaultRole: String
  onHasuraSetSessionVariable: OneGraphSetAuthGuardianRuleEffectHasuraSetSessionVariableInput
  onHasuraAddRoles: [String!]
  inTheJsonAddToListAtPath: OneGraphSetAuthGuardianRuleEffectSetValueInput
  inTheJsonRemoveValueAtPath: String
  inTheJsonSetValueAtPath: OneGraphSetAuthGuardianRuleEffectSetValueInput
}

input OneGraphSetAuthGuardianRuleEffectJsonValueInput {
  json: String
  builtInValue: OneGraphAuthGuardianBuiltInValue
}

input OneGraphSetAuthGuardianRuleEffectSetValueInput {
  value: OneGraphSetAuthGuardianRuleEffectJsonValueInput!
  path: String!
}

input OneGraphSetAuthGuardianRuleEmailConditionInput {
  isEqualTo: String
  hasADomainThat: OneGraphSetAuthGuardianRuleStringConditionInput
  endsWith: String
  startsWith: String
}

input OneGraphSetAuthGuardianRuleInput {
  effects: [OneGraphSetAuthGuardianRuleEffectInput!]!
  conditions: [OneGraphSetAuthGuardianRuleConditionInput!]!
}

input OneGraphSetAuthGuardianRuleStringConditionInput {
  isEqualToCaseInsensitively: String
  containsCaseInsensitively: String
  endsWithCaseInsensitively: String
  startsWithCaseInsensitively: String
  isEqualTo: String
  contains: String
  endsWith: String
  startsWith: String
}

input OneGraphSetJwtPreflightQueryAndWebhookUrlInput {
  """
  An optional GraphQL query to run after a user has signed into any service. The
  result will be included in the body for the preflight webhook. You may want to
  use this to retrieve a user's Google subId, or a list of GitHub organization
  names a user belongs.
  """
  preflightQuery: String

  """
  When generating a JWT for SSO using OneGraph to authenticate
                  with third-parties, you can run an optional GraphQL query and
                  send the result to a webhook for preprocessing before OneGraph
                  signs the final token and passes it to the client
  """
  webhookUrl: String
}

input OneGraphSetJwtSigningAlgorithmAndSecretInput {
  """
  When using symmetric (HMAC) algorithms, this is the shared secret OneGraph will use to sign the generated JSON web tokens.
  """
  sharedSecret: String

  """
  When generating a JWT for SSO, OneGraph can sign the JSON tokens with either a
  shared-secret (symmetric) key (HMAC) or a public/private (asymmetric) key pair (RSA)
  """
  signingAlgorithm: OneGraphJwtSigningAlgorithmEnumArg!
}

type OneGraphSetJwtSigningAlgorithmAndSecretPayload {
  app: OneGraphApp!
}

input OneGraphSetSlackEventWebhookAppTokenInput {
  """Slack app-level token with the authorizations:read scope."""
  appToken: String!

  """Unique onegraph id of the slack event webhook."""
  id: String!
}

type OneGraphSetSlackEventWebhookAppTokenPayload {
  """App that the slack event webhook belongs to."""
  app: OneGraphApp

  """The slack event webhook that was mofified."""
  slackEventWebhook: OneGraphSlackEventWebhook!

  """Custom OAuth client that the slack event webhook belongs to."""
  serviceAuth: OneGraphServiceAuth!
}

input OneGraphSetSlackEventWebhookSigningSecretInput {
  """Slack app-level token with the authorizations:read scope."""
  signingSecret: String!

  """Unique onegraph id of the slack event webhook."""
  id: String!
}

type OneGraphSetSlackEventWebhookSigningSecretPayload {
  """App that the slack event webhook belongs to."""
  app: OneGraphApp

  """The slack event webhook that was mofified."""
  slackEventWebhook: OneGraphSlackEventWebhook!

  """Custom OAuth client that the slack event webhook belongs to."""
  serviceAuth: OneGraphServiceAuth!
}

type OneGraphSharedDocument {
  """The id of the shared document"""
  id: String!

  """The siteId that the shared document originated from"""
  siteId: String

  """A short, descriptive title explaining what the document does."""
  title: String

  """The text of the GraphQL document"""
  body: String!

  """Services that appear in the query"""
  services: [OneGraphServiceInfo!]!

  """Operation name"""
  operationName: String

  """Document description"""
  description: String

  """Example variables for the operation."""
  exampleVariables: JSON

  """Current moderation status of the query"""
  moderationStatus: OneGraphSharedDocumentModerationStatusEnum!

  """Timestamp the document was created, in rfc3339 format."""
  createdAt: String!

  """Timestamp the document was last updated, in rfc3339 format."""
  updatedAt: String!
}

"""A list of shared documents"""
type OneGraphSharedDocumentConnection {
  nodes: [OneGraphSharedDocument!]!
}

"""Moderation status"""
enum OneGraphSharedDocumentModerationStatusEnum {
  PUBLISHED
  UNPUBLISHED
}

input OneGraphSharedDocumentsFilter {
  moderationStatus: OneGraphSharedDocumentsModerationStatusFilter
  graphQLFieldsFilter: OneGraphSharedDocumentsGraphQLFieldsServicesFilter
  services: OneGraphSharedDocumentsServicesFilter
}

input OneGraphSharedDocumentsGraphQLFieldsServicesFilter {
  in: [String!]
  equalTo: String
}

input OneGraphSharedDocumentsModerationStatusFilter {
  equalTo: OneGraphSharedDocumentModerationStatusEnum
}

input OneGraphSharedDocumentsServicesFilter {
  in: [OneGraphServiceEnumArg!]
  equalTo: OneGraphServiceEnumArg
}

"""Authenticate requests for the Shopify Admin api"""
input OneGraphShopifyAdminAuthArg {
  accessToken: String!

  """The store name, `store-name` in `https://store-name.myshopify.com`"""
  storeName: String!
}

"""Custom OAuth client for Shopify Admin"""
type OneGraphShopifyAdminServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String! @deprecated(reason: "Use `serviceInfo` instead.")

  """
  The service information for the service that the clientId and clientSecret belong to
  """
  serviceInfo: OneGraphServiceInfo!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""Authenticate requests to Shopify"""
input OneGraphShopifyAuthArg {
  """Authenticate requests for the Shopify Storefront api"""
  storefront: OneGraphShopifyStorefrontAuthArg

  """Authenticate requests for the Shopify Admin api"""
  admin: OneGraphShopifyAdminAuthArg
}

"""Authenticate requests for the Shopify Storefront api"""
input OneGraphShopifyStorefrontAuthArg {
  storefrontToken: String!

  """The store name, `store-name` in `https://store-name.myshopify.com`"""
  storeName: String!
}

"""Custom OAuth client for Shopify Storefront"""
type OneGraphShopifyStorefrontServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String! @deprecated(reason: "Use `serviceInfo` instead.")

  """
  The service information for the service that the clientId and clientSecret belong to
  """
  serviceInfo: OneGraphServiceInfo!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""A query stored in OneGraph in shortened form for easy sharing"""
type OneGraphShortenedQuery {
  """The id of the shortened OneGraph query"""
  id: String!

  """The full query body of the shortened OneGraph query"""
  query: String!

  """The variables of the shortened OneGraph query"""
  variables: String

  """The pre-selected operation of the shortened OneGraph query"""
  operation: String

  """An optional description of the purpose of the query"""
  description: String

  """The optional short name for the shortened OneGraph query"""
  name: String

  """
  The fully-qualified url for the shortened OneGraph query, used for sharing
  """
  url: String!
}

type OneGraphShortenUrlResponsePayload {
  shortenedUrl: OneGraphShortenedQuery!
}

"""The family of Signing algorithms"""
enum OneGraphSigningAlgorithmFamilyEnum {
  SYMMETRIC
  ASYMMETRIC
}

"""A OneGraph SignIn result"""
type OneGraphSignInResult {
  """
  The accessToken that can be used to make requests on behalf of the OneGraph user
  """
  accessToken: OneGraphAccessToken
}

type OneGraphSignoutResponsePayload {
  me: Viewer!
}

input OneGraphSignoutServiceUserInput {
  """
  Foreign user id for the user you want to sign out. You can find the
  foreignUser id through me.serviceMetadata.loggedInServices
  """
  foreignUserId: String!

  """GraphQL field identifying the service that you want to sign out of."""
  graphQLField: String

  """Service that you want to sign out of."""
  service: OneGraphServiceEnum
}

"""Slack Event Webhook for an app."""
type OneGraphSlackEventWebhook {
  """Unique identifier."""
  id: String!

  """Custom OAuth service id."""
  serviceAuthId: String!

  """
  The webhook url that should be set as the request url for your Slack app.
  """
  webhookUrl: String!

  """
  Last time that the webhook was verified by Slack, encoded as an
  []rfc3339](https://tools.ietf.org/html/rfc3339) string. For example:
  `1985-04-12T23:20:50-00:00``.
  """
  verifiedAt: String

  """
  Date that the webhook was created, encoded as an
  []rfc3339](https://tools.ietf.org/html/rfc3339) string. For example:
  `1985-04-12T23:20:50-00:00``.
  """
  createdAt: String!

  """The signing secret, masked."""
  maskedSigningSecret: String

  """The app token, masked."""
  maskedAppToken: String
}

"""Custom OAuth client for Slack"""
type OneGraphSlackServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String! @deprecated(reason: "Use `serviceInfo` instead.")

  """
  The service information for the service that the clientId and clientSecret belong to
  """
  serviceInfo: OneGraphServiceInfo!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
  slackEventWebhook: OneGraphSlackEventWebhook
}

"""Custom OAuth client for Spotify"""
type OneGraphSpotifyServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String! @deprecated(reason: "Use `serviceInfo` instead.")

  """
  The service information for the service that the clientId and clientSecret belong to
  """
  serviceInfo: OneGraphServiceInfo!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""
Authenticate requests when using the Stripe API on behalf of a connected account
using the Stripe-Account header and the connected account’s ID.
https://stripe.com/docs/connect/authentication#stripe-account-header
"""
input OneGraphStripeConnectAuthArg {
  """Id of the connected account for which the request is being made."""
  connectedStripeAccountId: String!

  """Your platform account’s secret key."""
  platformSecretKey: String!
}

"""Custom OAuth client for Stripe"""
type OneGraphStripeServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String! @deprecated(reason: "Use `serviceInfo` instead.")

  """
  The service information for the service that the clientId and clientSecret belong to
  """
  serviceInfo: OneGraphServiceInfo!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""Optional auth arg if not using OneGraph's built-in authentication"""
input OneGraphSubscriptionAuthArg {
  twilio: OneGraphTwilioAuth

  """
  
  Optional authentication for making requests to the Gmail API if you want
  to use a custom gmail app instead of OneGraph's built-in app.
  
  Subscriptions are long-lived, so a refresh token must also be provided.
  
  If you use this arg, make sure you've updated OneGraph to use your OAuth credentials in the dashboard.
  
  """
  gmail: OneGraphSubscriptionGmailAuthArg
}

"""

Optional authentication for making requests to the Gmail API if you want
to use a custom gmail app instead of OneGraph's built-in app.

Subscriptions are long-lived, so a refresh token must also be provided.

If you use this arg, make sure you've updated OneGraph to use your OAuth credentials in the dashboard.

"""
input OneGraphSubscriptionGmailAuthArg {
  refreshToken: String!
  accessToken: String!
}

type OneGraphSubscriptionPollingQueryDiff {
  previous: OneGraphSubscriptionPollingQueryDiffPrevious
}

type OneGraphSubscriptionPollingQueryDiffPrevious {
  payload: JSON
  createdAt: String
}

input OneGraphSubscriptionPollScheduleInput {
  every: OneGraphSubscriptionPollScheduleRepeatInput!
}

input OneGraphSubscriptionPollScheduleRepeatInput {
  """How many minutes to wait before re-running the underlying query"""
  minutes: Int!
}

input OneGraphSubscriptionSecretInput {
  """
  A hex-encoded key that will be used to sign all webhooks sent from this subscription.
  
  You can use the signature to validate that the subscription was sent from OneGraph.
  
  The signature will be sent in the `X-OneGraph-Signature` header of the
  webhook. The header will contain two parts, a signature and a timestamp (in
  seconds since the epoch), in the following format:
  
  ```
  X-OneGraph-Signature: t=1582852002,hmac_sha256=7d797ecd431e1a98aaba2f387f2c43241a13c1f093fd9d7e661758963744549a
  ```
  
  To verify the signature:
  1. Extract the timestamp (1582852002 above)
  2. Extract the signature (7d797ecd431e1a98aaba2f387f2c43241a13c1f093fd9d7e661758963744549a above)
  3. Concatenate the timestamp and the request body, separeted by a period (e.g. `t + '.' + requestBody`)
  4. Compute the hmac_sha256 hash of (3)
  5. Compare the hash with the provided signature using a constant-time
  comparison function (e.g. crypto.timingSafeEqual in Node)
  6. Reject the request if the hash you computed does not match the provided
  signature or if the timestamp is too far in the past (typically, 5 minutes)
  
  Example for validating the body in Node.js:
  
  ```js
  const SECRET = 'your hmacSha256Key';
  const signature = res.get('X-OneGraph-Signature');
  if (!signature) {
    throw new Error('Missing signature');
  }
  
  const sig = {};
  for (const pair of signature.split(',')) {
    const [k, v] = pair.split('=');
    sig[k] = v;
  }
  
  if (!sig.t || !sig.hmac_sha256) {
    throw new Error('Invalid signature header');
  }
  
  const hash = crypto
    .createHmac('sha256', SECRET)
    .update(sig.t)
    .update('.')
    .update(res.body)
    .digest('hex');
  
  if (
    !crypto.timingSafeEqual(
      Buffer.from(hash, 'hex'),
      Buffer.from(sig.hmac_sha256, 'hex'),
    )
  ) {
    throw new Error('Invalid signature');
  }
  
  if (parseInt(sig.t, 10) < Date.now() / 1000 - 300 /* 5 minutes */) {
    throw new Error('Request is too old');
  }
  
  // Signature is valid
  ```
  
  Examples for creating the key:
  
  Cli:
  ```cli
  $ openssl rand -hex 32
  ```
  
  Node:
  ```js
  require('crypto').randomBytes(32).toString('hex');
  ```
  
  Ruby:
  ```ruby
  ruby -rsecurerandom -e 'puts SecureRandom.hex(32)'
  ```
  """
  hmacSha256Key: String
}

"""
Whether to include information about the API requests that OneGraph made to fulfill the query in the `extensions` field.
"""
enum OneGraphSubscriptionShowMetricsEnum {
  """Don't include any info"""
  NONE

  """Include summary info."""
  SUMMARY

  """Include summary metrics and full requests."""
  FULL_REQUESTS
}

enum OneGraphSupportedExternalGraphQLService {
  GRAPHCMS
  WORDPRESS
  CUSTOM
}

"""Custom OAuth client for Toolshop"""
type OneGraphToolshopServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String! @deprecated(reason: "Use `serviceInfo` instead.")

  """
  The service information for the service that the clientId and clientSecret belong to
  """
  serviceInfo: OneGraphServiceInfo!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""Tours for exploring OneGraph"""
enum OneGraphTourEnum {
  DASHBOARD
  QUERYCHAIN
  AUTHGUARDIAN
}

"""Custom OAuth client for Trello"""
type OneGraphTrelloServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String! @deprecated(reason: "Use `serviceInfo` instead.")

  """
  The service information for the service that the clientId and clientSecret belong to
  """
  serviceInfo: OneGraphServiceInfo!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

input OneGraphTrelloTokenAuth {
  token: String!
  apiKey: String!
}

input OneGraphTwilioAuth {
  authToken: String!
  accountSid: String!
}

"""Custom OAuth client for Twilio"""
type OneGraphTwilioServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String! @deprecated(reason: "Use `serviceInfo` instead.")

  """
  The service information for the service that the clientId and clientSecret belong to
  """
  serviceInfo: OneGraphServiceInfo!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""Custom OAuth client for Twitch"""
type OneGraphTwitchTvServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String! @deprecated(reason: "Use `serviceInfo` instead.")

  """
  The service information for the service that the clientId and clientSecret belong to
  """
  serviceInfo: OneGraphServiceInfo!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""Custom OAuth client for Twitter"""
type OneGraphTwitterServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String! @deprecated(reason: "Use `serviceInfo` instead.")

  """
  The service information for the service that the clientId and clientSecret belong to
  """
  serviceInfo: OneGraphServiceInfo!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

input OneGraphUnLinkOneGraphNodesInput {
  """The `oneGraphId` for the end node"""
  endNodeOneGraphId: String!

  """The `oneGraphId` for the start node"""
  startNodeOneGraphId: String!
}

type OneGraphUnLinkOneGraphNodesResponsePayload {
  startNode: OneGraphNode
  endNode: OneGraphNode
}

input OneGraphUpdateAppByIdInput {
  """New fields for the app"""
  patch: OneGraphUpdateAppByIdPatch!

  """Id of the app"""
  id: String!
}

input OneGraphUpdateAppByIdPatch {
  """New name for the app"""
  name: String!
}

type OneGraphUpdateAppByIdResponsePayload {
  """App that was updated by this mutation"""
  app: OneGraphApp!
}

type OneGraphUpdatedPersistedQueryResponsePayload {
  persistedQuery: OneGraphPersistedQuery!
}

input OneGraphUpdateExternalGraphQLSchemaInput {
  """Endpoint to make GraphQL queries against."""
  endpoint: String!

  """Id of the external schema to update."""
  id: String!
}

type OneGraphUpdateExternalGraphQLSchemaPayload {
  """App that the external schema was added to."""
  app: OneGraphApp

  """The external schema that was added."""
  externalGraphQLSchema: OneGraphExternalGraphQLSchema!
}

input OneGraphUpdateExternalHoneycombConfigInput {
  """
  If `true`, OneGraph will send events to Honeycomb. Set to `false` to stop sending metrics.
  """
  active: Boolean

  """Metrics to subscribe to, with preferred dataset name."""
  datasets: [OneGraphAddExternalHoneycombConfigDatasetInput!]

  """Honeycomb token with the ability to create datasets and send events."""
  token: String

  """App to add the honeycomb config to."""
  appId: String!
}

type OneGraphUpdateExternalHoneycombConfigPayload {
  """App that the Honeycomb config belongs to."""
  app: OneGraphApp

  """The Honeycomb config that was updated."""
  externalHoneycombConfig: OneGraphExternalHoneycombConfig!
}

input OneGraphUpdateNetlifyCliSessionInput {
  """
  A new GraphQL schema to create and associate with the session. This will
  replace any existing document associated with the session.
  """
  graphQLSchema: OneGraphCliSessionGraphQLSchemaInput

  """
  A new persisted document to create and associate with the session. This will
  replace any existing document associated with the session.
  """
  persistedDocument: OneGraphCliSessionPersistedDocumentInput

  """Mark the session active or inactive"""
  status: OneGraphNetlifyCliSessionStatus

  """Optional metadata for the session"""
  metadata: JSONObject

  """An optional name for the session"""
  name: String

  """The id of the session"""
  id: String!
}

type OneGraphUpdateNetlifyCliSessionResponsePayload {
  """The session that was updated."""
  session: OneGraphNetlifyCliSession!
}

input OneGraphUpdateOrgByIdInput {
  """New fields for the organization"""
  patch: OneGraphUpdateOrgByIdPatch!

  """Id of the organization"""
  id: String!
}

input OneGraphUpdateOrgByIdPatch {
  """New name for the organization"""
  name: String!
}

type OneGraphUpdateOrgByIdResponsePayload {
  """Organization that was updated by this mutation"""
  org: OneGraphOrg!
}

input OneGraphUpdatePersistedQueryInput {
  """Replace the current tags on the query with the provided tags."""
  replaceTags: [String!]

  """Tags to remove from the query"""
  removeTags: [String!]

  """Tags to add to the query."""
  addTags: [String!]

  """A new description for the query."""
  description: String
  accessToken: String

  """The id of the app that the persisted query belongs to."""
  appId: String!

  """The id of the persisted query."""
  id: String!
}

input OneGraphUpdateSalesforceSchemaInput {
  """Id of the Salesforce schema to update."""
  id: String!
}

type OneGraphUpdateSalesforceSchemaPayload {
  """App that the Salesforce schema was added to."""
  app: OneGraphApp

  """The Salesforce schema that was added."""
  salesforceSchema: OneGraphSalesforceSchema!
}

input OneGraphUpdateServiceInput {
  """The service fields to update."""
  patch: OneGraphUpdateServicePatchInput!

  """The field identifying the service in the resulting GraphQL schema."""
  graphQLField: String!

  """The app ID that the service belongs to."""
  appId: String!
}

input OneGraphUpdateServicePatchInput {
  """The OAuth 2.0 configuration for the service"""
  oAuth2Config: OneGraphCreateServiceConfigurationMutationInputOAuthConfig

  """The service enum for the service"""
  graphQLEnum: String

  """The service friendly name, to be displayed to users."""
  friendlyServiceName: String

  """The graphQL field identifying the service in the schema."""
  graphQLField: String
}

input OneGraphUPSAPIAuth {
  accessToken: String!
  password: String!
  username: String!
}

input OneGraphUpsertAppForNetlifySiteInput {
  netlifySiteId: String!
}

type OneGraphUpsertAppForNetlifySiteResponsePayload {
  """The app that is associated with the Netlify site."""
  app: OneGraphApp!

  """The app that is associated with the Netlify account."""
  org: OneGraphOrg!
}

"""A OneGraph User"""
type OneGraphUser {
  """The id of the OneGraph User"""
  id: String!

  """Whether this OneGraph user has confirmed their account"""
  confirmed: Boolean!

  """The primary email of the currently logged-in OneGraph user"""
  email: String!

  """The full name of the currently logged-in OneGraph user"""
  fullName: String!

  """
  The date at which this user agreed to the OneGraph terms of service at https://www.onegraph.com/terms-and-conditions
  """
  agreedToTosAt: Int

  """The settings of the currently logged-in OneGraph user"""
  settings: OneGraphUserSettings!

  """User hash for securely identifying a user with Intercom"""
  intercomUserHash: String!

  """Personal access tokens"""
  personalTokens: [OneGraphAccessToken!]

  """
  The gitHub databaseId if this OneGraph User has associated their account with a GitHub account
  """
  gitHubUserId: String
}

"""A user auth associated with an access token"""
type OneGraphUserAuth {
  """Service that the auth belongs to."""
  service: OneGraphServiceEnum! @deprecated(reason: "Use `serviceInfo` instead")

  """Service that the auth belongs to."""
  serviceInfo: OneGraphServiceInfo!

  """Unique id for the logged-in entity on the service."""
  foreignUserId: String!

  """Scopes granted for the service."""
  scopes: [String!]

  """Service-specific data for the user auth"""
  customData: OneGraphUserAuthCustomData
}

"""Service-specific data for a user auth."""
union OneGraphUserAuthCustomData = OneGraphUserAuthCustomDataForOneGraph

"""Custom data for a OneGraph user auth."""
type OneGraphUserAuthCustomDataForOneGraph {
  """AppId that the tokens applies to."""
  appId: String
}

"""The settings for a OneGraph User"""
type OneGraphUserSettings {
  """The tours completed by this OneGraph user"""
  completedTours: [String!]!
}

input OneGraphUSPSAPIAuth {
  password: String
  userId: String!
}

"""Custom OAuth client for You Need a Budget"""
type OneGraphYnabServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String! @deprecated(reason: "Use `serviceInfo` instead.")

  """
  The service information for the service that the clientId and clientSecret belong to
  """
  serviceInfo: OneGraphServiceInfo!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""Custom OAuth client for YouTube"""
type OneGraphYoutubeServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String! @deprecated(reason: "Use `serviceInfo` instead.")

  """
  The service information for the service that the clientId and clientSecret belong to
  """
  serviceInfo: OneGraphServiceInfo!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""Custom OAuth client for Vercel"""
type OneGraphZeitServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String! @deprecated(reason: "Use `serviceInfo` instead.")

  """
  The service information for the service that the clientId and clientSecret belong to
  """
  serviceInfo: OneGraphServiceInfo!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

input OneGraphZendeskAPITokenAuth {
  token: String!
  email: String!
  subdomain: String!
}

"""Custom OAuth client for Zendesk"""
type OneGraphZendeskServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String! @deprecated(reason: "Use `serviceInfo` instead.")

  """
  The service information for the service that the clientId and clientSecret belong to
  """
  serviceInfo: OneGraphServiceInfo!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String

  """
  The redirect url that the user should add in the OAuth config on the service's settings page (external to Netlify).
  """
  redirectUri: String!
}

"""
Activities are instances of community participation and contribution, such as
GitHub issues, pull requests, Discourse posts, mentions on twitter, and more.
Orbit integrations come with built in activities, but you can also add your own.
"""
interface OrbitActivity {
  """id for the service auth"""
  id: String

  """
  The type of action the user did for that activity, e.g. `created`, `merged`, `opened`.
  """
  action: String

  """
  A unique identitier for the activity that makes sure duplicates of it are not
  recorded. Optional but recommended if your integration may resend data
  multiple times. A strong key choice might be the id or timestamp of an event
  registration along with the event name, e.g.
  "july-conference-registration:123456". If Orbit receives a POST to create an
  activity with that key more than once for the same member, it will only create one.
  """
  key: String

  """The member (if any) associated with this activity"""
  member: OrbitMember

  """The date and time at which the activity occurred."""
  occurredAt: String

  """The date and time at which the activity was last updated in Orbit."""
  updatedAt: String
}

type OrbitCustomActivity implements OrbitActivity {
  id: String
  key: String
  action: String
  occurredAt: String
  updatedAt: String
  orbitUrl: String
  raw: JSON!

  """Retrieve the member (if any) associated with this activity"""
  member: OrbitMember
}

type OrbitIssueActivity implements OrbitActivity {
  id: String
  key: String
  action: String
  occurredAt: String
  updatedAt: String
  orbitUrl: String
  gitHubTitle: String

  """Retrieve the member (if any) associated with this activity"""
  member: OrbitMember
}

type OrbitIssueCommentActivity implements OrbitActivity {
  id: String
  key: String
  action: String
  occurredAt: String
  updatedAt: String
  orbitUrl: String
  gitHubTitle: String
  gitHubHtmlUrl: String
  gitHubNumber: Int
  gitHubCreatedAt: String
  gitHubId: Int
  gitHubBody: String
  isPullRequest: Boolean

  """Retrieve the member (if any) associated with this activity"""
  member: OrbitMember
}

type OrbitMember implements OneGraphNode {
  id: String
  bio: String
  avatarUrl: String
  birthday: String
  company: String
  location: String
  name: String
  pronouns: String
  shippingAddress: String
  slug: String

  """Adds tags to member; comma-separated string or array"""
  tagsToAdd: String

  """Replaces all tags for the member; comma-separated string or array"""
  tagList: [String]
  tshirt: String
  teammate: Boolean
  url: String

  """The member's GitHub username"""
  github: String

  """The member's Twitter username"""
  twitter: String

  """The member's email"""
  email: String

  """The member's Discourse username"""
  discourse: String

  """The host of the Discourse"""
  discourseHostname: String

  """The member's dev.to username"""
  linkedin: String

  """The member's dev.to username"""
  devto: String

  """Retrieve notes for a member."""
  notes(
    after: String

    """The number of items after the current cursor to return, maximum of 500"""
    first: Int = 25
  ): OrbitNotesConnection

  """Retrieve posts by a member."""
  posts(
    after: String

    """The number of items after the current cursor to return, maximum of 500"""
    first: Int = 25
  ): OrbitPostsConnection
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Members on Orbit"""
type OrbitMembersConnection {
  """Members"""
  nodes: [OrbitMember!]!

  """A list of edges"""
  edges: [OrbitMembersEdge!]!

  """Page info"""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type OrbitMembersEdge {
  """The item at the end of the edge"""
  node: OrbitMember!

  """A cursor for use in pagination."""
  cursor: String!
}

type OrbitNote implements OneGraphNode {
  id: String
  body: String
  createdAt: String
  updatedAt: String
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

type OrbitNoteActivity implements OrbitActivity {
  id: String
  key: String
  action: String
  occurredAt: String
  updatedAt: String
  orbitUrl: String

  """Retrieve the member (if any) associated with this activity"""
  member: OrbitMember
}

"""Notes on Orbit"""
type OrbitNotesConnection {
  """Notes"""
  nodes: [OrbitNote!]!

  """A list of edges"""
  edges: [OrbitNotesEdge!]!

  """Page info"""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type OrbitNotesEdge {
  """The item at the end of the edge"""
  node: OrbitNote!

  """A cursor for use in pagination."""
  cursor: String!
}

type OrbitPost implements OneGraphNode {
  createdAt: String
  description: String
  image: String
  publishedAt: String
  title: String
  updatedAt: String
  url: String
  id: String
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

type OrbitPostActivity implements OrbitActivity {
  id: String
  key: String
  action: String
  occurredAt: String
  updatedAt: String
  orbitUrl: String

  """Retrieve the member (if any) associated with this activity"""
  member: OrbitMember
}

"""Posts on Orbit"""
type OrbitPostsConnection {
  """Posts"""
  nodes: [OrbitPost!]!

  """A list of edges"""
  edges: [OrbitPostsEdge!]!

  """Page info"""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type OrbitPostsEdge {
  """The item at the end of the edge"""
  node: OrbitPost!

  """A cursor for use in pagination."""
  cursor: String!
}

type OrbitPullRequestActivity implements OrbitActivity {
  id: String
  key: String
  action: String
  occurredAt: String
  updatedAt: String
  orbitUrl: String
  gitHubTitle: String
  gitHubMergedAt: String
  gitHubMerged: Boolean

  """Retrieve the member (if any) associated with this activity"""
  member: OrbitMember
}

type OrbitStarActivity implements OrbitActivity {
  id: String
  key: String
  action: String
  occurredAt: String
  updatedAt: String
  orbitUrl: String
  gitHubStarredAt: String

  """Retrieve the member (if any) associated with this activity"""
  member: OrbitMember
}

type OrbitWorkspace implements OneGraphNode {
  id: String
  name: String
  slug: String
  createdAt: String
  updatedAt: String

  """Retrieve a specific activity for a workspace."""
  activity(id: String!): OrbitActivity

  """List activities for a workspace."""
  activities(
    repository: String
    type: String
    after: String

    """The number of items after the current cursor to return, maximum of 500"""
    first: Int = 25
  ): OrbitWorkspaceActivityConnection

  """Retrieve posts for a workspace."""
  posts(
    after: String

    """The number of items after the current cursor to return, maximum of 500"""
    first: Int = 25
  ): OrbitPostsConnection

  """Retrieve a specific member for a workspace."""
  member(id: String!): OrbitMember

  """Retrieve members for a workspace."""
  members(
    after: String

    """The number of items after the current cursor to return, maximum of 500"""
    first: Int = 25
  ): OrbitMembersConnection
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""WorkspaceActivity on Orbit"""
type OrbitWorkspaceActivityConnection {
  """WorkspaceActivity"""
  nodes: [OrbitActivity!]!

  """A list of edges"""
  edges: [OrbitWorkspaceActivityEdge!]!

  """Page info"""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type OrbitWorkspaceActivityEdge {
  """The item at the end of the edge"""
  node: OrbitActivity!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type PollingQuery {
  query: Query!
  diff: OneGraphSubscriptionPollingQueryDiff!
}

type Query {
  me(
    """
    Instruct OneGraph to use the auth associated with a particular user.
    
    Note that the user must have gone through the OneGraph oauth flow and logged
    in with an account with the userId provided in the auth. If there is no user
    with the account, you may get an auth/auth-missing error.
    
    The userIds for logged-in services can be found under `me.serviceMetadata.loggedInServices.foreignUserId`.
    """
    userIds: OneGraphServiceUserIds

    """Optional OAuth tokens used to execute the query"""
    auths: OneGraphServiceAuths
  ): Viewer!

  """Fetches an object given its globally unique `oneGraphId`."""
  oneGraphNode(
    """The globally unique `oneGraphId`."""
    oneGraphId: ID!

    """
    Instruct OneGraph to use the auth associated with a particular user.
    
    Note that the user must have gone through the OneGraph oauth flow and logged
    in with an account with the userId provided in the auth. If there is no user
    with the account, you may get an auth/auth-missing error.
    
    The userIds for logged-in services can be found under `me.serviceMetadata.loggedInServices.foreignUserId`.
    """
    userIds: OneGraphServiceUserIds

    """Optional OAuth tokens used to execute the query"""
    auths: OneGraphServiceAuths
  ): OneGraphNode
  oneGraph(
    """
    Instruct OneGraph to use the auth associated with a particular user.
    
    Note that the user must have gone through the OneGraph oauth flow and logged
    in with an account with the userId provided in the auth. If there is no user
    with the account, you may get an auth/auth-missing error.
    
    The userIds for logged-in services can be found under `me.serviceMetadata.loggedInServices.foreignUserId`.
    """
    userIds: OneGraphServiceUserIds

    """Optional OAuth tokens used to execute the query"""
    auths: OneGraphServiceAuths
  ): OneGraphServiceQuery!
  toolshop(
    """
    Instruct OneGraph to use the auth associated with a particular user.
    
    Note that the user must have gone through the OneGraph oauth flow and logged
    in with an account with the userId provided in the auth. If there is no user
    with the account, you may get an auth/auth-missing error.
    
    The userIds for logged-in services can be found under `me.serviceMetadata.loggedInServices.foreignUserId`.
    """
    userIds: OneGraphServiceUserIds

    """Optional OAuth tokens used to execute the query"""
    auths: OneGraphServiceAuths
  ): ToolshopRootQuery
}

input SetAppCORSOriginsData {
  corsOrigins: [String!]!
  appId: String!
}

type SetAppCORSOriginsResponsePayload {
  app: OneGraphApp!
}

input SignoutServicesData {
  authlifyTokenId: String

  """
  Auths to establish the anchor. Note that these auths won't be removed from the personal token.
  """
  anchorAuth: OneGraphServiceAuths
  servicesGraphQLFields: [String!]
  services: [OneGraphServiceEnum!]
}

type SignoutServicesResponsePayload {
  me: Viewer!

  """Authlify token that was updated by this mutation"""
  authlifyToken: AuthlifyToken
}

type Subscription {
  poll(
    """
    Whether to include information about the API requests that OneGraph made to fulfill the query in the `extensions` field.
    """
    showMetrics: OneGraphSubscriptionShowMetricsEnum

    """
    When set, OneGraph will run the query on the specified schedule, but will
    only deliver new payloads when the underlying query result has changed from
    the previous result. Use this when you only want to react to changes.
    
    When unset, OneGraph will run the query on the specified schedule, and will
    deliver a new payload regardless of whether it has changed from the previous
    runs. Use this when you want to reliably drive a process at a regular
    interval or monitor a value over time.
    """
    onlyTriggerWhenPayloadChanged: Boolean = true
    schedule: OneGraphSubscriptionPollScheduleInput!
    secret: OneGraphSubscriptionSecretInput
    auth: OneGraphSubscriptionAuthArg

    """
    Number of days to retain the payload, if `retainPayloads` is true, or
    `retainedOnly` is true. Maximum is 365, minimum is 1. Defaults to 365.
    """
    payloadRetentionDays: Int

    """
    Set to true to have OneGraph store payloads for this subscription. They
    payloads are available on the OneGraph dashboard from the app's
    `Subscription` page. Use this field when creating a subscription over a
    websocket that should only be retained and not sent over the websocket or a webhook.
    """
    retainedOnly: Boolean
    retainPayloads: Boolean

    """
    Webhook URL that will receive a POST request every time there is new data
    for the subscription. The endpoint should return a 200 within 30 seconds to
    be considered successful. If the request does not succeed, it will be retried.
    """
    webhookUrl: String
  ): PollingQuery!
}

type ToolshopAgencies implements ToolshopDocument {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: ToolshopDateTime

  """Date the document was last modified"""
  _updatedAt: ToolshopDateTime

  """Current document revision"""
  _rev: String
  _key: String
  featured: Boolean
  company: ToolshopCompany
  email: String
  location: String
  budget: ToolshopExpertsBudget
  cardBackgroundColor: ToolshopColor
  cardBackground: ToolshopNetlifyImage
  backgroundColor: ToolshopColor
  background: ToolshopNetlifyImage
  aboutRaw: JSON
  services: [ToolshopExpertsService]
  frameworks: [ToolshopExpertsFramework]
  cms: [ToolshopExpertsCms]
  ecommerce: [ToolshopExpertsEcommerce]
  region: [ToolshopExpertsRegion]
  usecase: [ToolshopExpertsUseCase]
  projects: [ToolshopWebsite]
  builtwith: [ToolshopWebsite]
}

input ToolshopAgenciesFilter {
  """Apply filters on document level"""
  _: ToolshopSanity_DocumentFilter
  _id: ToolshopIDFilter
  _type: ToolshopStringFilter
  _createdAt: ToolshopDatetimeFilter
  _updatedAt: ToolshopDatetimeFilter
  _rev: ToolshopStringFilter
  _key: ToolshopStringFilter
  featured: ToolshopBooleanFilter
  company: ToolshopCompanyFilter
  email: ToolshopStringFilter
  location: ToolshopStringFilter
  budget: ToolshopExpertsBudgetFilter
  cardBackgroundColor: ToolshopColorFilter
  cardBackground: ToolshopNetlifyImageFilter
  backgroundColor: ToolshopColorFilter
  background: ToolshopNetlifyImageFilter
}

input ToolshopAgenciesSorting {
  _id: ToolshopSortOrder
  _type: ToolshopSortOrder
  _createdAt: ToolshopSortOrder
  _updatedAt: ToolshopSortOrder
  _rev: ToolshopSortOrder
  _key: ToolshopSortOrder
  featured: ToolshopSortOrder
  email: ToolshopSortOrder
  location: ToolshopSortOrder
  cardBackgroundColor: ToolshopColorSorting
  cardBackground: ToolshopNetlifyImageSorting
  backgroundColor: ToolshopColorSorting
  background: ToolshopNetlifyImageSorting
}

type ToolshopApiAuthentication implements ToolshopDocument {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: ToolshopDateTime

  """Date the document was last modified"""
  _updatedAt: ToolshopDateTime

  """Current document revision"""
  _rev: String
  _key: String
  title: String
  slug: ToolshopSlug

  """A short, concise string of text describing this content."""
  description: String
  body: String
  screenshots: [ToolshopNetlifyImage]

  """Link this API integration to a partner."""
  partner: ToolshopPartner
  authors: [ToolshopPartnerOrPeople]

  """Link to integration documentation."""
  docsUrl: String

  """Link to install the build plugin in a Netlify site"""
  installUrl: String

  """Integration version"""
  version: String

  """Rating for the integration provided by customers."""
  rating: Float

  """Maps to the scenario ID that contains the integration."""
  scenarioId: String

  """
  Flag determining whether the integration is verified by Netlify to be safe.
  """
  netlifyVerified: Boolean

  """Determines whether the integration was verified by the partner."""
  partnerVerified: Boolean

  """Determines whether the integration is production-ready or staged."""
  environment: String

  """Integration availability to customers."""
  status: String
  relatedContent: [ToolshopRelatedContent]
  tags: [ToolshopTag]
  seofields: ToolshopSeofields
}

input ToolshopApiAuthenticationFilter {
  """Apply filters on document level"""
  _: ToolshopSanity_DocumentFilter
  _id: ToolshopIDFilter
  _type: ToolshopStringFilter
  _createdAt: ToolshopDatetimeFilter
  _updatedAt: ToolshopDatetimeFilter
  _rev: ToolshopStringFilter
  _key: ToolshopStringFilter
  title: ToolshopStringFilter
  slug: ToolshopSlugFilter
  description: ToolshopStringFilter
  body: ToolshopStringFilter
  partner: ToolshopPartnerFilter
  docsUrl: ToolshopStringFilter
  installUrl: ToolshopStringFilter
  version: ToolshopStringFilter
  rating: ToolshopFloatFilter
  scenarioId: ToolshopStringFilter
  netlifyVerified: ToolshopBooleanFilter
  partnerVerified: ToolshopBooleanFilter
  environment: ToolshopStringFilter
  status: ToolshopStringFilter
  seofields: ToolshopSeofieldsFilter
}

input ToolshopApiAuthenticationSorting {
  _id: ToolshopSortOrder
  _type: ToolshopSortOrder
  _createdAt: ToolshopSortOrder
  _updatedAt: ToolshopSortOrder
  _rev: ToolshopSortOrder
  _key: ToolshopSortOrder
  title: ToolshopSortOrder
  slug: ToolshopSlugSorting
  description: ToolshopSortOrder
  body: ToolshopSortOrder
  docsUrl: ToolshopSortOrder
  installUrl: ToolshopSortOrder
  version: ToolshopSortOrder
  rating: ToolshopSortOrder
  scenarioId: ToolshopSortOrder
  netlifyVerified: ToolshopSortOrder
  partnerVerified: ToolshopSortOrder
  environment: ToolshopSortOrder
  status: ToolshopSortOrder
  seofields: ToolshopSeofieldsSorting
}

type ToolshopBasicPage implements ToolshopDocument {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: ToolshopDateTime

  """Date the document was last modified"""
  _updatedAt: ToolshopDateTime

  """Current document revision"""
  _rev: String
  _key: String
  title: String
  slug: ToolshopSlug
  textRaw: JSON
  seofields: ToolshopSeofields
}

input ToolshopBasicPageFilter {
  """Apply filters on document level"""
  _: ToolshopSanity_DocumentFilter
  _id: ToolshopIDFilter
  _type: ToolshopStringFilter
  _createdAt: ToolshopDatetimeFilter
  _updatedAt: ToolshopDatetimeFilter
  _rev: ToolshopStringFilter
  _key: ToolshopStringFilter
  title: ToolshopStringFilter
  slug: ToolshopSlugFilter
  seofields: ToolshopSeofieldsFilter
}

union ToolshopBasicPageOrBlogPostOrEventOrLandingPageOrWebinarOrWorkshop = ToolshopBasicPage | ToolshopBlogPost | ToolshopEvent | ToolshopLandingPage | ToolshopWebinar | ToolshopWorkshop

input ToolshopBasicPageSorting {
  _id: ToolshopSortOrder
  _type: ToolshopSortOrder
  _createdAt: ToolshopSortOrder
  _updatedAt: ToolshopSortOrder
  _rev: ToolshopSortOrder
  _key: ToolshopSortOrder
  title: ToolshopSortOrder
  slug: ToolshopSlugSorting
  seofields: ToolshopSeofieldsSorting
}

type ToolshopBlock {
  _key: String
  _type: String
  children: [ToolshopSpan]
  style: String
  list: String
}

union ToolshopBlockOrCodeOrNetlifyImage = ToolshopBlock | ToolshopCode | ToolshopNetlifyImage

type ToolshopBlogCta implements ToolshopDocument {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: ToolshopDateTime

  """Date the document was last modified"""
  _updatedAt: ToolshopDateTime

  """Current document revision"""
  _rev: String
  _key: String
  title: String
  image: ToolshopNetlifyImage
  callToActionUrl: String
  callToActionLabel: String
}

input ToolshopBlogCtaFilter {
  """Apply filters on document level"""
  _: ToolshopSanity_DocumentFilter
  _id: ToolshopIDFilter
  _type: ToolshopStringFilter
  _createdAt: ToolshopDatetimeFilter
  _updatedAt: ToolshopDatetimeFilter
  _rev: ToolshopStringFilter
  _key: ToolshopStringFilter
  title: ToolshopStringFilter
  image: ToolshopNetlifyImageFilter
  callToActionUrl: ToolshopStringFilter
  callToActionLabel: ToolshopStringFilter
}

input ToolshopBlogCtaSorting {
  _id: ToolshopSortOrder
  _type: ToolshopSortOrder
  _createdAt: ToolshopSortOrder
  _updatedAt: ToolshopSortOrder
  _rev: ToolshopSortOrder
  _key: ToolshopSortOrder
  title: ToolshopSortOrder
  image: ToolshopNetlifyImageSorting
  callToActionUrl: ToolshopSortOrder
  callToActionLabel: ToolshopSortOrder
}

type ToolshopBlogPost implements ToolshopDocument {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: ToolshopDateTime

  """Date the document was last modified"""
  _updatedAt: ToolshopDateTime

  """Current document revision"""
  _rev: String
  _key: String
  title: String
  slug: ToolshopSlug
  description: String
  publishDate: ToolshopDateTime
  authors: [ToolshopPeople]
  topic: ToolshopBlogTopic
  blogTags: [ToolshopBlogTag]
  markdown: String
  image: ToolshopNetlifyImage
  relatedPosts: [ToolshopBlogPost]

  """Hide the blog post from being shown on netlify.com/blog"""
  hideBlogPost: Boolean

  """Remove the Drop Cap of the first character in the blog post"""
  removeDropCap: Boolean

  """Override the Blog Settings sidebar call-to-action"""
  sidebarCallToAction: ToolshopBlogCta

  """Override the Blog Settings footer call-to-action"""
  footerCallToAction: ToolshopBlogCta
  seofields: ToolshopSeofields
}

input ToolshopBlogPostFilter {
  """Apply filters on document level"""
  _: ToolshopSanity_DocumentFilter
  _id: ToolshopIDFilter
  _type: ToolshopStringFilter
  _createdAt: ToolshopDatetimeFilter
  _updatedAt: ToolshopDatetimeFilter
  _rev: ToolshopStringFilter
  _key: ToolshopStringFilter
  title: ToolshopStringFilter
  slug: ToolshopSlugFilter
  description: ToolshopStringFilter
  publishDate: ToolshopDatetimeFilter
  topic: ToolshopBlogTopicFilter
  markdown: ToolshopStringFilter
  image: ToolshopNetlifyImageFilter
  hideBlogPost: ToolshopBooleanFilter
  removeDropCap: ToolshopBooleanFilter
  sidebarCallToAction: ToolshopBlogCtaFilter
  footerCallToAction: ToolshopBlogCtaFilter
  seofields: ToolshopSeofieldsFilter
}

input ToolshopBlogPostSorting {
  _id: ToolshopSortOrder
  _type: ToolshopSortOrder
  _createdAt: ToolshopSortOrder
  _updatedAt: ToolshopSortOrder
  _rev: ToolshopSortOrder
  _key: ToolshopSortOrder
  title: ToolshopSortOrder
  slug: ToolshopSlugSorting
  description: ToolshopSortOrder
  publishDate: ToolshopSortOrder
  markdown: ToolshopSortOrder
  image: ToolshopNetlifyImageSorting
  hideBlogPost: ToolshopSortOrder
  removeDropCap: ToolshopSortOrder
  seofields: ToolshopSeofieldsSorting
}

type ToolshopBlogSettings implements ToolshopDocument {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: ToolshopDateTime

  """Date the document was last modified"""
  _updatedAt: ToolshopDateTime

  """Current document revision"""
  _rev: String
  _key: String
  featuredAuthors: [ToolshopPeople]
  featuredPost: ToolshopBlogPost
  featuredTags: [ToolshopBlogTag]
  sidebarCallToAction: ToolshopBlogCta
  footerCallToAction: ToolshopBlogCta
}

input ToolshopBlogSettingsFilter {
  """Apply filters on document level"""
  _: ToolshopSanity_DocumentFilter
  _id: ToolshopIDFilter
  _type: ToolshopStringFilter
  _createdAt: ToolshopDatetimeFilter
  _updatedAt: ToolshopDatetimeFilter
  _rev: ToolshopStringFilter
  _key: ToolshopStringFilter
  featuredPost: ToolshopBlogPostFilter
  sidebarCallToAction: ToolshopBlogCtaFilter
  footerCallToAction: ToolshopBlogCtaFilter
}

input ToolshopBlogSettingsSorting {
  _id: ToolshopSortOrder
  _type: ToolshopSortOrder
  _createdAt: ToolshopSortOrder
  _updatedAt: ToolshopSortOrder
  _rev: ToolshopSortOrder
  _key: ToolshopSortOrder
}

type ToolshopBlogTag implements ToolshopDocument {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: ToolshopDateTime

  """Date the document was last modified"""
  _updatedAt: ToolshopDateTime

  """Current document revision"""
  _rev: String
  _key: String
  title: String
  slug: ToolshopSlug
  seofields: ToolshopSeofields
}

input ToolshopBlogTagFilter {
  """Apply filters on document level"""
  _: ToolshopSanity_DocumentFilter
  _id: ToolshopIDFilter
  _type: ToolshopStringFilter
  _createdAt: ToolshopDatetimeFilter
  _updatedAt: ToolshopDatetimeFilter
  _rev: ToolshopStringFilter
  _key: ToolshopStringFilter
  title: ToolshopStringFilter
  slug: ToolshopSlugFilter
  seofields: ToolshopSeofieldsFilter
}

input ToolshopBlogTagSorting {
  _id: ToolshopSortOrder
  _type: ToolshopSortOrder
  _createdAt: ToolshopSortOrder
  _updatedAt: ToolshopSortOrder
  _rev: ToolshopSortOrder
  _key: ToolshopSortOrder
  title: ToolshopSortOrder
  slug: ToolshopSlugSorting
  seofields: ToolshopSeofieldsSorting
}

type ToolshopBlogTopic implements ToolshopDocument {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: ToolshopDateTime

  """Date the document was last modified"""
  _updatedAt: ToolshopDateTime

  """Current document revision"""
  _rev: String
  _key: String
  title: String
  slug: ToolshopSlug
  seofields: ToolshopSeofields
}

input ToolshopBlogTopicFilter {
  """Apply filters on document level"""
  _: ToolshopSanity_DocumentFilter
  _id: ToolshopIDFilter
  _type: ToolshopStringFilter
  _createdAt: ToolshopDatetimeFilter
  _updatedAt: ToolshopDatetimeFilter
  _rev: ToolshopStringFilter
  _key: ToolshopStringFilter
  title: ToolshopStringFilter
  slug: ToolshopSlugFilter
  seofields: ToolshopSeofieldsFilter
}

input ToolshopBlogTopicSorting {
  _id: ToolshopSortOrder
  _type: ToolshopSortOrder
  _createdAt: ToolshopSortOrder
  _updatedAt: ToolshopSortOrder
  _rev: ToolshopSortOrder
  _key: ToolshopSortOrder
  title: ToolshopSortOrder
  slug: ToolshopSlugSorting
  seofields: ToolshopSeofieldsSorting
}

input ToolshopBooleanFilter {
  """Checks if the value is equal to the given input."""
  eq: Boolean

  """Checks if the value is not equal to the given input."""
  neq: Boolean
}

type ToolshopBuildPlugin implements ToolshopDocument {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: ToolshopDateTime

  """Date the document was last modified"""
  _updatedAt: ToolshopDateTime

  """Current document revision"""
  _rev: String
  _key: String
  title: String
  slug: ToolshopSlug

  """A short, concise string of text describing this content."""
  description: String
  body: String
  screenshots: [ToolshopNetlifyImage]

  """Link this API integration to a partner."""
  partner: ToolshopPartner
  authors: [ToolshopPartnerOrPeople]

  """Link to the changelog for the build plugin."""
  changelogUrl: String

  """Link to integration documentation."""
  docsUrl: String

  """Link to install the build plugin in a Netlify site"""
  installUrl: String

  """Link to report plugin issues."""
  issuesUrl: String

  """Link to the build plugin package on npm."""
  npmUrl: String

  """Link to the build plugin repository."""
  repoUrl: String

  """Integration version"""
  version: String
  compatibility: [String]

  """Rating for the integration provided by customers."""
  rating: Float

  """Maps to the scenario ID that contains the integration."""
  scenarioId: String

  """
  Flag determining whether the integration is verified by Netlify to be safe.
  """
  netlifyVerified: Boolean

  """Determines whether the integration was verified by the partner."""
  partnerVerified: Boolean

  """Determines whether the integration is production-ready or staged."""
  environment: String

  """Integration availability to customers."""
  status: String
  relatedContent: [ToolshopRelatedContent]
  tags: [ToolshopTag]
  seofields: ToolshopSeofields
}

input ToolshopBuildPluginFilter {
  """Apply filters on document level"""
  _: ToolshopSanity_DocumentFilter
  _id: ToolshopIDFilter
  _type: ToolshopStringFilter
  _createdAt: ToolshopDatetimeFilter
  _updatedAt: ToolshopDatetimeFilter
  _rev: ToolshopStringFilter
  _key: ToolshopStringFilter
  title: ToolshopStringFilter
  slug: ToolshopSlugFilter
  description: ToolshopStringFilter
  body: ToolshopStringFilter
  partner: ToolshopPartnerFilter
  changelogUrl: ToolshopStringFilter
  docsUrl: ToolshopStringFilter
  installUrl: ToolshopStringFilter
  issuesUrl: ToolshopStringFilter
  npmUrl: ToolshopStringFilter
  repoUrl: ToolshopStringFilter
  version: ToolshopStringFilter
  rating: ToolshopFloatFilter
  scenarioId: ToolshopStringFilter
  netlifyVerified: ToolshopBooleanFilter
  partnerVerified: ToolshopBooleanFilter
  environment: ToolshopStringFilter
  status: ToolshopStringFilter
  seofields: ToolshopSeofieldsFilter
}

input ToolshopBuildPluginSorting {
  _id: ToolshopSortOrder
  _type: ToolshopSortOrder
  _createdAt: ToolshopSortOrder
  _updatedAt: ToolshopSortOrder
  _rev: ToolshopSortOrder
  _key: ToolshopSortOrder
  title: ToolshopSortOrder
  slug: ToolshopSlugSorting
  description: ToolshopSortOrder
  body: ToolshopSortOrder
  changelogUrl: ToolshopSortOrder
  docsUrl: ToolshopSortOrder
  installUrl: ToolshopSortOrder
  issuesUrl: ToolshopSortOrder
  npmUrl: ToolshopSortOrder
  repoUrl: ToolshopSortOrder
  version: ToolshopSortOrder
  rating: ToolshopSortOrder
  scenarioId: ToolshopSortOrder
  netlifyVerified: ToolshopSortOrder
  partnerVerified: ToolshopSortOrder
  environment: ToolshopSortOrder
  status: ToolshopSortOrder
  seofields: ToolshopSeofieldsSorting
}

type ToolshopBusinessValueProposition implements ToolshopDocument {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: ToolshopDateTime

  """Date the document was last modified"""
  _updatedAt: ToolshopDateTime

  """Current document revision"""
  _rev: String
  _key: String
  title: String
}

input ToolshopBusinessValuePropositionFilter {
  """Apply filters on document level"""
  _: ToolshopSanity_DocumentFilter
  _id: ToolshopIDFilter
  _type: ToolshopStringFilter
  _createdAt: ToolshopDatetimeFilter
  _updatedAt: ToolshopDatetimeFilter
  _rev: ToolshopStringFilter
  _key: ToolshopStringFilter
  title: ToolshopStringFilter
}

input ToolshopBusinessValuePropositionSorting {
  _id: ToolshopSortOrder
  _type: ToolshopSortOrder
  _createdAt: ToolshopSortOrder
  _updatedAt: ToolshopSortOrder
  _rev: ToolshopSortOrder
  _key: ToolshopSortOrder
  title: ToolshopSortOrder
}

type ToolshopCaseStudy implements ToolshopDocument {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: ToolshopDateTime

  """Date the document was last modified"""
  _updatedAt: ToolshopDateTime

  """Current document revision"""
  _rev: String
  _key: String
  company: ToolshopCompany
  color: ToolshopColor
  resourcesCardImage: ToolshopImage
  url: String
  tags: ToolshopTags
}

input ToolshopCaseStudyFilter {
  """Apply filters on document level"""
  _: ToolshopSanity_DocumentFilter
  _id: ToolshopIDFilter
  _type: ToolshopStringFilter
  _createdAt: ToolshopDatetimeFilter
  _updatedAt: ToolshopDatetimeFilter
  _rev: ToolshopStringFilter
  _key: ToolshopStringFilter
  company: ToolshopCompanyFilter
  color: ToolshopColorFilter
  resourcesCardImage: ToolshopImageFilter
  url: ToolshopStringFilter
  tags: ToolshopTagsFilter
}

union ToolshopCaseStudyOrResourcesOrWebinar = ToolshopCaseStudy | ToolshopResources | ToolshopWebinar

input ToolshopCaseStudySorting {
  _id: ToolshopSortOrder
  _type: ToolshopSortOrder
  _createdAt: ToolshopSortOrder
  _updatedAt: ToolshopSortOrder
  _rev: ToolshopSortOrder
  _key: ToolshopSortOrder
  color: ToolshopColorSorting
  resourcesCardImage: ToolshopImageSorting
  url: ToolshopSortOrder
  tags: ToolshopTagsSorting
}

type ToolshopChecklist {
  _key: String
  _type: String
  firstcolumnTitle: String
  firstcolumnTextRaw: JSON
  secondcolumnTitle: String
  secondcolumnTextRaw: JSON
  callToActionLabel: String
  callToActionUrl: String
  colorChecklistBackground: ToolshopColor
  colorChecklistText: ToolshopColor
  colorChecklistButtonBackground: ToolshopColor
  colorChecklistButtonText: ToolshopColor
}

union ToolshopChecklistOrFeatureOrFooterOrHeroOrPrefooterOrRegisterOrScheduleOrSchedulesOrSpeakersOrSponsorsOrVideoOrVideos = ToolshopChecklist | ToolshopFeature | ToolshopFooter | ToolshopHero | ToolshopPrefooter | ToolshopRegister | ToolshopSchedule | ToolshopSchedules | ToolshopSpeakers | ToolshopSponsors | ToolshopVideo | ToolshopVideos

type ToolshopCms implements ToolshopDocument {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: ToolshopDateTime

  """Date the document was last modified"""
  _updatedAt: ToolshopDateTime

  """Current document revision"""
  _rev: String
  _key: String
  title: String
}

input ToolshopCmsFilter {
  """Apply filters on document level"""
  _: ToolshopSanity_DocumentFilter
  _id: ToolshopIDFilter
  _type: ToolshopStringFilter
  _createdAt: ToolshopDatetimeFilter
  _updatedAt: ToolshopDatetimeFilter
  _rev: ToolshopStringFilter
  _key: ToolshopStringFilter
  title: ToolshopStringFilter
}

input ToolshopCmsSorting {
  _id: ToolshopSortOrder
  _type: ToolshopSortOrder
  _createdAt: ToolshopSortOrder
  _updatedAt: ToolshopSortOrder
  _rev: ToolshopSortOrder
  _key: ToolshopSortOrder
  title: ToolshopSortOrder
}

type ToolshopCode {
  _key: String
  _type: String
  language: String
  filename: String
  code: String
  highlightedLines: [Float]
}

type ToolshopColor {
  _key: String
  _type: String
  hex: String
  alpha: Float
  hsl: ToolshopHslaColor
  hsv: ToolshopHsvaColor
  rgb: ToolshopRgbaColor
}

input ToolshopColorFilter {
  _key: ToolshopStringFilter
  _type: ToolshopStringFilter
  hex: ToolshopStringFilter
  alpha: ToolshopFloatFilter
  hsl: ToolshopHslaColorFilter
  hsv: ToolshopHsvaColorFilter
  rgb: ToolshopRgbaColorFilter
}

input ToolshopColorSorting {
  _key: ToolshopSortOrder
  _type: ToolshopSortOrder
  hex: ToolshopSortOrder
  alpha: ToolshopSortOrder
  hsl: ToolshopHslaColorSorting
  hsv: ToolshopHsvaColorSorting
  rgb: ToolshopRgbaColorSorting
}

type ToolshopColumn {
  _key: String
  _type: String
  icon: String
  title: String
  textRaw: JSON
}

type ToolshopCompany implements ToolshopDocument {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: ToolshopDateTime

  """Date the document was last modified"""
  _updatedAt: ToolshopDateTime

  """Current document revision"""
  _rev: String
  _key: String
  name: String
  url: String
  social: ToolshopSocialmedia
  image: ToolshopImage
  imageDark: ToolshopImage
  imageColor: ToolshopImage
}

input ToolshopCompanyFilter {
  """Apply filters on document level"""
  _: ToolshopSanity_DocumentFilter
  _id: ToolshopIDFilter
  _type: ToolshopStringFilter
  _createdAt: ToolshopDatetimeFilter
  _updatedAt: ToolshopDatetimeFilter
  _rev: ToolshopStringFilter
  _key: ToolshopStringFilter
  name: ToolshopStringFilter
  url: ToolshopStringFilter
  social: ToolshopSocialmediaFilter
  image: ToolshopImageFilter
  imageDark: ToolshopImageFilter
  imageColor: ToolshopImageFilter
}

union ToolshopCompanyOrPeople = ToolshopCompany | ToolshopPeople

input ToolshopCompanySorting {
  _id: ToolshopSortOrder
  _type: ToolshopSortOrder
  _createdAt: ToolshopSortOrder
  _updatedAt: ToolshopSortOrder
  _rev: ToolshopSortOrder
  _key: ToolshopSortOrder
  name: ToolshopSortOrder
  url: ToolshopSortOrder
  social: ToolshopSocialmediaSorting
  image: ToolshopImageSorting
  imageDark: ToolshopImageSorting
  imageColor: ToolshopImageSorting
}

type ToolshopDatabase implements ToolshopDocument {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: ToolshopDateTime

  """Date the document was last modified"""
  _updatedAt: ToolshopDateTime

  """Current document revision"""
  _rev: String
  _key: String
  title: String
}

input ToolshopDatabaseFilter {
  """Apply filters on document level"""
  _: ToolshopSanity_DocumentFilter
  _id: ToolshopIDFilter
  _type: ToolshopStringFilter
  _createdAt: ToolshopDatetimeFilter
  _updatedAt: ToolshopDatetimeFilter
  _rev: ToolshopStringFilter
  _key: ToolshopStringFilter
  title: ToolshopStringFilter
}

input ToolshopDatabaseSorting {
  _id: ToolshopSortOrder
  _type: ToolshopSortOrder
  _createdAt: ToolshopSortOrder
  _updatedAt: ToolshopSortOrder
  _rev: ToolshopSortOrder
  _key: ToolshopSortOrder
  title: ToolshopSortOrder
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format
outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for
representation of dates and times using the Gregorian calendar.
"""
scalar ToolshopDate

input ToolshopDateFilter {
  """Checks if the value is equal to the given input."""
  eq: ToolshopDate

  """Checks if the value is not equal to the given input."""
  neq: ToolshopDate

  """Checks if the value is greater than the given input."""
  gt: ToolshopDate

  """Checks if the value is greater than or equal to the given input."""
  gte: ToolshopDate

  """Checks if the value is lesser than the given input."""
  lt: ToolshopDate

  """Checks if the value is lesser than or equal to the given input."""
  lte: ToolshopDate
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar ToolshopDateTime

input ToolshopDatetimeFilter {
  """Checks if the value is equal to the given input."""
  eq: ToolshopDateTime

  """Checks if the value is not equal to the given input."""
  neq: ToolshopDateTime

  """Checks if the value is greater than the given input."""
  gt: ToolshopDateTime

  """Checks if the value is greater than or equal to the given input."""
  gte: ToolshopDateTime

  """Checks if the value is lesser than the given input."""
  lt: ToolshopDateTime

  """Checks if the value is lesser than or equal to the given input."""
  lte: ToolshopDateTime
}

"""A Sanity document"""
interface ToolshopDocument {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: ToolshopDateTime

  """Date the document was last modified"""
  _updatedAt: ToolshopDateTime

  """Current document revision"""
  _rev: String
}

input ToolshopDocumentFilter {
  """Apply filters on document level"""
  _: ToolshopSanity_DocumentFilter
  _id: ToolshopIDFilter
  _type: ToolshopStringFilter
  _createdAt: ToolshopDatetimeFilter
  _updatedAt: ToolshopDatetimeFilter
  _rev: ToolshopStringFilter
}

input ToolshopDocumentSorting {
  _id: ToolshopSortOrder
  _type: ToolshopSortOrder
  _createdAt: ToolshopSortOrder
  _updatedAt: ToolshopSortOrder
  _rev: ToolshopSortOrder
}

type ToolshopEvent implements ToolshopDocument {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: ToolshopDateTime

  """Date the document was last modified"""
  _updatedAt: ToolshopDateTime

  """Current document revision"""
  _rev: String
  _key: String
  name: String
  slug: ToolshopSlug
  date: ToolshopDate

  """Optional"""
  endDate: ToolshopDate

  """E.g. 9AM - 1PM PDT"""
  time: String
  mainCallToActionLabel: String

  """Use `#register` if you are using the inline registration form"""
  mainCallToActionUrl: String
  colorMode: String
  colorPrimary: ToolshopColor
  colorButtonBackground: ToolshopColor
  colorButtonText: ToolshopColor
  pancakes: [ToolshopChecklistOrFeatureOrFooterOrHeroOrPrefooterOrRegisterOrScheduleOrSchedulesOrSpeakersOrSponsorsOrVideoOrVideos]
  eventConfirmationPageWysiwygRaw: JSON
  onDemandPagePancakes: [ToolshopFeatureOrPrefooterOrVideoOrVideos]
  eventPerksPage: ToolshopPerksPage
  seofields: ToolshopSeofields
  tags: ToolshopTags
}

input ToolshopEventFilter {
  """Apply filters on document level"""
  _: ToolshopSanity_DocumentFilter
  _id: ToolshopIDFilter
  _type: ToolshopStringFilter
  _createdAt: ToolshopDatetimeFilter
  _updatedAt: ToolshopDatetimeFilter
  _rev: ToolshopStringFilter
  _key: ToolshopStringFilter
  name: ToolshopStringFilter
  slug: ToolshopSlugFilter
  date: ToolshopDateFilter
  endDate: ToolshopDateFilter
  time: ToolshopStringFilter
  mainCallToActionLabel: ToolshopStringFilter
  mainCallToActionUrl: ToolshopStringFilter
  colorMode: ToolshopStringFilter
  colorPrimary: ToolshopColorFilter
  colorButtonBackground: ToolshopColorFilter
  colorButtonText: ToolshopColorFilter
  eventPerksPage: ToolshopPerksPageFilter
  seofields: ToolshopSeofieldsFilter
  tags: ToolshopTagsFilter
}

input ToolshopEventSorting {
  _id: ToolshopSortOrder
  _type: ToolshopSortOrder
  _createdAt: ToolshopSortOrder
  _updatedAt: ToolshopSortOrder
  _rev: ToolshopSortOrder
  _key: ToolshopSortOrder
  name: ToolshopSortOrder
  slug: ToolshopSlugSorting
  date: ToolshopSortOrder
  endDate: ToolshopSortOrder
  time: ToolshopSortOrder
  mainCallToActionLabel: ToolshopSortOrder
  mainCallToActionUrl: ToolshopSortOrder
  colorMode: ToolshopSortOrder
  colorPrimary: ToolshopColorSorting
  colorButtonBackground: ToolshopColorSorting
  colorButtonText: ToolshopColorSorting
  eventPerksPage: ToolshopPerksPageSorting
  seofields: ToolshopSeofieldsSorting
  tags: ToolshopTagsSorting
}

type ToolshopExcludeFromSitemap implements ToolshopDocument {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: ToolshopDateTime

  """Date the document was last modified"""
  _updatedAt: ToolshopDateTime

  """Current document revision"""
  _rev: String
  _key: String
  exclude: String
}

input ToolshopExcludeFromSitemapFilter {
  """Apply filters on document level"""
  _: ToolshopSanity_DocumentFilter
  _id: ToolshopIDFilter
  _type: ToolshopStringFilter
  _createdAt: ToolshopDatetimeFilter
  _updatedAt: ToolshopDatetimeFilter
  _rev: ToolshopStringFilter
  _key: ToolshopStringFilter
  exclude: ToolshopStringFilter
}

input ToolshopExcludeFromSitemapSorting {
  _id: ToolshopSortOrder
  _type: ToolshopSortOrder
  _createdAt: ToolshopSortOrder
  _updatedAt: ToolshopSortOrder
  _rev: ToolshopSortOrder
  _key: ToolshopSortOrder
  exclude: ToolshopSortOrder
}

type ToolshopExperts implements ToolshopDocument {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: ToolshopDateTime

  """Date the document was last modified"""
  _updatedAt: ToolshopDateTime

  """Current document revision"""
  _rev: String
  _key: String
  featured: Boolean
  person: ToolshopPeople
  email: String
  location: String
  budget: ToolshopExpertsBudget
  cardBackgroundColor: ToolshopColor
  cardBackground: ToolshopNetlifyImage
  backgroundColor: ToolshopColor
  background: ToolshopNetlifyImage
  aboutRaw: JSON
  services: [ToolshopExpertsService]
  frameworks: [ToolshopExpertsFramework]
  cms: [ToolshopExpertsCms]
  ecommerce: [ToolshopExpertsEcommerce]
  region: [ToolshopExpertsRegion]
  usecase: [ToolshopExpertsUseCase]
  projects: [ToolshopWebsite]
  builtwith: [ToolshopWebsite]
}

type ToolshopExpertsBudget implements ToolshopDocument {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: ToolshopDateTime

  """Date the document was last modified"""
  _updatedAt: ToolshopDateTime

  """Current document revision"""
  _rev: String
  _key: String
  value: String
}

input ToolshopExpertsBudgetFilter {
  """Apply filters on document level"""
  _: ToolshopSanity_DocumentFilter
  _id: ToolshopIDFilter
  _type: ToolshopStringFilter
  _createdAt: ToolshopDatetimeFilter
  _updatedAt: ToolshopDatetimeFilter
  _rev: ToolshopStringFilter
  _key: ToolshopStringFilter
  value: ToolshopStringFilter
}

input ToolshopExpertsBudgetSorting {
  _id: ToolshopSortOrder
  _type: ToolshopSortOrder
  _createdAt: ToolshopSortOrder
  _updatedAt: ToolshopSortOrder
  _rev: ToolshopSortOrder
  _key: ToolshopSortOrder
  value: ToolshopSortOrder
}

type ToolshopExpertsCms implements ToolshopDocument {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: ToolshopDateTime

  """Date the document was last modified"""
  _updatedAt: ToolshopDateTime

  """Current document revision"""
  _rev: String
  _key: String
  title: String
  slug: ToolshopSlug
}

input ToolshopExpertsCmsFilter {
  """Apply filters on document level"""
  _: ToolshopSanity_DocumentFilter
  _id: ToolshopIDFilter
  _type: ToolshopStringFilter
  _createdAt: ToolshopDatetimeFilter
  _updatedAt: ToolshopDatetimeFilter
  _rev: ToolshopStringFilter
  _key: ToolshopStringFilter
  title: ToolshopStringFilter
  slug: ToolshopSlugFilter
}

input ToolshopExpertsCmsSorting {
  _id: ToolshopSortOrder
  _type: ToolshopSortOrder
  _createdAt: ToolshopSortOrder
  _updatedAt: ToolshopSortOrder
  _rev: ToolshopSortOrder
  _key: ToolshopSortOrder
  title: ToolshopSortOrder
  slug: ToolshopSlugSorting
}

type ToolshopExpertsEcommerce implements ToolshopDocument {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: ToolshopDateTime

  """Date the document was last modified"""
  _updatedAt: ToolshopDateTime

  """Current document revision"""
  _rev: String
  _key: String
  title: String
  slug: ToolshopSlug
}

input ToolshopExpertsEcommerceFilter {
  """Apply filters on document level"""
  _: ToolshopSanity_DocumentFilter
  _id: ToolshopIDFilter
  _type: ToolshopStringFilter
  _createdAt: ToolshopDatetimeFilter
  _updatedAt: ToolshopDatetimeFilter
  _rev: ToolshopStringFilter
  _key: ToolshopStringFilter
  title: ToolshopStringFilter
  slug: ToolshopSlugFilter
}

input ToolshopExpertsEcommerceSorting {
  _id: ToolshopSortOrder
  _type: ToolshopSortOrder
  _createdAt: ToolshopSortOrder
  _updatedAt: ToolshopSortOrder
  _rev: ToolshopSortOrder
  _key: ToolshopSortOrder
  title: ToolshopSortOrder
  slug: ToolshopSlugSorting
}

input ToolshopExpertsFilter {
  """Apply filters on document level"""
  _: ToolshopSanity_DocumentFilter
  _id: ToolshopIDFilter
  _type: ToolshopStringFilter
  _createdAt: ToolshopDatetimeFilter
  _updatedAt: ToolshopDatetimeFilter
  _rev: ToolshopStringFilter
  _key: ToolshopStringFilter
  featured: ToolshopBooleanFilter
  person: ToolshopPeopleFilter
  email: ToolshopStringFilter
  location: ToolshopStringFilter
  budget: ToolshopExpertsBudgetFilter
  cardBackgroundColor: ToolshopColorFilter
  cardBackground: ToolshopNetlifyImageFilter
  backgroundColor: ToolshopColorFilter
  background: ToolshopNetlifyImageFilter
}

type ToolshopExpertsFramework implements ToolshopDocument {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: ToolshopDateTime

  """Date the document was last modified"""
  _updatedAt: ToolshopDateTime

  """Current document revision"""
  _rev: String
  _key: String
  title: String
  slug: ToolshopSlug
}

input ToolshopExpertsFrameworkFilter {
  """Apply filters on document level"""
  _: ToolshopSanity_DocumentFilter
  _id: ToolshopIDFilter
  _type: ToolshopStringFilter
  _createdAt: ToolshopDatetimeFilter
  _updatedAt: ToolshopDatetimeFilter
  _rev: ToolshopStringFilter
  _key: ToolshopStringFilter
  title: ToolshopStringFilter
  slug: ToolshopSlugFilter
}

input ToolshopExpertsFrameworkSorting {
  _id: ToolshopSortOrder
  _type: ToolshopSortOrder
  _createdAt: ToolshopSortOrder
  _updatedAt: ToolshopSortOrder
  _rev: ToolshopSortOrder
  _key: ToolshopSortOrder
  title: ToolshopSortOrder
  slug: ToolshopSlugSorting
}

type ToolshopExpertsRegion implements ToolshopDocument {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: ToolshopDateTime

  """Date the document was last modified"""
  _updatedAt: ToolshopDateTime

  """Current document revision"""
  _rev: String
  _key: String
  title: String
  slug: ToolshopSlug
}

input ToolshopExpertsRegionFilter {
  """Apply filters on document level"""
  _: ToolshopSanity_DocumentFilter
  _id: ToolshopIDFilter
  _type: ToolshopStringFilter
  _createdAt: ToolshopDatetimeFilter
  _updatedAt: ToolshopDatetimeFilter
  _rev: ToolshopStringFilter
  _key: ToolshopStringFilter
  title: ToolshopStringFilter
  slug: ToolshopSlugFilter
}

input ToolshopExpertsRegionSorting {
  _id: ToolshopSortOrder
  _type: ToolshopSortOrder
  _createdAt: ToolshopSortOrder
  _updatedAt: ToolshopSortOrder
  _rev: ToolshopSortOrder
  _key: ToolshopSortOrder
  title: ToolshopSortOrder
  slug: ToolshopSlugSorting
}

type ToolshopExpertsService implements ToolshopDocument {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: ToolshopDateTime

  """Date the document was last modified"""
  _updatedAt: ToolshopDateTime

  """Current document revision"""
  _rev: String
  _key: String
  title: String
  slug: ToolshopSlug
}

input ToolshopExpertsServiceFilter {
  """Apply filters on document level"""
  _: ToolshopSanity_DocumentFilter
  _id: ToolshopIDFilter
  _type: ToolshopStringFilter
  _createdAt: ToolshopDatetimeFilter
  _updatedAt: ToolshopDatetimeFilter
  _rev: ToolshopStringFilter
  _key: ToolshopStringFilter
  title: ToolshopStringFilter
  slug: ToolshopSlugFilter
}

input ToolshopExpertsServiceSorting {
  _id: ToolshopSortOrder
  _type: ToolshopSortOrder
  _createdAt: ToolshopSortOrder
  _updatedAt: ToolshopSortOrder
  _rev: ToolshopSortOrder
  _key: ToolshopSortOrder
  title: ToolshopSortOrder
  slug: ToolshopSlugSorting
}

input ToolshopExpertsSorting {
  _id: ToolshopSortOrder
  _type: ToolshopSortOrder
  _createdAt: ToolshopSortOrder
  _updatedAt: ToolshopSortOrder
  _rev: ToolshopSortOrder
  _key: ToolshopSortOrder
  featured: ToolshopSortOrder
  email: ToolshopSortOrder
  location: ToolshopSortOrder
  cardBackgroundColor: ToolshopColorSorting
  cardBackground: ToolshopNetlifyImageSorting
  backgroundColor: ToolshopColorSorting
  background: ToolshopNetlifyImageSorting
}

type ToolshopExpertsUseCase implements ToolshopDocument {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: ToolshopDateTime

  """Date the document was last modified"""
  _updatedAt: ToolshopDateTime

  """Current document revision"""
  _rev: String
  _key: String
  title: String
  slug: ToolshopSlug
}

input ToolshopExpertsUseCaseFilter {
  """Apply filters on document level"""
  _: ToolshopSanity_DocumentFilter
  _id: ToolshopIDFilter
  _type: ToolshopStringFilter
  _createdAt: ToolshopDatetimeFilter
  _updatedAt: ToolshopDatetimeFilter
  _rev: ToolshopStringFilter
  _key: ToolshopStringFilter
  title: ToolshopStringFilter
  slug: ToolshopSlugFilter
}

input ToolshopExpertsUseCaseSorting {
  _id: ToolshopSortOrder
  _type: ToolshopSortOrder
  _createdAt: ToolshopSortOrder
  _updatedAt: ToolshopSortOrder
  _rev: ToolshopSortOrder
  _key: ToolshopSortOrder
  title: ToolshopSortOrder
  slug: ToolshopSlugSorting
}

type ToolshopFeature {
  _key: String
  _type: String
  eventwysiwygRaw: JSON
  image: ToolshopNetlifyImage

  """Just the video ID e.g. `PPtmowJoe3s`"""
  videoId: String
  imagePosition: String
  colorFeatureBackground: ToolshopColor
  colorFeatureText: ToolshopColor
}

union ToolshopFeatureOrPrefooterOrVideoOrVideos = ToolshopFeature | ToolshopPrefooter | ToolshopVideo | ToolshopVideos

type ToolshopFeatures {
  _key: String
  _type: String
  pancakeIntro: ToolshopPancakeIntro
  features: [ToolshopFeature]
  pancakeTheme: ToolshopPancakeTheme
}

union ToolshopFeaturesOrHubspotFormOrLogosOrPeopleWithBioOrPrefooterOrRelatedContentOrTestimonialsOrTextWithColumnsOrVideoSection = ToolshopFeatures | ToolshopHubspotForm | ToolshopLogos | ToolshopPeopleWithBio | ToolshopPrefooter | ToolshopRelatedContent | ToolshopTestimonials | ToolshopTextWithColumns | ToolshopVideoSection

union ToolshopFeaturesOrHubspotFormOrLogosOrPeopleWithBioOrPrefooterOrTestimonialsOrTextWithColumnsOrVideoSection = ToolshopFeatures | ToolshopHubspotForm | ToolshopLogos | ToolshopPeopleWithBio | ToolshopPrefooter | ToolshopTestimonials | ToolshopTextWithColumns | ToolshopVideoSection

type ToolshopFile {
  _key: String
  _type: String
  asset: ToolshopSanityFileAsset
}

input ToolshopFileFilter {
  _key: ToolshopStringFilter
  _type: ToolshopStringFilter
  asset: ToolshopSanityFileAssetFilter
}

input ToolshopFileSorting {
  _key: ToolshopSortOrder
  _type: ToolshopSortOrder
}

input ToolshopFloatFilter {
  """Checks if the value is equal to the given input."""
  eq: Float

  """Checks if the value is not equal to the given input."""
  neq: Float

  """Checks if the value is greater than the given input."""
  gt: Float

  """Checks if the value is greater than or equal to the given input."""
  gte: Float

  """Checks if the value is lesser than the given input."""
  lt: Float

  """Checks if the value is lesser than or equal to the given input."""
  lte: Float
}

type ToolshopFooter {
  _key: String
  _type: String
  facebook: String
  twitter: String
  linkedin: String
}

type ToolshopFramework implements ToolshopDocument {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: ToolshopDateTime

  """Date the document was last modified"""
  _updatedAt: ToolshopDateTime

  """Current document revision"""
  _rev: String
  _key: String
  title: String
  slug: ToolshopSlug

  """A short, concise string of text describing this content."""
  description: String
  body: String

  """Link this API integration to a partner."""
  partner: ToolshopPartner
  authors: [ToolshopPartnerOrPeople]

  """Link to integration documentation."""
  docsUrl: String

  """Link to install the build plugin in a Netlify site"""
  installUrl: String

  """Integration version"""
  version: String

  """Rating for the integration provided by customers."""
  rating: Float

  """Maps to the scenario ID that contains the integration."""
  scenarioId: String

  """
  Flag determining whether the integration is verified by Netlify to be safe.
  """
  netlifyVerified: Boolean

  """Determines whether the integration was verified by the partner."""
  partnerVerified: Boolean

  """Determines whether the integration is production-ready or staged."""
  environment: String

  """Integration availability to customers."""
  status: String
  relatedContent: [ToolshopRelatedContent]
  tags: [ToolshopTag]
  seofields: ToolshopSeofields
}

input ToolshopFrameworkFilter {
  """Apply filters on document level"""
  _: ToolshopSanity_DocumentFilter
  _id: ToolshopIDFilter
  _type: ToolshopStringFilter
  _createdAt: ToolshopDatetimeFilter
  _updatedAt: ToolshopDatetimeFilter
  _rev: ToolshopStringFilter
  _key: ToolshopStringFilter
  title: ToolshopStringFilter
  slug: ToolshopSlugFilter
  description: ToolshopStringFilter
  body: ToolshopStringFilter
  partner: ToolshopPartnerFilter
  docsUrl: ToolshopStringFilter
  installUrl: ToolshopStringFilter
  version: ToolshopStringFilter
  rating: ToolshopFloatFilter
  scenarioId: ToolshopStringFilter
  netlifyVerified: ToolshopBooleanFilter
  partnerVerified: ToolshopBooleanFilter
  environment: ToolshopStringFilter
  status: ToolshopStringFilter
  seofields: ToolshopSeofieldsFilter
}

input ToolshopFrameworkSorting {
  _id: ToolshopSortOrder
  _type: ToolshopSortOrder
  _createdAt: ToolshopSortOrder
  _updatedAt: ToolshopSortOrder
  _rev: ToolshopSortOrder
  _key: ToolshopSortOrder
  title: ToolshopSortOrder
  slug: ToolshopSlugSorting
  description: ToolshopSortOrder
  body: ToolshopSortOrder
  docsUrl: ToolshopSortOrder
  installUrl: ToolshopSortOrder
  version: ToolshopSortOrder
  rating: ToolshopSortOrder
  scenarioId: ToolshopSortOrder
  netlifyVerified: ToolshopSortOrder
  partnerVerified: ToolshopSortOrder
  environment: ToolshopSortOrder
  status: ToolshopSortOrder
  seofields: ToolshopSeofieldsSorting
}

type ToolshopGeo implements ToolshopDocument {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: ToolshopDateTime

  """Date the document was last modified"""
  _updatedAt: ToolshopDateTime

  """Current document revision"""
  _rev: String
  _key: String
  title: String
}

input ToolshopGeoFilter {
  """Apply filters on document level"""
  _: ToolshopSanity_DocumentFilter
  _id: ToolshopIDFilter
  _type: ToolshopStringFilter
  _createdAt: ToolshopDatetimeFilter
  _updatedAt: ToolshopDatetimeFilter
  _rev: ToolshopStringFilter
  _key: ToolshopStringFilter
  title: ToolshopStringFilter
}

type ToolshopGeopoint {
  _key: String
  _type: String
  lat: Float
  lng: Float
  alt: Float
}

input ToolshopGeopointFilter {
  _key: ToolshopStringFilter
  _type: ToolshopStringFilter
  lat: ToolshopFloatFilter
  lng: ToolshopFloatFilter
  alt: ToolshopFloatFilter
}

input ToolshopGeopointSorting {
  _key: ToolshopSortOrder
  _type: ToolshopSortOrder
  lat: ToolshopSortOrder
  lng: ToolshopSortOrder
  alt: ToolshopSortOrder
}

input ToolshopGeoSorting {
  _id: ToolshopSortOrder
  _type: ToolshopSortOrder
  _createdAt: ToolshopSortOrder
  _updatedAt: ToolshopSortOrder
  _rev: ToolshopSortOrder
  _key: ToolshopSortOrder
  title: ToolshopSortOrder
}

type ToolshopGraphql implements ToolshopDocument {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: ToolshopDateTime

  """Date the document was last modified"""
  _updatedAt: ToolshopDateTime

  """Current document revision"""
  _rev: String
  _key: String
  title: String
  slug: ToolshopSlug

  """A short, concise string of text describing this content."""
  description: String
  body: String
  screenshots: [ToolshopNetlifyImage]

  """Link this API integration to a partner."""
  partner: ToolshopPartner
  authors: [ToolshopPartnerOrPeople]

  """Link to integration documentation."""
  docsUrl: String

  """API endpoint that can be queried."""
  endpointUrl: String

  """Link to install the build plugin in a Netlify site"""
  installUrl: String

  """Link to report plugin issues."""
  issuesUrl: String

  """Integration version"""
  version: String

  """Rating for the integration provided by customers."""
  rating: Float

  """Maps to the scenario ID that contains the integration."""
  scenarioId: String

  """
  Flag determining whether the integration is verified by Netlify to be safe.
  """
  netlifyVerified: Boolean

  """Determines whether the integration was verified by the partner."""
  partnerVerified: Boolean

  """Determines whether the integration is production-ready or staged."""
  environment: String

  """Integration availability to customers."""
  status: String
  relatedContent: [ToolshopRelatedContent]
  tags: [ToolshopTag]
  seofields: ToolshopSeofields
}

input ToolshopGraphqlFilter {
  """Apply filters on document level"""
  _: ToolshopSanity_DocumentFilter
  _id: ToolshopIDFilter
  _type: ToolshopStringFilter
  _createdAt: ToolshopDatetimeFilter
  _updatedAt: ToolshopDatetimeFilter
  _rev: ToolshopStringFilter
  _key: ToolshopStringFilter
  title: ToolshopStringFilter
  slug: ToolshopSlugFilter
  description: ToolshopStringFilter
  body: ToolshopStringFilter
  partner: ToolshopPartnerFilter
  docsUrl: ToolshopStringFilter
  endpointUrl: ToolshopStringFilter
  installUrl: ToolshopStringFilter
  issuesUrl: ToolshopStringFilter
  version: ToolshopStringFilter
  rating: ToolshopFloatFilter
  scenarioId: ToolshopStringFilter
  netlifyVerified: ToolshopBooleanFilter
  partnerVerified: ToolshopBooleanFilter
  environment: ToolshopStringFilter
  status: ToolshopStringFilter
  seofields: ToolshopSeofieldsFilter
}

input ToolshopGraphqlSorting {
  _id: ToolshopSortOrder
  _type: ToolshopSortOrder
  _createdAt: ToolshopSortOrder
  _updatedAt: ToolshopSortOrder
  _rev: ToolshopSortOrder
  _key: ToolshopSortOrder
  title: ToolshopSortOrder
  slug: ToolshopSlugSorting
  description: ToolshopSortOrder
  body: ToolshopSortOrder
  docsUrl: ToolshopSortOrder
  endpointUrl: ToolshopSortOrder
  installUrl: ToolshopSortOrder
  issuesUrl: ToolshopSortOrder
  version: ToolshopSortOrder
  rating: ToolshopSortOrder
  scenarioId: ToolshopSortOrder
  netlifyVerified: ToolshopSortOrder
  partnerVerified: ToolshopSortOrder
  environment: ToolshopSortOrder
  status: ToolshopSortOrder
  seofields: ToolshopSeofieldsSorting
}

type ToolshopHero {
  _key: String
  _type: String
  eventwysiwygRaw: JSON
  logo: ToolshopNetlifyImage
  image: ToolshopNetlifyImage
  backgroundImage: ToolshopImage

  """See https://www.netlify.com/press#logos"""
  colorNetlifyLogo: String
  colorHeroBackground: ToolshopColor
  colorHeroText: ToolshopColor
  colorHeroDate: ToolshopColor
  colorHeroButtonBackground: ToolshopColor
  colorHeroButtonText: ToolshopColor
}

type ToolshopHslaColor {
  _key: String
  _type: String
  h: Float
  s: Float
  l: Float
  a: Float
}

input ToolshopHslaColorFilter {
  _key: ToolshopStringFilter
  _type: ToolshopStringFilter
  h: ToolshopFloatFilter
  s: ToolshopFloatFilter
  l: ToolshopFloatFilter
  a: ToolshopFloatFilter
}

input ToolshopHslaColorSorting {
  _key: ToolshopSortOrder
  _type: ToolshopSortOrder
  h: ToolshopSortOrder
  s: ToolshopSortOrder
  l: ToolshopSortOrder
  a: ToolshopSortOrder
}

type ToolshopHsvaColor {
  _key: String
  _type: String
  h: Float
  s: Float
  v: Float
  a: Float
}

input ToolshopHsvaColorFilter {
  _key: ToolshopStringFilter
  _type: ToolshopStringFilter
  h: ToolshopFloatFilter
  s: ToolshopFloatFilter
  v: ToolshopFloatFilter
  a: ToolshopFloatFilter
}

input ToolshopHsvaColorSorting {
  _key: ToolshopSortOrder
  _type: ToolshopSortOrder
  h: ToolshopSortOrder
  s: ToolshopSortOrder
  v: ToolshopSortOrder
  a: ToolshopSortOrder
}

type ToolshopHubspotForm {
  _key: String
  _type: String
  title: String
  introRaw: JSON
  hubspotid: String
  pancakeTheme: ToolshopPancakeTheme
}

input ToolshopIDFilter {
  """Checks if the value is equal to the given input."""
  eq: ID

  """Checks if the value is not equal to the given input."""
  neq: ID

  """Checks if the value matches the given word/words."""
  matches: ID
  in: [ID!]
  nin: [ID!]
}

type ToolshopImage {
  _key: String
  _type: String
  asset: ToolshopSanityImageAsset
  hotspot: ToolshopSanityImageHotspot
  crop: ToolshopSanityImageCrop
}

input ToolshopImageFilter {
  _key: ToolshopStringFilter
  _type: ToolshopStringFilter
  asset: ToolshopSanityImageAssetFilter
  hotspot: ToolshopSanityImageHotspotFilter
  crop: ToolshopSanityImageCropFilter
}

input ToolshopImageSorting {
  _key: ToolshopSortOrder
  _type: ToolshopSortOrder
  hotspot: ToolshopSanityImageHotspotSorting
  crop: ToolshopSanityImageCropSorting
}

type ToolshopIndustry implements ToolshopDocument {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: ToolshopDateTime

  """Date the document was last modified"""
  _updatedAt: ToolshopDateTime

  """Current document revision"""
  _rev: String
  _key: String
  title: String
}

input ToolshopIndustryFilter {
  """Apply filters on document level"""
  _: ToolshopSanity_DocumentFilter
  _id: ToolshopIDFilter
  _type: ToolshopStringFilter
  _createdAt: ToolshopDatetimeFilter
  _updatedAt: ToolshopDatetimeFilter
  _rev: ToolshopStringFilter
  _key: ToolshopStringFilter
  title: ToolshopStringFilter
}

input ToolshopIndustrySorting {
  _id: ToolshopSortOrder
  _type: ToolshopSortOrder
  _createdAt: ToolshopSortOrder
  _updatedAt: ToolshopSortOrder
  _rev: ToolshopSortOrder
  _key: ToolshopSortOrder
  title: ToolshopSortOrder
}

type ToolshopIntegration implements ToolshopDocument {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: ToolshopDateTime

  """Date the document was last modified"""
  _updatedAt: ToolshopDateTime

  """Current document revision"""
  _rev: String
  _key: String
  title: String

  """
  Select the type of integration. You can search by typing the name or click the arrow to list available types.
  """
  integrationType: ToolshopIntegrationType

  """
  Select to distinguish this as a foundational framework (React), meta-framework
  (Next.js), or the type of framework that goes across all frameworks (Remix, Astro)
  """
  frameworkType: String
  format: String

  """Link this GraphQL API integration to a partner."""
  partner: ToolshopPartner
  slug: ToolshopSlug
  description: String
  authors: [ToolshopPartnerOrPeople]

  """URL to blog post about how to deploy a specific framework."""
  blogPostUrl: String

  """Link to the changelog for the build plugin."""
  changelogUrl: String

  """Link to integration documentation."""
  docsUrl: String

  """API endpoint that can be queried."""
  endpointUrl: String

  """Link to install the build plugin in a Netlify site"""
  installUrl: String

  """Link to report plugin issues."""
  issuesUrl: String

  """Link to the logs view within the provider UI"""
  logsUiUrl: String

  """Link to the build plugin package on npm."""
  npmUrl: String

  """Link to the build plugin repository."""
  repoUrl: String

  """URL to template you can Deploy on Netlify with one-click of a button."""
  templateUrl: String

  """An external URL to the website for the framework."""
  websiteUrl: String

  """Integration version"""
  version: String
  compatibility: [String]

  """Rating for the integration provided by customers."""
  rating: Float

  """Maps to the scenario ID that contains the integration."""
  scenarioId: String

  """
  Flag determining whether the integration is verified by Netlify to be safe.
  """
  netlifyVerified: Boolean

  """Determines whether the integration was verified by the partner."""
  partnerVerified: Boolean

  """Determines whether the integration is production-ready or staged."""
  environment: String

  """Integration availability to customers."""
  status: String
  relatedContent: [ToolshopRelatedContent]
  tags: [ToolshopTag]
  seofields: ToolshopSeofields
}

input ToolshopIntegrationFilter {
  """Apply filters on document level"""
  _: ToolshopSanity_DocumentFilter
  _id: ToolshopIDFilter
  _type: ToolshopStringFilter
  _createdAt: ToolshopDatetimeFilter
  _updatedAt: ToolshopDatetimeFilter
  _rev: ToolshopStringFilter
  _key: ToolshopStringFilter
  title: ToolshopStringFilter
  integrationType: ToolshopIntegrationTypeFilter
  frameworkType: ToolshopStringFilter
  format: ToolshopStringFilter
  partner: ToolshopPartnerFilter
  slug: ToolshopSlugFilter
  description: ToolshopStringFilter
  blogPostUrl: ToolshopStringFilter
  changelogUrl: ToolshopStringFilter
  docsUrl: ToolshopStringFilter
  endpointUrl: ToolshopStringFilter
  installUrl: ToolshopStringFilter
  issuesUrl: ToolshopStringFilter
  logsUiUrl: ToolshopStringFilter
  npmUrl: ToolshopStringFilter
  repoUrl: ToolshopStringFilter
  templateUrl: ToolshopStringFilter
  websiteUrl: ToolshopStringFilter
  version: ToolshopStringFilter
  rating: ToolshopFloatFilter
  scenarioId: ToolshopStringFilter
  netlifyVerified: ToolshopBooleanFilter
  partnerVerified: ToolshopBooleanFilter
  environment: ToolshopStringFilter
  status: ToolshopStringFilter
  seofields: ToolshopSeofieldsFilter
}

input ToolshopIntegrationSorting {
  _id: ToolshopSortOrder
  _type: ToolshopSortOrder
  _createdAt: ToolshopSortOrder
  _updatedAt: ToolshopSortOrder
  _rev: ToolshopSortOrder
  _key: ToolshopSortOrder
  title: ToolshopSortOrder
  frameworkType: ToolshopSortOrder
  format: ToolshopSortOrder
  slug: ToolshopSlugSorting
  description: ToolshopSortOrder
  blogPostUrl: ToolshopSortOrder
  changelogUrl: ToolshopSortOrder
  docsUrl: ToolshopSortOrder
  endpointUrl: ToolshopSortOrder
  installUrl: ToolshopSortOrder
  issuesUrl: ToolshopSortOrder
  logsUiUrl: ToolshopSortOrder
  npmUrl: ToolshopSortOrder
  repoUrl: ToolshopSortOrder
  templateUrl: ToolshopSortOrder
  websiteUrl: ToolshopSortOrder
  version: ToolshopSortOrder
  rating: ToolshopSortOrder
  scenarioId: ToolshopSortOrder
  netlifyVerified: ToolshopSortOrder
  partnerVerified: ToolshopSortOrder
  environment: ToolshopSortOrder
  status: ToolshopSortOrder
  seofields: ToolshopSeofieldsSorting
}

type ToolshopIntegrationType implements ToolshopDocument {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: ToolshopDateTime

  """Date the document was last modified"""
  _updatedAt: ToolshopDateTime

  """Current document revision"""
  _rev: String
  _key: String
  title: String
  slug: ToolshopSlug
  description: String
}

input ToolshopIntegrationTypeFilter {
  """Apply filters on document level"""
  _: ToolshopSanity_DocumentFilter
  _id: ToolshopIDFilter
  _type: ToolshopStringFilter
  _createdAt: ToolshopDatetimeFilter
  _updatedAt: ToolshopDatetimeFilter
  _rev: ToolshopStringFilter
  _key: ToolshopStringFilter
  title: ToolshopStringFilter
  slug: ToolshopSlugFilter
  description: ToolshopStringFilter
}

input ToolshopIntegrationTypeSorting {
  _id: ToolshopSortOrder
  _type: ToolshopSortOrder
  _createdAt: ToolshopSortOrder
  _updatedAt: ToolshopSortOrder
  _rev: ToolshopSortOrder
  _key: ToolshopSortOrder
  title: ToolshopSortOrder
  slug: ToolshopSlugSorting
  description: ToolshopSortOrder
}

type ToolshopJamstackConfBasicPage implements ToolshopDocument {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: ToolshopDateTime

  """Date the document was last modified"""
  _updatedAt: ToolshopDateTime

  """Current document revision"""
  _rev: String
  _key: String
  title: String
  introRaw: JSON
  slug: ToolshopSlug
  textRaw: JSON
  year: String
  seofields: ToolshopSeofields
}

input ToolshopJamstackConfBasicPageFilter {
  """Apply filters on document level"""
  _: ToolshopSanity_DocumentFilter
  _id: ToolshopIDFilter
  _type: ToolshopStringFilter
  _createdAt: ToolshopDatetimeFilter
  _updatedAt: ToolshopDatetimeFilter
  _rev: ToolshopStringFilter
  _key: ToolshopStringFilter
  title: ToolshopStringFilter
  slug: ToolshopSlugFilter
  year: ToolshopStringFilter
  seofields: ToolshopSeofieldsFilter
}

input ToolshopJamstackConfBasicPageSorting {
  _id: ToolshopSortOrder
  _type: ToolshopSortOrder
  _createdAt: ToolshopSortOrder
  _updatedAt: ToolshopSortOrder
  _rev: ToolshopSortOrder
  _key: ToolshopSortOrder
  title: ToolshopSortOrder
  slug: ToolshopSlugSorting
  year: ToolshopSortOrder
  seofields: ToolshopSeofieldsSorting
}

type ToolshopLandingPage implements ToolshopDocument {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: ToolshopDateTime

  """Date the document was last modified"""
  _updatedAt: ToolshopDateTime

  """Current document revision"""
  _rev: String
  _key: String
  hideHero: Boolean

  """This will appear smaller and above the title"""
  preTitle: String
  title: String
  introRaw: JSON
  slug: ToolshopSlug
  formTitle: String
  formIntro: String
  hubspotid: String
  pancakes: [ToolshopFeaturesOrHubspotFormOrLogosOrPeopleWithBioOrPrefooterOrRelatedContentOrTestimonialsOrTextWithColumnsOrVideoSection]
  landingPageThankYouWysiwygRaw: JSON
  landingPageThankYouPancakes: [ToolshopFeaturesOrHubspotFormOrLogosOrPeopleWithBioOrPrefooterOrTestimonialsOrTextWithColumnsOrVideoSection]
  hideMenuFooter: Boolean
  seofields: ToolshopSeofields
  tags: ToolshopTags
}

input ToolshopLandingPageFilter {
  """Apply filters on document level"""
  _: ToolshopSanity_DocumentFilter
  _id: ToolshopIDFilter
  _type: ToolshopStringFilter
  _createdAt: ToolshopDatetimeFilter
  _updatedAt: ToolshopDatetimeFilter
  _rev: ToolshopStringFilter
  _key: ToolshopStringFilter
  hideHero: ToolshopBooleanFilter
  preTitle: ToolshopStringFilter
  title: ToolshopStringFilter
  slug: ToolshopSlugFilter
  formTitle: ToolshopStringFilter
  formIntro: ToolshopStringFilter
  hubspotid: ToolshopStringFilter
  hideMenuFooter: ToolshopBooleanFilter
  seofields: ToolshopSeofieldsFilter
  tags: ToolshopTagsFilter
}

input ToolshopLandingPageSorting {
  _id: ToolshopSortOrder
  _type: ToolshopSortOrder
  _createdAt: ToolshopSortOrder
  _updatedAt: ToolshopSortOrder
  _rev: ToolshopSortOrder
  _key: ToolshopSortOrder
  hideHero: ToolshopSortOrder
  preTitle: ToolshopSortOrder
  title: ToolshopSortOrder
  slug: ToolshopSlugSorting
  formTitle: ToolshopSortOrder
  formIntro: ToolshopSortOrder
  hubspotid: ToolshopSortOrder
  hideMenuFooter: ToolshopSortOrder
  seofields: ToolshopSeofieldsSorting
  tags: ToolshopTagsSorting
}

type ToolshopLogDrain implements ToolshopDocument {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: ToolshopDateTime

  """Date the document was last modified"""
  _updatedAt: ToolshopDateTime

  """Current document revision"""
  _rev: String
  _key: String
  title: String
  slug: ToolshopSlug
  format: String
  description: String

  """Link this API integration to a partner."""
  partner: ToolshopPartner
  authors: [ToolshopPartnerOrPeople]

  """Link to integration documentation."""
  docsUrl: String

  """Link to install the build plugin in a Netlify site"""
  installUrl: String

  """Link to the logs view within the provider UI"""
  logsUiUrl: String

  """Integration version"""
  version: String

  """Rating for the integration provided by customers."""
  rating: Float

  """Maps to the scenario ID that contains the integration."""
  scenarioId: String

  """
  Flag determining whether the integration is verified by Netlify to be safe.
  """
  netlifyVerified: Boolean

  """Determines whether the integration was verified by the partner."""
  partnerVerified: Boolean

  """Determines whether the integration is production-ready or staged."""
  environment: String

  """Integration availability to customers."""
  status: String
  relatedContent: [ToolshopRelatedContent]
  tags: [ToolshopTag]
  seofields: ToolshopSeofields
}

input ToolshopLogDrainFilter {
  """Apply filters on document level"""
  _: ToolshopSanity_DocumentFilter
  _id: ToolshopIDFilter
  _type: ToolshopStringFilter
  _createdAt: ToolshopDatetimeFilter
  _updatedAt: ToolshopDatetimeFilter
  _rev: ToolshopStringFilter
  _key: ToolshopStringFilter
  title: ToolshopStringFilter
  slug: ToolshopSlugFilter
  format: ToolshopStringFilter
  description: ToolshopStringFilter
  partner: ToolshopPartnerFilter
  docsUrl: ToolshopStringFilter
  installUrl: ToolshopStringFilter
  logsUiUrl: ToolshopStringFilter
  version: ToolshopStringFilter
  rating: ToolshopFloatFilter
  scenarioId: ToolshopStringFilter
  netlifyVerified: ToolshopBooleanFilter
  partnerVerified: ToolshopBooleanFilter
  environment: ToolshopStringFilter
  status: ToolshopStringFilter
  seofields: ToolshopSeofieldsFilter
}

input ToolshopLogDrainSorting {
  _id: ToolshopSortOrder
  _type: ToolshopSortOrder
  _createdAt: ToolshopSortOrder
  _updatedAt: ToolshopSortOrder
  _rev: ToolshopSortOrder
  _key: ToolshopSortOrder
  title: ToolshopSortOrder
  slug: ToolshopSlugSorting
  format: ToolshopSortOrder
  description: ToolshopSortOrder
  docsUrl: ToolshopSortOrder
  installUrl: ToolshopSortOrder
  logsUiUrl: ToolshopSortOrder
  version: ToolshopSortOrder
  rating: ToolshopSortOrder
  scenarioId: ToolshopSortOrder
  netlifyVerified: ToolshopSortOrder
  partnerVerified: ToolshopSortOrder
  environment: ToolshopSortOrder
  status: ToolshopSortOrder
  seofields: ToolshopSeofieldsSorting
}

type ToolshopLogos {
  _key: String
  _type: String
  pancakeIntro: ToolshopPancakeIntro
  companies: [ToolshopCompany]
  pancakeTheme: ToolshopPancakeTheme
}

type ToolshopMediaTag implements ToolshopDocument {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: ToolshopDateTime

  """Date the document was last modified"""
  _updatedAt: ToolshopDateTime

  """Current document revision"""
  _rev: String
  _key: String
  name: ToolshopSlug
}

input ToolshopMediaTagFilter {
  """Apply filters on document level"""
  _: ToolshopSanity_DocumentFilter
  _id: ToolshopIDFilter
  _type: ToolshopStringFilter
  _createdAt: ToolshopDatetimeFilter
  _updatedAt: ToolshopDatetimeFilter
  _rev: ToolshopStringFilter
  _key: ToolshopStringFilter
  name: ToolshopSlugFilter
}

input ToolshopMediaTagSorting {
  _id: ToolshopSortOrder
  _type: ToolshopSortOrder
  _createdAt: ToolshopSortOrder
  _updatedAt: ToolshopSortOrder
  _rev: ToolshopSortOrder
  _key: ToolshopSortOrder
  name: ToolshopSlugSorting
}

type ToolshopNetlifyImage {
  _key: String
  _type: String
  asset: ToolshopSanityImageAsset
  hotspot: ToolshopSanityImageHotspot
  crop: ToolshopSanityImageCrop
  alt: String
}

input ToolshopNetlifyImageFilter {
  _key: ToolshopStringFilter
  _type: ToolshopStringFilter
  asset: ToolshopSanityImageAssetFilter
  hotspot: ToolshopSanityImageHotspotFilter
  crop: ToolshopSanityImageCropFilter
  alt: ToolshopStringFilter
}

input ToolshopNetlifyImageSorting {
  _key: ToolshopSortOrder
  _type: ToolshopSortOrder
  hotspot: ToolshopSanityImageHotspotSorting
  crop: ToolshopSanityImageCropSorting
  alt: ToolshopSortOrder
}

type ToolshopNetlifyProduct implements ToolshopDocument {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: ToolshopDateTime

  """Date the document was last modified"""
  _updatedAt: ToolshopDateTime

  """Current document revision"""
  _rev: String
  _key: String
  title: String
}

input ToolshopNetlifyProductFilter {
  """Apply filters on document level"""
  _: ToolshopSanity_DocumentFilter
  _id: ToolshopIDFilter
  _type: ToolshopStringFilter
  _createdAt: ToolshopDatetimeFilter
  _updatedAt: ToolshopDatetimeFilter
  _rev: ToolshopStringFilter
  _key: ToolshopStringFilter
  title: ToolshopStringFilter
}

input ToolshopNetlifyProductSorting {
  _id: ToolshopSortOrder
  _type: ToolshopSortOrder
  _createdAt: ToolshopSortOrder
  _updatedAt: ToolshopSortOrder
  _rev: ToolshopSortOrder
  _key: ToolshopSortOrder
  title: ToolshopSortOrder
}

type ToolshopNews implements ToolshopDocument {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: ToolshopDateTime

  """Date the document was last modified"""
  _updatedAt: ToolshopDateTime

  """Current document revision"""
  _rev: String
  _key: String
  title: String
  url: String
  company: ToolshopCompany
  orderRank: String
}

input ToolshopNewsFilter {
  """Apply filters on document level"""
  _: ToolshopSanity_DocumentFilter
  _id: ToolshopIDFilter
  _type: ToolshopStringFilter
  _createdAt: ToolshopDatetimeFilter
  _updatedAt: ToolshopDatetimeFilter
  _rev: ToolshopStringFilter
  _key: ToolshopStringFilter
  title: ToolshopStringFilter
  url: ToolshopStringFilter
  company: ToolshopCompanyFilter
  orderRank: ToolshopStringFilter
}

input ToolshopNewsSorting {
  _id: ToolshopSortOrder
  _type: ToolshopSortOrder
  _createdAt: ToolshopSortOrder
  _updatedAt: ToolshopSortOrder
  _rev: ToolshopSortOrder
  _key: ToolshopSortOrder
  title: ToolshopSortOrder
  url: ToolshopSortOrder
  orderRank: ToolshopSortOrder
}

type ToolshopPancakeIntro {
  _key: String
  _type: String
  title: String
  intro: String
}

type ToolshopPancakeTheme {
  _key: String
  _type: String
  theme: String
}

type ToolshopPartner implements ToolshopDocument {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: ToolshopDateTime

  """Date the document was last modified"""
  _updatedAt: ToolshopDateTime

  """Current document revision"""
  _rev: String
  _key: String
  title: String
  slug: ToolshopSlug

  """
  Reference to a company entity for website, social media links, and other image assets.
  """
  company: ToolshopCompany

  """A short, concise string of text describing the Partner."""
  description: String
  body: String
  logo: ToolshopNetlifyImage
  color: ToolshopColor
  relatedContent: [ToolshopRelatedContent]
  tags: [ToolshopTag]
}

type ToolshopPartnerEcosystem implements ToolshopDocument {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: ToolshopDateTime

  """Date the document was last modified"""
  _updatedAt: ToolshopDateTime

  """Current document revision"""
  _rev: String
  _key: String
  title: String
}

input ToolshopPartnerEcosystemFilter {
  """Apply filters on document level"""
  _: ToolshopSanity_DocumentFilter
  _id: ToolshopIDFilter
  _type: ToolshopStringFilter
  _createdAt: ToolshopDatetimeFilter
  _updatedAt: ToolshopDatetimeFilter
  _rev: ToolshopStringFilter
  _key: ToolshopStringFilter
  title: ToolshopStringFilter
}

input ToolshopPartnerEcosystemSorting {
  _id: ToolshopSortOrder
  _type: ToolshopSortOrder
  _createdAt: ToolshopSortOrder
  _updatedAt: ToolshopSortOrder
  _rev: ToolshopSortOrder
  _key: ToolshopSortOrder
  title: ToolshopSortOrder
}

input ToolshopPartnerFilter {
  """Apply filters on document level"""
  _: ToolshopSanity_DocumentFilter
  _id: ToolshopIDFilter
  _type: ToolshopStringFilter
  _createdAt: ToolshopDatetimeFilter
  _updatedAt: ToolshopDatetimeFilter
  _rev: ToolshopStringFilter
  _key: ToolshopStringFilter
  title: ToolshopStringFilter
  slug: ToolshopSlugFilter
  company: ToolshopCompanyFilter
  description: ToolshopStringFilter
  body: ToolshopStringFilter
  logo: ToolshopNetlifyImageFilter
  color: ToolshopColorFilter
}

union ToolshopPartnerOrPeople = ToolshopPartner | ToolshopPeople

input ToolshopPartnerSorting {
  _id: ToolshopSortOrder
  _type: ToolshopSortOrder
  _createdAt: ToolshopSortOrder
  _updatedAt: ToolshopSortOrder
  _rev: ToolshopSortOrder
  _key: ToolshopSortOrder
  title: ToolshopSortOrder
  slug: ToolshopSlugSorting
  description: ToolshopSortOrder
  body: ToolshopSortOrder
  logo: ToolshopNetlifyImageSorting
  color: ToolshopColorSorting
}

type ToolshopPdf implements ToolshopDocument {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: ToolshopDateTime

  """Date the document was last modified"""
  _updatedAt: ToolshopDateTime

  """Current document revision"""
  _rev: String
  _key: String
  title: String
  file: ToolshopFile
  url: ToolshopSlug
}

input ToolshopPdfFilter {
  """Apply filters on document level"""
  _: ToolshopSanity_DocumentFilter
  _id: ToolshopIDFilter
  _type: ToolshopStringFilter
  _createdAt: ToolshopDatetimeFilter
  _updatedAt: ToolshopDatetimeFilter
  _rev: ToolshopStringFilter
  _key: ToolshopStringFilter
  title: ToolshopStringFilter
  file: ToolshopFileFilter
  url: ToolshopSlugFilter
}

input ToolshopPdfSorting {
  _id: ToolshopSortOrder
  _type: ToolshopSortOrder
  _createdAt: ToolshopSortOrder
  _updatedAt: ToolshopSortOrder
  _rev: ToolshopSortOrder
  _key: ToolshopSortOrder
  title: ToolshopSortOrder
  file: ToolshopFileSorting
  url: ToolshopSlugSorting
}

type ToolshopPeople implements ToolshopDocument {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: ToolshopDateTime

  """Date the document was last modified"""
  _updatedAt: ToolshopDateTime

  """Current document revision"""
  _rev: String
  _key: String
  name: String
  slug: ToolshopSlug
  title: String
  bio: String
  company: ToolshopCompany

  """@netlify"""
  twitter: String

  """netlify"""
  linkedin: String

  """netlify"""
  github: String

  """netlify"""
  instagram: String
  image: ToolshopImage
  url: String
}

input ToolshopPeopleFilter {
  """Apply filters on document level"""
  _: ToolshopSanity_DocumentFilter
  _id: ToolshopIDFilter
  _type: ToolshopStringFilter
  _createdAt: ToolshopDatetimeFilter
  _updatedAt: ToolshopDatetimeFilter
  _rev: ToolshopStringFilter
  _key: ToolshopStringFilter
  name: ToolshopStringFilter
  slug: ToolshopSlugFilter
  title: ToolshopStringFilter
  bio: ToolshopStringFilter
  company: ToolshopCompanyFilter
  twitter: ToolshopStringFilter
  linkedin: ToolshopStringFilter
  github: ToolshopStringFilter
  instagram: ToolshopStringFilter
  image: ToolshopImageFilter
  url: ToolshopStringFilter
}

input ToolshopPeopleSorting {
  _id: ToolshopSortOrder
  _type: ToolshopSortOrder
  _createdAt: ToolshopSortOrder
  _updatedAt: ToolshopSortOrder
  _rev: ToolshopSortOrder
  _key: ToolshopSortOrder
  name: ToolshopSortOrder
  slug: ToolshopSlugSorting
  title: ToolshopSortOrder
  bio: ToolshopSortOrder
  twitter: ToolshopSortOrder
  linkedin: ToolshopSortOrder
  github: ToolshopSortOrder
  instagram: ToolshopSortOrder
  image: ToolshopImageSorting
  url: ToolshopSortOrder
}

type ToolshopPeopleWithBio {
  _key: String
  _type: String
  pancakeIntro: ToolshopPancakeIntro
  hightlightedPeople: [ToolshopPeople]
  subtitle: String
  people: [ToolshopPeople]
  pancakeTheme: ToolshopPancakeTheme
}

type ToolshopPerk {
  _key: String
  _type: String
  company: ToolshopCompany
  textRaw: JSON
  linkLabel: String
  linkUrl: String
  linkTargetBlank: Boolean
  image: ToolshopImage
}

type ToolshopPerksPage {
  _key: String
  _type: String
  introductionRaw: JSON
  perks: [ToolshopPerk]
}

input ToolshopPerksPageFilter {
  _key: ToolshopStringFilter
  _type: ToolshopStringFilter
}

input ToolshopPerksPageSorting {
  _key: ToolshopSortOrder
  _type: ToolshopSortOrder
}

type ToolshopPersona implements ToolshopDocument {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: ToolshopDateTime

  """Date the document was last modified"""
  _updatedAt: ToolshopDateTime

  """Current document revision"""
  _rev: String
  _key: String
  title: String
}

input ToolshopPersonaFilter {
  """Apply filters on document level"""
  _: ToolshopSanity_DocumentFilter
  _id: ToolshopIDFilter
  _type: ToolshopStringFilter
  _createdAt: ToolshopDatetimeFilter
  _updatedAt: ToolshopDatetimeFilter
  _rev: ToolshopStringFilter
  _key: ToolshopStringFilter
  title: ToolshopStringFilter
}

input ToolshopPersonaSorting {
  _id: ToolshopSortOrder
  _type: ToolshopSortOrder
  _createdAt: ToolshopSortOrder
  _updatedAt: ToolshopSortOrder
  _rev: ToolshopSortOrder
  _key: ToolshopSortOrder
  title: ToolshopSortOrder
}

type ToolshopPrefooter {
  _key: String
  _type: String
  pancakeIntro: ToolshopPancakeIntro
  button1Label: String
  button1URL: String
  button2Label: String
  button2URL: String
  pancakeTheme: ToolshopPancakeTheme
}

type ToolshopPressRelease implements ToolshopDocument {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: ToolshopDateTime

  """Date the document was last modified"""
  _updatedAt: ToolshopDateTime

  """Current document revision"""
  _rev: String
  _key: String
  title: String
  slug: ToolshopSlug
  introductionRaw: JSON
  textRaw: JSON
  footnotesRaw: JSON
  publishDate: ToolshopDate
  seofields: ToolshopSeofields
  tags: ToolshopTags
}

input ToolshopPressReleaseFilter {
  """Apply filters on document level"""
  _: ToolshopSanity_DocumentFilter
  _id: ToolshopIDFilter
  _type: ToolshopStringFilter
  _createdAt: ToolshopDatetimeFilter
  _updatedAt: ToolshopDatetimeFilter
  _rev: ToolshopStringFilter
  _key: ToolshopStringFilter
  title: ToolshopStringFilter
  slug: ToolshopSlugFilter
  publishDate: ToolshopDateFilter
  seofields: ToolshopSeofieldsFilter
  tags: ToolshopTagsFilter
}

input ToolshopPressReleaseSorting {
  _id: ToolshopSortOrder
  _type: ToolshopSortOrder
  _createdAt: ToolshopSortOrder
  _updatedAt: ToolshopSortOrder
  _rev: ToolshopSortOrder
  _key: ToolshopSortOrder
  title: ToolshopSortOrder
  slug: ToolshopSlugSorting
  publishDate: ToolshopSortOrder
  seofields: ToolshopSeofieldsSorting
  tags: ToolshopTagsSorting
}

type ToolshopRegister {
  _key: String
  _type: String
  title: String
  eventwysiwygRaw: JSON
  hubspotId: String
  submitButtonLabel: String
  colorRegisterBackground: ToolshopColor
  colorRegisterText: ToolshopColor
  colorRegisterButtonBackground: ToolshopColor
  colorRegisterButtonText: ToolshopColor
}

type ToolshopRelatedContent {
  _key: String
  _type: String
  type: String
  page: ToolshopBasicPageOrBlogPostOrEventOrLandingPageOrWebinarOrWorkshop
  title: String
  url: String
  image: ToolshopNetlifyImage
}

type ToolshopResources implements ToolshopDocument {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: ToolshopDateTime

  """Date the document was last modified"""
  _updatedAt: ToolshopDateTime

  """Current document revision"""
  _rev: String
  _key: String
  title: String
  resourcesCardImage: ToolshopImage
  url: String
  resourcetype: String
  tags: ToolshopTags
}

input ToolshopResourcesFilter {
  """Apply filters on document level"""
  _: ToolshopSanity_DocumentFilter
  _id: ToolshopIDFilter
  _type: ToolshopStringFilter
  _createdAt: ToolshopDatetimeFilter
  _updatedAt: ToolshopDatetimeFilter
  _rev: ToolshopStringFilter
  _key: ToolshopStringFilter
  title: ToolshopStringFilter
  resourcesCardImage: ToolshopImageFilter
  url: ToolshopStringFilter
  resourcetype: ToolshopStringFilter
  tags: ToolshopTagsFilter
}

input ToolshopResourcesSorting {
  _id: ToolshopSortOrder
  _type: ToolshopSortOrder
  _createdAt: ToolshopSortOrder
  _updatedAt: ToolshopSortOrder
  _rev: ToolshopSortOrder
  _key: ToolshopSortOrder
  title: ToolshopSortOrder
  resourcesCardImage: ToolshopImageSorting
  url: ToolshopSortOrder
  resourcetype: ToolshopSortOrder
  tags: ToolshopTagsSorting
}

type ToolshopRgbaColor {
  _key: String
  _type: String
  r: Float
  g: Float
  b: Float
  a: Float
}

input ToolshopRgbaColorFilter {
  _key: ToolshopStringFilter
  _type: ToolshopStringFilter
  r: ToolshopFloatFilter
  g: ToolshopFloatFilter
  b: ToolshopFloatFilter
  a: ToolshopFloatFilter
}

input ToolshopRgbaColorSorting {
  _key: ToolshopSortOrder
  _type: ToolshopSortOrder
  r: ToolshopSortOrder
  g: ToolshopSortOrder
  b: ToolshopSortOrder
  a: ToolshopSortOrder
}

type ToolshopRootQuery {
  MediaTag(
    """MediaTag document ID"""
    id: ID!
  ): ToolshopMediaTag
  Tag(
    """Tag document ID"""
    id: ID!
  ): ToolshopTag
  People(
    """People document ID"""
    id: ID!
  ): ToolshopPeople
  Company(
    """Company document ID"""
    id: ID!
  ): ToolshopCompany
  Webinar(
    """Webinar document ID"""
    id: ID!
  ): ToolshopWebinar
  Workshop(
    """Workshop document ID"""
    id: ID!
  ): ToolshopWorkshop
  Resources(
    """Resources document ID"""
    id: ID!
  ): ToolshopResources
  UseCase(
    """UseCase document ID"""
    id: ID!
  ): ToolshopUseCase
  Series(
    """Series document ID"""
    id: ID!
  ): ToolshopSeries
  Industry(
    """Industry document ID"""
    id: ID!
  ): ToolshopIndustry
  NetlifyProduct(
    """NetlifyProduct document ID"""
    id: ID!
  ): ToolshopNetlifyProduct
  BusinessValueProposition(
    """BusinessValueProposition document ID"""
    id: ID!
  ): ToolshopBusinessValueProposition
  Persona(
    """Persona document ID"""
    id: ID!
  ): ToolshopPersona
  Geo(
    """Geo document ID"""
    id: ID!
  ): ToolshopGeo
  PartnerEcosystem(
    """PartnerEcosystem document ID"""
    id: ID!
  ): ToolshopPartnerEcosystem
  Ssg(
    """Ssg document ID"""
    id: ID!
  ): ToolshopSsg
  Cms(
    """Cms document ID"""
    id: ID!
  ): ToolshopCms
  Database(
    """Database document ID"""
    id: ID!
  ): ToolshopDatabase
  TagFramework(
    """TagFramework document ID"""
    id: ID!
  ): ToolshopTagFramework
  CaseStudy(
    """CaseStudy document ID"""
    id: ID!
  ): ToolshopCaseStudy
  ExcludeFromSitemap(
    """ExcludeFromSitemap document ID"""
    id: ID!
  ): ToolshopExcludeFromSitemap
  BasicPage(
    """BasicPage document ID"""
    id: ID!
  ): ToolshopBasicPage
  SupportPage(
    """SupportPage document ID"""
    id: ID!
  ): ToolshopSupportPage
  Event(
    """Event document ID"""
    id: ID!
  ): ToolshopEvent
  PressRelease(
    """PressRelease document ID"""
    id: ID!
  ): ToolshopPressRelease
  News(
    """News document ID"""
    id: ID!
  ): ToolshopNews
  Pdf(
    """Pdf document ID"""
    id: ID!
  ): ToolshopPdf
  JamstackConfBasicPage(
    """JamstackConfBasicPage document ID"""
    id: ID!
  ): ToolshopJamstackConfBasicPage
  LandingPage(
    """LandingPage document ID"""
    id: ID!
  ): ToolshopLandingPage
  BlogTag(
    """BlogTag document ID"""
    id: ID!
  ): ToolshopBlogTag
  BlogTopic(
    """BlogTopic document ID"""
    id: ID!
  ): ToolshopBlogTopic
  BlogPost(
    """BlogPost document ID"""
    id: ID!
  ): ToolshopBlogPost
  BlogSettings(
    """BlogSettings document ID"""
    id: ID!
  ): ToolshopBlogSettings
  BlogCta(
    """BlogCta document ID"""
    id: ID!
  ): ToolshopBlogCta
  Agencies(
    """Agencies document ID"""
    id: ID!
  ): ToolshopAgencies
  Experts(
    """Experts document ID"""
    id: ID!
  ): ToolshopExperts
  ExpertsService(
    """ExpertsService document ID"""
    id: ID!
  ): ToolshopExpertsService
  ExpertsRegion(
    """ExpertsRegion document ID"""
    id: ID!
  ): ToolshopExpertsRegion
  ExpertsFramework(
    """ExpertsFramework document ID"""
    id: ID!
  ): ToolshopExpertsFramework
  ExpertsCms(
    """ExpertsCms document ID"""
    id: ID!
  ): ToolshopExpertsCms
  ExpertsEcommerce(
    """ExpertsEcommerce document ID"""
    id: ID!
  ): ToolshopExpertsEcommerce
  ExpertsBudget(
    """ExpertsBudget document ID"""
    id: ID!
  ): ToolshopExpertsBudget
  ExpertsUseCase(
    """ExpertsUseCase document ID"""
    id: ID!
  ): ToolshopExpertsUseCase
  Integration(
    """Integration document ID"""
    id: ID!
  ): ToolshopIntegration
  ApiAuthentication(
    """ApiAuthentication document ID"""
    id: ID!
  ): ToolshopApiAuthentication
  BuildPlugin(
    """BuildPlugin document ID"""
    id: ID!
  ): ToolshopBuildPlugin
  LogDrain(
    """LogDrain document ID"""
    id: ID!
  ): ToolshopLogDrain
  Template(
    """Template document ID"""
    id: ID!
  ): ToolshopTemplate
  Graphql(
    """Graphql document ID"""
    id: ID!
  ): ToolshopGraphql
  Framework(
    """Framework document ID"""
    id: ID!
  ): ToolshopFramework
  IntegrationType(
    """IntegrationType document ID"""
    id: ID!
  ): ToolshopIntegrationType
  Partner(
    """Partner document ID"""
    id: ID!
  ): ToolshopPartner
  SanityImageAsset(
    """SanityImageAsset document ID"""
    id: ID!
  ): ToolshopSanityImageAsset
  SanityFileAsset(
    """SanityFileAsset document ID"""
    id: ID!
  ): ToolshopSanityFileAsset
  Document(
    """Document document ID"""
    id: ID!
  ): ToolshopDocument
  allMediaTag(
    where: ToolshopMediaTagFilter
    sort: [ToolshopMediaTagSorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [ToolshopMediaTag!]!
  allTag(
    where: ToolshopTagFilter
    sort: [ToolshopTagSorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [ToolshopTag!]!
  allPeople(
    where: ToolshopPeopleFilter
    sort: [ToolshopPeopleSorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [ToolshopPeople!]!
  allCompany(
    where: ToolshopCompanyFilter
    sort: [ToolshopCompanySorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [ToolshopCompany!]!
  allWebinar(
    where: ToolshopWebinarFilter
    sort: [ToolshopWebinarSorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [ToolshopWebinar!]!
  allWorkshop(
    where: ToolshopWorkshopFilter
    sort: [ToolshopWorkshopSorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [ToolshopWorkshop!]!
  allResources(
    where: ToolshopResourcesFilter
    sort: [ToolshopResourcesSorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [ToolshopResources!]!
  allUseCase(
    where: ToolshopUseCaseFilter
    sort: [ToolshopUseCaseSorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [ToolshopUseCase!]!
  allSeries(
    where: ToolshopSeriesFilter
    sort: [ToolshopSeriesSorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [ToolshopSeries!]!
  allIndustry(
    where: ToolshopIndustryFilter
    sort: [ToolshopIndustrySorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [ToolshopIndustry!]!
  allNetlifyProduct(
    where: ToolshopNetlifyProductFilter
    sort: [ToolshopNetlifyProductSorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [ToolshopNetlifyProduct!]!
  allBusinessValueProposition(
    where: ToolshopBusinessValuePropositionFilter
    sort: [ToolshopBusinessValuePropositionSorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [ToolshopBusinessValueProposition!]!
  allPersona(
    where: ToolshopPersonaFilter
    sort: [ToolshopPersonaSorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [ToolshopPersona!]!
  allGeo(
    where: ToolshopGeoFilter
    sort: [ToolshopGeoSorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [ToolshopGeo!]!
  allPartnerEcosystem(
    where: ToolshopPartnerEcosystemFilter
    sort: [ToolshopPartnerEcosystemSorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [ToolshopPartnerEcosystem!]!
  allSsg(
    where: ToolshopSsgFilter
    sort: [ToolshopSsgSorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [ToolshopSsg!]!
  allCms(
    where: ToolshopCmsFilter
    sort: [ToolshopCmsSorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [ToolshopCms!]!
  allDatabase(
    where: ToolshopDatabaseFilter
    sort: [ToolshopDatabaseSorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [ToolshopDatabase!]!
  allTagFramework(
    where: ToolshopTagFrameworkFilter
    sort: [ToolshopTagFrameworkSorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [ToolshopTagFramework!]!
  allCaseStudy(
    where: ToolshopCaseStudyFilter
    sort: [ToolshopCaseStudySorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [ToolshopCaseStudy!]!
  allExcludeFromSitemap(
    where: ToolshopExcludeFromSitemapFilter
    sort: [ToolshopExcludeFromSitemapSorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [ToolshopExcludeFromSitemap!]!
  allBasicPage(
    where: ToolshopBasicPageFilter
    sort: [ToolshopBasicPageSorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [ToolshopBasicPage!]!
  allSupportPage(
    where: ToolshopSupportPageFilter
    sort: [ToolshopSupportPageSorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [ToolshopSupportPage!]!
  allEvent(
    where: ToolshopEventFilter
    sort: [ToolshopEventSorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [ToolshopEvent!]!
  allPressRelease(
    where: ToolshopPressReleaseFilter
    sort: [ToolshopPressReleaseSorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [ToolshopPressRelease!]!
  allNews(
    where: ToolshopNewsFilter
    sort: [ToolshopNewsSorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [ToolshopNews!]!
  allPdf(
    where: ToolshopPdfFilter
    sort: [ToolshopPdfSorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [ToolshopPdf!]!
  allJamstackConfBasicPage(
    where: ToolshopJamstackConfBasicPageFilter
    sort: [ToolshopJamstackConfBasicPageSorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [ToolshopJamstackConfBasicPage!]!
  allLandingPage(
    where: ToolshopLandingPageFilter
    sort: [ToolshopLandingPageSorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [ToolshopLandingPage!]!
  allBlogTag(
    where: ToolshopBlogTagFilter
    sort: [ToolshopBlogTagSorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [ToolshopBlogTag!]!
  allBlogTopic(
    where: ToolshopBlogTopicFilter
    sort: [ToolshopBlogTopicSorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [ToolshopBlogTopic!]!
  allBlogPost(
    where: ToolshopBlogPostFilter
    sort: [ToolshopBlogPostSorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [ToolshopBlogPost!]!
  allBlogSettings(
    where: ToolshopBlogSettingsFilter
    sort: [ToolshopBlogSettingsSorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [ToolshopBlogSettings!]!
  allBlogCta(
    where: ToolshopBlogCtaFilter
    sort: [ToolshopBlogCtaSorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [ToolshopBlogCta!]!
  allAgencies(
    where: ToolshopAgenciesFilter
    sort: [ToolshopAgenciesSorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [ToolshopAgencies!]!
  allExperts(
    where: ToolshopExpertsFilter
    sort: [ToolshopExpertsSorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [ToolshopExperts!]!
  allExpertsService(
    where: ToolshopExpertsServiceFilter
    sort: [ToolshopExpertsServiceSorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [ToolshopExpertsService!]!
  allExpertsRegion(
    where: ToolshopExpertsRegionFilter
    sort: [ToolshopExpertsRegionSorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [ToolshopExpertsRegion!]!
  allExpertsFramework(
    where: ToolshopExpertsFrameworkFilter
    sort: [ToolshopExpertsFrameworkSorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [ToolshopExpertsFramework!]!
  allExpertsCms(
    where: ToolshopExpertsCmsFilter
    sort: [ToolshopExpertsCmsSorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [ToolshopExpertsCms!]!
  allExpertsEcommerce(
    where: ToolshopExpertsEcommerceFilter
    sort: [ToolshopExpertsEcommerceSorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [ToolshopExpertsEcommerce!]!
  allExpertsBudget(
    where: ToolshopExpertsBudgetFilter
    sort: [ToolshopExpertsBudgetSorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [ToolshopExpertsBudget!]!
  allExpertsUseCase(
    where: ToolshopExpertsUseCaseFilter
    sort: [ToolshopExpertsUseCaseSorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [ToolshopExpertsUseCase!]!
  allIntegration(
    where: ToolshopIntegrationFilter
    sort: [ToolshopIntegrationSorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [ToolshopIntegration!]!
  allApiAuthentication(
    where: ToolshopApiAuthenticationFilter
    sort: [ToolshopApiAuthenticationSorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [ToolshopApiAuthentication!]!
  allBuildPlugin(
    where: ToolshopBuildPluginFilter
    sort: [ToolshopBuildPluginSorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [ToolshopBuildPlugin!]!
  allLogDrain(
    where: ToolshopLogDrainFilter
    sort: [ToolshopLogDrainSorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [ToolshopLogDrain!]!
  allTemplate(
    where: ToolshopTemplateFilter
    sort: [ToolshopTemplateSorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [ToolshopTemplate!]!
  allGraphql(
    where: ToolshopGraphqlFilter
    sort: [ToolshopGraphqlSorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [ToolshopGraphql!]!
  allFramework(
    where: ToolshopFrameworkFilter
    sort: [ToolshopFrameworkSorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [ToolshopFramework!]!
  allIntegrationType(
    where: ToolshopIntegrationTypeFilter
    sort: [ToolshopIntegrationTypeSorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [ToolshopIntegrationType!]!
  allPartner(
    where: ToolshopPartnerFilter
    sort: [ToolshopPartnerSorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [ToolshopPartner!]!
  allSanityImageAsset(
    where: ToolshopSanityImageAssetFilter
    sort: [ToolshopSanityImageAssetSorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [ToolshopSanityImageAsset!]!
  allSanityFileAsset(
    where: ToolshopSanityFileAssetFilter
    sort: [ToolshopSanityFileAssetSorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [ToolshopSanityFileAsset!]!
  allDocument(
    where: ToolshopDocumentFilter
    sort: [ToolshopDocumentSorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [ToolshopDocument!]!
}

input ToolshopSanity_DocumentFilter {
  """All documents referencing the given document ID."""
  references: ID

  """All documents that are drafts."""
  is_draft: Boolean
}

type ToolshopSanityAssetSourceData {
  _key: String
  _type: String

  """A canonical name for the source this asset is originating from"""
  name: String

  """
  The unique ID for the asset within the originating source so you can programatically find back to it
  """
  id: String

  """
  A URL to find more information about this asset in the originating source
  """
  url: String
}

input ToolshopSanityAssetSourceDataFilter {
  _key: ToolshopStringFilter
  _type: ToolshopStringFilter
  name: ToolshopStringFilter
  id: ToolshopStringFilter
  url: ToolshopStringFilter
}

input ToolshopSanityAssetSourceDataSorting {
  _key: ToolshopSortOrder
  _type: ToolshopSortOrder
  name: ToolshopSortOrder
  id: ToolshopSortOrder
  url: ToolshopSortOrder
}

type ToolshopSanityFileAsset implements ToolshopDocument {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: ToolshopDateTime

  """Date the document was last modified"""
  _updatedAt: ToolshopDateTime

  """Current document revision"""
  _rev: String
  _key: String
  originalFilename: String
  label: String
  title: String
  description: String
  altText: String
  sha1hash: String
  extension: String
  mimeType: String
  size: Float
  assetId: String
  path: String
  url: String
  source: ToolshopSanityAssetSourceData
}

input ToolshopSanityFileAssetFilter {
  """Apply filters on document level"""
  _: ToolshopSanity_DocumentFilter
  _id: ToolshopIDFilter
  _type: ToolshopStringFilter
  _createdAt: ToolshopDatetimeFilter
  _updatedAt: ToolshopDatetimeFilter
  _rev: ToolshopStringFilter
  _key: ToolshopStringFilter
  originalFilename: ToolshopStringFilter
  label: ToolshopStringFilter
  title: ToolshopStringFilter
  description: ToolshopStringFilter
  altText: ToolshopStringFilter
  sha1hash: ToolshopStringFilter
  extension: ToolshopStringFilter
  mimeType: ToolshopStringFilter
  size: ToolshopFloatFilter
  assetId: ToolshopStringFilter
  path: ToolshopStringFilter
  url: ToolshopStringFilter
  source: ToolshopSanityAssetSourceDataFilter
}

input ToolshopSanityFileAssetSorting {
  _id: ToolshopSortOrder
  _type: ToolshopSortOrder
  _createdAt: ToolshopSortOrder
  _updatedAt: ToolshopSortOrder
  _rev: ToolshopSortOrder
  _key: ToolshopSortOrder
  originalFilename: ToolshopSortOrder
  label: ToolshopSortOrder
  title: ToolshopSortOrder
  description: ToolshopSortOrder
  altText: ToolshopSortOrder
  sha1hash: ToolshopSortOrder
  extension: ToolshopSortOrder
  mimeType: ToolshopSortOrder
  size: ToolshopSortOrder
  assetId: ToolshopSortOrder
  path: ToolshopSortOrder
  url: ToolshopSortOrder
  source: ToolshopSanityAssetSourceDataSorting
}

type ToolshopSanityImageAsset implements ToolshopDocument {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: ToolshopDateTime

  """Date the document was last modified"""
  _updatedAt: ToolshopDateTime

  """Current document revision"""
  _rev: String
  _key: String
  originalFilename: String
  label: String
  title: String
  description: String
  altText: String
  sha1hash: String
  extension: String
  mimeType: String
  size: Float
  assetId: String
  uploadId: String
  path: String
  url: String
  metadata: ToolshopSanityImageMetadata
  source: ToolshopSanityAssetSourceData
}

input ToolshopSanityImageAssetFilter {
  """Apply filters on document level"""
  _: ToolshopSanity_DocumentFilter
  _id: ToolshopIDFilter
  _type: ToolshopStringFilter
  _createdAt: ToolshopDatetimeFilter
  _updatedAt: ToolshopDatetimeFilter
  _rev: ToolshopStringFilter
  _key: ToolshopStringFilter
  originalFilename: ToolshopStringFilter
  label: ToolshopStringFilter
  title: ToolshopStringFilter
  description: ToolshopStringFilter
  altText: ToolshopStringFilter
  sha1hash: ToolshopStringFilter
  extension: ToolshopStringFilter
  mimeType: ToolshopStringFilter
  size: ToolshopFloatFilter
  assetId: ToolshopStringFilter
  uploadId: ToolshopStringFilter
  path: ToolshopStringFilter
  url: ToolshopStringFilter
  metadata: ToolshopSanityImageMetadataFilter
  source: ToolshopSanityAssetSourceDataFilter
}

input ToolshopSanityImageAssetSorting {
  _id: ToolshopSortOrder
  _type: ToolshopSortOrder
  _createdAt: ToolshopSortOrder
  _updatedAt: ToolshopSortOrder
  _rev: ToolshopSortOrder
  _key: ToolshopSortOrder
  originalFilename: ToolshopSortOrder
  label: ToolshopSortOrder
  title: ToolshopSortOrder
  description: ToolshopSortOrder
  altText: ToolshopSortOrder
  sha1hash: ToolshopSortOrder
  extension: ToolshopSortOrder
  mimeType: ToolshopSortOrder
  size: ToolshopSortOrder
  assetId: ToolshopSortOrder
  uploadId: ToolshopSortOrder
  path: ToolshopSortOrder
  url: ToolshopSortOrder
  metadata: ToolshopSanityImageMetadataSorting
  source: ToolshopSanityAssetSourceDataSorting
}

type ToolshopSanityImageCrop {
  _key: String
  _type: String
  top: Float
  bottom: Float
  left: Float
  right: Float
}

input ToolshopSanityImageCropFilter {
  _key: ToolshopStringFilter
  _type: ToolshopStringFilter
  top: ToolshopFloatFilter
  bottom: ToolshopFloatFilter
  left: ToolshopFloatFilter
  right: ToolshopFloatFilter
}

input ToolshopSanityImageCropSorting {
  _key: ToolshopSortOrder
  _type: ToolshopSortOrder
  top: ToolshopSortOrder
  bottom: ToolshopSortOrder
  left: ToolshopSortOrder
  right: ToolshopSortOrder
}

type ToolshopSanityImageDimensions {
  _key: String
  _type: String
  height: Float
  width: Float
  aspectRatio: Float
}

input ToolshopSanityImageDimensionsFilter {
  _key: ToolshopStringFilter
  _type: ToolshopStringFilter
  height: ToolshopFloatFilter
  width: ToolshopFloatFilter
  aspectRatio: ToolshopFloatFilter
}

input ToolshopSanityImageDimensionsSorting {
  _key: ToolshopSortOrder
  _type: ToolshopSortOrder
  height: ToolshopSortOrder
  width: ToolshopSortOrder
  aspectRatio: ToolshopSortOrder
}

type ToolshopSanityImageHotspot {
  _key: String
  _type: String
  x: Float
  y: Float
  height: Float
  width: Float
}

input ToolshopSanityImageHotspotFilter {
  _key: ToolshopStringFilter
  _type: ToolshopStringFilter
  x: ToolshopFloatFilter
  y: ToolshopFloatFilter
  height: ToolshopFloatFilter
  width: ToolshopFloatFilter
}

input ToolshopSanityImageHotspotSorting {
  _key: ToolshopSortOrder
  _type: ToolshopSortOrder
  x: ToolshopSortOrder
  y: ToolshopSortOrder
  height: ToolshopSortOrder
  width: ToolshopSortOrder
}

type ToolshopSanityImageMetadata {
  _key: String
  _type: String
  location: ToolshopGeopoint
  dimensions: ToolshopSanityImageDimensions
  palette: ToolshopSanityImagePalette
  lqip: String
  blurHash: String
  hasAlpha: Boolean
  isOpaque: Boolean
}

input ToolshopSanityImageMetadataFilter {
  _key: ToolshopStringFilter
  _type: ToolshopStringFilter
  location: ToolshopGeopointFilter
  dimensions: ToolshopSanityImageDimensionsFilter
  palette: ToolshopSanityImagePaletteFilter
  lqip: ToolshopStringFilter
  blurHash: ToolshopStringFilter
  hasAlpha: ToolshopBooleanFilter
  isOpaque: ToolshopBooleanFilter
}

input ToolshopSanityImageMetadataSorting {
  _key: ToolshopSortOrder
  _type: ToolshopSortOrder
  location: ToolshopGeopointSorting
  dimensions: ToolshopSanityImageDimensionsSorting
  palette: ToolshopSanityImagePaletteSorting
  lqip: ToolshopSortOrder
  blurHash: ToolshopSortOrder
  hasAlpha: ToolshopSortOrder
  isOpaque: ToolshopSortOrder
}

type ToolshopSanityImagePalette {
  _key: String
  _type: String
  darkMuted: ToolshopSanityImagePaletteSwatch
  lightVibrant: ToolshopSanityImagePaletteSwatch
  darkVibrant: ToolshopSanityImagePaletteSwatch
  vibrant: ToolshopSanityImagePaletteSwatch
  dominant: ToolshopSanityImagePaletteSwatch
  lightMuted: ToolshopSanityImagePaletteSwatch
  muted: ToolshopSanityImagePaletteSwatch
}

input ToolshopSanityImagePaletteFilter {
  _key: ToolshopStringFilter
  _type: ToolshopStringFilter
  darkMuted: ToolshopSanityImagePaletteSwatchFilter
  lightVibrant: ToolshopSanityImagePaletteSwatchFilter
  darkVibrant: ToolshopSanityImagePaletteSwatchFilter
  vibrant: ToolshopSanityImagePaletteSwatchFilter
  dominant: ToolshopSanityImagePaletteSwatchFilter
  lightMuted: ToolshopSanityImagePaletteSwatchFilter
  muted: ToolshopSanityImagePaletteSwatchFilter
}

input ToolshopSanityImagePaletteSorting {
  _key: ToolshopSortOrder
  _type: ToolshopSortOrder
  darkMuted: ToolshopSanityImagePaletteSwatchSorting
  lightVibrant: ToolshopSanityImagePaletteSwatchSorting
  darkVibrant: ToolshopSanityImagePaletteSwatchSorting
  vibrant: ToolshopSanityImagePaletteSwatchSorting
  dominant: ToolshopSanityImagePaletteSwatchSorting
  lightMuted: ToolshopSanityImagePaletteSwatchSorting
  muted: ToolshopSanityImagePaletteSwatchSorting
}

type ToolshopSanityImagePaletteSwatch {
  _key: String
  _type: String
  background: String
  foreground: String
  population: Float
  title: String
}

input ToolshopSanityImagePaletteSwatchFilter {
  _key: ToolshopStringFilter
  _type: ToolshopStringFilter
  background: ToolshopStringFilter
  foreground: ToolshopStringFilter
  population: ToolshopFloatFilter
  title: ToolshopStringFilter
}

input ToolshopSanityImagePaletteSwatchSorting {
  _key: ToolshopSortOrder
  _type: ToolshopSortOrder
  background: ToolshopSortOrder
  foreground: ToolshopSortOrder
  population: ToolshopSortOrder
  title: ToolshopSortOrder
}

type ToolshopSchedule {
  _key: String
  _type: String
  title: String
  date: ToolshopDate
  sessions: [ToolshopSession]
  callToActionLabel: String
  callToActionUrl: String
  colorScheduleBackground: ToolshopColor
  colorScheduleText: ToolshopColor
  colorScheduleTitles: ToolshopColor
  colorScheduleHours: ToolshopColor
}

type ToolshopSchedules {
  _key: String
  _type: String
  title: String
  schedule: [ToolshopSchedule]
  callToActionLabel: String
  callToActionUrl: String
  colorScheduleBackground: ToolshopColor
  colorScheduleText: ToolshopColor
  colorScheduleTitles: ToolshopColor
  colorScheduleHours: ToolshopColor
}

type ToolshopSeofields {
  _key: String
  _type: String
  metatitle: String
  metadescription: String
  ogimage: ToolshopImage
  lastModificationDate: ToolshopDate
  excludeFromSitemap: Boolean

  """Exclude page from being indexed by search engines (i.e. Google)"""
  excludeFromSearchIndex: Boolean
  gtmIdOverride: String
}

input ToolshopSeofieldsFilter {
  _key: ToolshopStringFilter
  _type: ToolshopStringFilter
  metatitle: ToolshopStringFilter
  metadescription: ToolshopStringFilter
  ogimage: ToolshopImageFilter
  lastModificationDate: ToolshopDateFilter
  excludeFromSitemap: ToolshopBooleanFilter
  excludeFromSearchIndex: ToolshopBooleanFilter
  gtmIdOverride: ToolshopStringFilter
}

input ToolshopSeofieldsSorting {
  _key: ToolshopSortOrder
  _type: ToolshopSortOrder
  metatitle: ToolshopSortOrder
  metadescription: ToolshopSortOrder
  ogimage: ToolshopImageSorting
  lastModificationDate: ToolshopSortOrder
  excludeFromSitemap: ToolshopSortOrder
  excludeFromSearchIndex: ToolshopSortOrder
  gtmIdOverride: ToolshopSortOrder
}

type ToolshopSeries implements ToolshopDocument {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: ToolshopDateTime

  """Date the document was last modified"""
  _updatedAt: ToolshopDateTime

  """Current document revision"""
  _rev: String
  _key: String
  title: String
}

input ToolshopSeriesFilter {
  """Apply filters on document level"""
  _: ToolshopSanity_DocumentFilter
  _id: ToolshopIDFilter
  _type: ToolshopStringFilter
  _createdAt: ToolshopDatetimeFilter
  _updatedAt: ToolshopDatetimeFilter
  _rev: ToolshopStringFilter
  _key: ToolshopStringFilter
  title: ToolshopStringFilter
}

input ToolshopSeriesSorting {
  _id: ToolshopSortOrder
  _type: ToolshopSortOrder
  _createdAt: ToolshopSortOrder
  _updatedAt: ToolshopSortOrder
  _rev: ToolshopSortOrder
  _key: ToolshopSortOrder
  title: ToolshopSortOrder
}

type ToolshopSession {
  _key: String
  _type: String
  title: String
  descriptionRaw: JSON
  startTime: String
  endTime: String
}

type ToolshopSlug {
  _key: String
  _type: String
  current: String
}

input ToolshopSlugFilter {
  _key: ToolshopStringFilter
  _type: ToolshopStringFilter
  current: ToolshopStringFilter
}

input ToolshopSlugSorting {
  _key: ToolshopSortOrder
  _type: ToolshopSortOrder
  current: ToolshopSortOrder
}

type ToolshopSocialmedia {
  _key: String
  _type: String

  """netlify"""
  github: String

  """@netlify"""
  twitter: String

  """netlify"""
  linkedin: String

  """netlify"""
  instagram: String
}

input ToolshopSocialmediaFilter {
  _key: ToolshopStringFilter
  _type: ToolshopStringFilter
  github: ToolshopStringFilter
  twitter: ToolshopStringFilter
  linkedin: ToolshopStringFilter
  instagram: ToolshopStringFilter
}

input ToolshopSocialmediaSorting {
  _key: ToolshopSortOrder
  _type: ToolshopSortOrder
  github: ToolshopSortOrder
  twitter: ToolshopSortOrder
  linkedin: ToolshopSortOrder
  instagram: ToolshopSortOrder
}

enum ToolshopSortOrder {
  """Sorts on the value in ascending order."""
  ASC

  """Sorts on the value in descending order."""
  DESC
}

type ToolshopSpan {
  _key: String
  _type: String
  marks: [String]
  text: String
}

type ToolshopSpeakers {
  _key: String
  _type: String
  title: String
  speakers: [ToolshopPeople]
  colorSpeakersBackground: ToolshopColor
  colorSpeakersText: ToolshopColor
  colorSpeakersCardBackground: ToolshopColor
  colorSpeakersCardAccent: ToolshopColor
  colorSpeakersCardSpeakerName: ToolshopColor
  colorSpeakersCardSpeakerTitleAndCompany: ToolshopColor
  colorSpeakersCardSpeakerTwitterLogo: ToolshopColor
}

type ToolshopSpeakerVideo {
  _key: String
  _type: String
  speakers: [ToolshopPeople]

  """Just the video ID e.g. `PPtmowJoe3s`"""
  videoId: String
  title: String
  thumbnail: String
  customImageThumbnail: ToolshopNetlifyImage
}

type ToolshopSponsors {
  _key: String
  _type: String
  title: String
  companies: [ToolshopCompany]
  colorSponsorsBackground: ToolshopColor
  colorSponsorsText: ToolshopColor
}

type ToolshopSsg implements ToolshopDocument {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: ToolshopDateTime

  """Date the document was last modified"""
  _updatedAt: ToolshopDateTime

  """Current document revision"""
  _rev: String
  _key: String
  title: String
}

input ToolshopSsgFilter {
  """Apply filters on document level"""
  _: ToolshopSanity_DocumentFilter
  _id: ToolshopIDFilter
  _type: ToolshopStringFilter
  _createdAt: ToolshopDatetimeFilter
  _updatedAt: ToolshopDatetimeFilter
  _rev: ToolshopStringFilter
  _key: ToolshopStringFilter
  title: ToolshopStringFilter
}

input ToolshopSsgSorting {
  _id: ToolshopSortOrder
  _type: ToolshopSortOrder
  _createdAt: ToolshopSortOrder
  _updatedAt: ToolshopSortOrder
  _rev: ToolshopSortOrder
  _key: ToolshopSortOrder
  title: ToolshopSortOrder
}

input ToolshopStringFilter {
  """Checks if the value is equal to the given input."""
  eq: String

  """Checks if the value is not equal to the given input."""
  neq: String

  """Checks if the value matches the given word/words."""
  matches: String
  in: [String!]
  nin: [String!]
}

type ToolshopSupportPage implements ToolshopDocument {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: ToolshopDateTime

  """Date the document was last modified"""
  _updatedAt: ToolshopDateTime

  """Current document revision"""
  _rev: String
  _key: String
  title: String
  slug: ToolshopSlug
  textRaw: JSON
  seofields: ToolshopSeofields
}

input ToolshopSupportPageFilter {
  """Apply filters on document level"""
  _: ToolshopSanity_DocumentFilter
  _id: ToolshopIDFilter
  _type: ToolshopStringFilter
  _createdAt: ToolshopDatetimeFilter
  _updatedAt: ToolshopDatetimeFilter
  _rev: ToolshopStringFilter
  _key: ToolshopStringFilter
  title: ToolshopStringFilter
  slug: ToolshopSlugFilter
  seofields: ToolshopSeofieldsFilter
}

input ToolshopSupportPageSorting {
  _id: ToolshopSortOrder
  _type: ToolshopSortOrder
  _createdAt: ToolshopSortOrder
  _updatedAt: ToolshopSortOrder
  _rev: ToolshopSortOrder
  _key: ToolshopSortOrder
  title: ToolshopSortOrder
  slug: ToolshopSlugSorting
  seofields: ToolshopSeofieldsSorting
}

type ToolshopTag implements ToolshopDocument {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: ToolshopDateTime

  """Date the document was last modified"""
  _updatedAt: ToolshopDateTime

  """Current document revision"""
  _rev: String
  _key: String
  title: String
  slug: ToolshopSlug
  parentTags: [ToolshopTag]
}

input ToolshopTagFilter {
  """Apply filters on document level"""
  _: ToolshopSanity_DocumentFilter
  _id: ToolshopIDFilter
  _type: ToolshopStringFilter
  _createdAt: ToolshopDatetimeFilter
  _updatedAt: ToolshopDatetimeFilter
  _rev: ToolshopStringFilter
  _key: ToolshopStringFilter
  title: ToolshopStringFilter
  slug: ToolshopSlugFilter
}

type ToolshopTagFramework implements ToolshopDocument {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: ToolshopDateTime

  """Date the document was last modified"""
  _updatedAt: ToolshopDateTime

  """Current document revision"""
  _rev: String
  _key: String
  title: String
}

input ToolshopTagFrameworkFilter {
  """Apply filters on document level"""
  _: ToolshopSanity_DocumentFilter
  _id: ToolshopIDFilter
  _type: ToolshopStringFilter
  _createdAt: ToolshopDatetimeFilter
  _updatedAt: ToolshopDatetimeFilter
  _rev: ToolshopStringFilter
  _key: ToolshopStringFilter
  title: ToolshopStringFilter
}

input ToolshopTagFrameworkSorting {
  _id: ToolshopSortOrder
  _type: ToolshopSortOrder
  _createdAt: ToolshopSortOrder
  _updatedAt: ToolshopSortOrder
  _rev: ToolshopSortOrder
  _key: ToolshopSortOrder
  title: ToolshopSortOrder
}

type ToolshopTags {
  _key: String
  _type: String
  useCase: [ToolshopUseCase]
  series: [ToolshopSeries]
  industry: [ToolshopIndustry]
  geo: [ToolshopGeo]
  technologies: ToolshopTechnologies
  partnerEcosystem: [ToolshopPartnerEcosystem]
  netlifyProduct: [ToolshopNetlifyProduct]
  businessValueProposition: [ToolshopBusinessValueProposition]
  persona: [ToolshopPersona]
}

input ToolshopTagsFilter {
  _key: ToolshopStringFilter
  _type: ToolshopStringFilter
  technologies: ToolshopTechnologiesFilter
}

input ToolshopTagSorting {
  _id: ToolshopSortOrder
  _type: ToolshopSortOrder
  _createdAt: ToolshopSortOrder
  _updatedAt: ToolshopSortOrder
  _rev: ToolshopSortOrder
  _key: ToolshopSortOrder
  title: ToolshopSortOrder
  slug: ToolshopSlugSorting
}

input ToolshopTagsSorting {
  _key: ToolshopSortOrder
  _type: ToolshopSortOrder
  technologies: ToolshopTechnologiesSorting
}

type ToolshopTechnologies {
  _key: String
  _type: String
  ssg: [ToolshopSsg]
  framework: [ToolshopFramework]
  cms: [ToolshopCms]
  database: [ToolshopDatabase]
}

input ToolshopTechnologiesFilter {
  _key: ToolshopStringFilter
  _type: ToolshopStringFilter
}

input ToolshopTechnologiesSorting {
  _key: ToolshopSortOrder
  _type: ToolshopSortOrder
}

type ToolshopTemplate implements ToolshopDocument {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: ToolshopDateTime

  """Date the document was last modified"""
  _updatedAt: ToolshopDateTime

  """Current document revision"""
  _rev: String
  _key: String
  title: String
  slug: ToolshopSlug

  """A short, concise string of text describing this content."""
  description: String
  body: String
  thumbnail: ToolshopNetlifyImage
  screenshots: [ToolshopNetlifyImage]

  """Link this API integration to a partner."""
  partner: ToolshopPartner

  """URL to template you can Deploy on Netlify with one-click of a button."""
  templateUrl: String

  """Integration version"""
  version: String

  """
  Highlight highly-maintained templates, popular templates, requested templates,
  or partnerships that are currently being promoted.
  """
  prioritized: Boolean

  """Determines whether the integration was verified by the partner."""
  partnerVerified: Boolean

  """Integration availability to customers."""
  status: String
  relatedContent: [ToolshopRelatedContent]
  tags: [ToolshopTag]
  seofields: ToolshopSeofields
}

input ToolshopTemplateFilter {
  """Apply filters on document level"""
  _: ToolshopSanity_DocumentFilter
  _id: ToolshopIDFilter
  _type: ToolshopStringFilter
  _createdAt: ToolshopDatetimeFilter
  _updatedAt: ToolshopDatetimeFilter
  _rev: ToolshopStringFilter
  _key: ToolshopStringFilter
  title: ToolshopStringFilter
  slug: ToolshopSlugFilter
  description: ToolshopStringFilter
  body: ToolshopStringFilter
  thumbnail: ToolshopNetlifyImageFilter
  partner: ToolshopPartnerFilter
  templateUrl: ToolshopStringFilter
  version: ToolshopStringFilter
  prioritized: ToolshopBooleanFilter
  partnerVerified: ToolshopBooleanFilter
  status: ToolshopStringFilter
  seofields: ToolshopSeofieldsFilter
}

input ToolshopTemplateSorting {
  _id: ToolshopSortOrder
  _type: ToolshopSortOrder
  _createdAt: ToolshopSortOrder
  _updatedAt: ToolshopSortOrder
  _rev: ToolshopSortOrder
  _key: ToolshopSortOrder
  title: ToolshopSortOrder
  slug: ToolshopSlugSorting
  description: ToolshopSortOrder
  body: ToolshopSortOrder
  thumbnail: ToolshopNetlifyImageSorting
  templateUrl: ToolshopSortOrder
  version: ToolshopSortOrder
  prioritized: ToolshopSortOrder
  partnerVerified: ToolshopSortOrder
  status: ToolshopSortOrder
  seofields: ToolshopSeofieldsSorting
}

type ToolshopTestimonial {
  _key: String
  _type: String
  author: ToolshopPeople

  """Do not include quotation marks"""
  quote: String
}

type ToolshopTestimonials {
  _key: String
  _type: String
  pancakeIntro: ToolshopPancakeIntro
  testimonials: [ToolshopTestimonial]
  pancakeTheme: ToolshopPancakeTheme
}

type ToolshopTextWithColumns {
  _key: String
  _type: String
  pancakeIntro: ToolshopPancakeIntro
  columns: [ToolshopColumn]
  callToActionLabel: String
  callToActionUrl: String
  pancakeTheme: ToolshopPancakeTheme
}

type ToolshopUseCase implements ToolshopDocument {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: ToolshopDateTime

  """Date the document was last modified"""
  _updatedAt: ToolshopDateTime

  """Current document revision"""
  _rev: String
  _key: String
  title: String
}

input ToolshopUseCaseFilter {
  """Apply filters on document level"""
  _: ToolshopSanity_DocumentFilter
  _id: ToolshopIDFilter
  _type: ToolshopStringFilter
  _createdAt: ToolshopDatetimeFilter
  _updatedAt: ToolshopDatetimeFilter
  _rev: ToolshopStringFilter
  _key: ToolshopStringFilter
  title: ToolshopStringFilter
}

input ToolshopUseCaseSorting {
  _id: ToolshopSortOrder
  _type: ToolshopSortOrder
  _createdAt: ToolshopSortOrder
  _updatedAt: ToolshopSortOrder
  _rev: ToolshopSortOrder
  _key: ToolshopSortOrder
  title: ToolshopSortOrder
}

type ToolshopVideo {
  _key: String
  _type: String
  title: String
  intro: String

  """Just the video ID e.g. `PPtmowJoe3s`"""
  videoId: String
  colorVideoBackground: ToolshopColor
  colorVideoText: ToolshopColor
}

type ToolshopVideos {
  _key: String
  _type: String
  title: String
  videos: [ToolshopSpeakerVideo]
  callToActionLabel: String
  callToActionUrl: String
  colorVideosBackground: ToolshopColor
  colorVideosButtonBackground: ToolshopColor
  colorVideosButtonText: ToolshopColor
}

type ToolshopVideoSection {
  _key: String
  _type: String
  youtubeId: String
  pancakeIntro: ToolshopPancakeIntro
  callToActionUrl: String
  callToActionLabel: String
  callToActionPosition: String
  pancakeTheme: ToolshopPancakeTheme
}

type ToolshopWebinar implements ToolshopDocument {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: ToolshopDateTime

  """Date the document was last modified"""
  _updatedAt: ToolshopDateTime

  """Current document revision"""
  _rev: String
  _key: String
  title: String
  slug: ToolshopSlug
  descriptionRaw: JSON

  """E.g. Monday, Aug 9th at 11am PDT / 2pm EDT"""
  date: String
  presenters: [ToolshopPeople]
  hubspotid: String

  """This will create a `/watch` page with the video"""
  youtubeid: String
  callToActionUrl: String
  callToActionLabel: String
  thankYouPageWysiwygRaw: JSON
  resourcesCardImage: ToolshopImage
  seofields: ToolshopSeofields
  tags: ToolshopTags
}

input ToolshopWebinarFilter {
  """Apply filters on document level"""
  _: ToolshopSanity_DocumentFilter
  _id: ToolshopIDFilter
  _type: ToolshopStringFilter
  _createdAt: ToolshopDatetimeFilter
  _updatedAt: ToolshopDatetimeFilter
  _rev: ToolshopStringFilter
  _key: ToolshopStringFilter
  title: ToolshopStringFilter
  slug: ToolshopSlugFilter
  date: ToolshopStringFilter
  hubspotid: ToolshopStringFilter
  youtubeid: ToolshopStringFilter
  callToActionUrl: ToolshopStringFilter
  callToActionLabel: ToolshopStringFilter
  resourcesCardImage: ToolshopImageFilter
  seofields: ToolshopSeofieldsFilter
  tags: ToolshopTagsFilter
}

input ToolshopWebinarSorting {
  _id: ToolshopSortOrder
  _type: ToolshopSortOrder
  _createdAt: ToolshopSortOrder
  _updatedAt: ToolshopSortOrder
  _rev: ToolshopSortOrder
  _key: ToolshopSortOrder
  title: ToolshopSortOrder
  slug: ToolshopSlugSorting
  date: ToolshopSortOrder
  hubspotid: ToolshopSortOrder
  youtubeid: ToolshopSortOrder
  callToActionUrl: ToolshopSortOrder
  callToActionLabel: ToolshopSortOrder
  resourcesCardImage: ToolshopImageSorting
  seofields: ToolshopSeofieldsSorting
  tags: ToolshopTagsSorting
}

type ToolshopWebsite {
  _key: String
  _type: String
  url: String
  name: String
  description: String
  screenshot: ToolshopNetlifyImage
}

type ToolshopWorkshop implements ToolshopDocument {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: ToolshopDateTime

  """Date the document was last modified"""
  _updatedAt: ToolshopDateTime

  """Current document revision"""
  _rev: String
  _key: String
  title: String
  slug: ToolshopSlug
  descriptionRaw: JSON
  companies: [ToolshopCompany]
  hubspotid: String
  resourcesCardImage: ToolshopImage
  seofields: ToolshopSeofields
  tags: ToolshopTags
}

input ToolshopWorkshopFilter {
  """Apply filters on document level"""
  _: ToolshopSanity_DocumentFilter
  _id: ToolshopIDFilter
  _type: ToolshopStringFilter
  _createdAt: ToolshopDatetimeFilter
  _updatedAt: ToolshopDatetimeFilter
  _rev: ToolshopStringFilter
  _key: ToolshopStringFilter
  title: ToolshopStringFilter
  slug: ToolshopSlugFilter
  hubspotid: ToolshopStringFilter
  resourcesCardImage: ToolshopImageFilter
  seofields: ToolshopSeofieldsFilter
  tags: ToolshopTagsFilter
}

input ToolshopWorkshopSorting {
  _id: ToolshopSortOrder
  _type: ToolshopSortOrder
  _createdAt: ToolshopSortOrder
  _updatedAt: ToolshopSortOrder
  _rev: ToolshopSortOrder
  _key: ToolshopSortOrder
  title: ToolshopSortOrder
  slug: ToolshopSlugSorting
  hubspotid: ToolshopSortOrder
  resourcesCardImage: ToolshopImageSorting
  seofields: ToolshopSeofieldsSorting
  tags: ToolshopTagsSorting
}

"""Currently authed user"""
type Viewer {
  """Metadata and logged-in state for all OneGraph services"""
  serviceMetadata: OneGraphServicesMetadata!

  """Currently logged in oneUser"""
  oneGraph: OneGraphUser
}

